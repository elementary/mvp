{
    "Getting Started": "入门",
    "Welcome to the elementary Developer Guide! This book was created to teach you all about creating and distributing apps for elementary OS. The introduction will make sure that you have all the tools for the job and a solid understanding of what this book is about. Some of you may feel confident enough to jump straight into coding. If that's the case, you might want to skip ahead and start writing your first app.": "欢迎来到 elementary 开发者指南！这本书的目的是教会你创建并发布用于 elementary OS 的应用程序。介绍部分会指导你准备好所有相关工具并确保你理解这本书要讲的内容。如果你自信于不用指南而直接开始编写代码，当然，你可以这样做。",
    "However, we strongly recommend to at least skim through this preparation step. Having the right setup is going to help you reach your goals faster, and having a solid foundation is going to help you throughout the rest of this book.": "但无论如何，我们都强烈建议你阅读这一关于准备阶段的章节，哪怕是略读。毕竟，一个好的开端能帮助你更快的达成目标。而且，有一个坚实的基础，能帮助你更轻松的阅读完这本书的剩余部分。",
    "What We Will And Won't Cover": "涉及的内容",
    "We're going to assume that you have absolutely no experience in writing apps for elementary. But we will assume some basic programming knowledge, and hopefully a little experience in Vala or at least similarly syntaxed languages. If you're not familiar with Vala, we highly encourage you to brush up on it before coming here.": "我们假定你没有在 elementary OS 上开发应用程序的经验。但我们仍然希望你已经具备了一些基本的编程知识、有一点 Vala 或者类似语法的编程经历。如果你已经忘记了 Vala，我们强烈的鼓励你在这之前去温习一下 Vala 语言。",
    "We’re also not covering design too much in this guide; that’s what the <a href=\"/docs/human-interface-guidelines\">Human Interface Guidelines</a> (HIG) are for, and you’re highly encouraged to take a look there before beginning your app. We're going to assume you have a basic knowledge of (or at least a quick link to) the HIG and focus on coding. However, elementary is all about great design and stellar consistency. It’s important you grasp these concepts before moving on.": "在指南中，我们也不会过多的谈论设计：那是<a href=\"/docs/human-interface-guidelines\">人机交互指南</a> (HIG)要做的，而且在编写应用前你最好先去那里看看。我们假定你已经具备了 HIG 的基础知识(至少点过链接)，并且你的侧重点是编写代码。然而，elementary 是由优秀的、一致的和连续的设计组成。在你进行下一步之前，掌握这些概念是很重要的。",
    "In this book, we're going to talk about building apps using GTK+, Granite, and other tech available in elementary, setting up a build system, hosting your code for collaborative development, working with translations, a few other bits and pieces, and finally packaging and distributing your new app.": "这本书中，我们会介绍 GTK+, Granti 等其它可在 elementary 使用的技术，来搭建开发环境，托管用于合作开发的代码，翻译，及其他琐事，以及最终的打包并发布你的新应用。",
    "The Basic Setup": "基本设置",
    "Before we even think about writing code, you'll need a certain basic setup. This chapter will walk you through the process of getting set up. We will cover the following topics:": "在我们开始思考写代码之前，你需要一个特定的基本设置。这章会带你完成设置的所有步骤。我们会设计下面几个话题 ：",
    "Creating an account in launchpad.net and importing an SSH key in Launchpad": "在 launchpad.net 创建帐号并导入 SSH 公匙",
    "Setting up the Bazaar revision control system": "配置 Bazaar 版本控制系统",
    "Getting and using the elementary developer &quot;SDK&quot;": "学习使用 elementary 开发者的 \"SDK\"",
    "We’re going to assume that you’re working from a clean installation of elementary OS Freya or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "我们就假设您正在使用一个完整重新安装的 Elementary OS Freya 或更高版本。这很重要，因为您将要得到的指示可能会参考其他Linux发行版，如Ubuntu，上旧版本(甚至不可用)的软件。您可以使用此向导开发Ubuntu，但是可能不那么容易。",
    "Launchpad": "Launchpad",
    "Launchpad is a free online service provided by Canonical, the same people who brought you Ubuntu. It is used as a platform for hosting code, tracking milestones, tracking bugs, proposing designs, making translations, and more. Launchpad is a powerful resource, especially if you are a developer working with others. We're going to be using it for its various features throughout this book, so it's a good idea for you to sign up for an account. If you already have an account, feel free to move on to the next section.": "Launchpad是一个免费的在线服务。它来自把你带到Linux的同一组人Canonical。它被用来托管代码，跟踪进展，跟踪Bug，设计，翻译，等等。 LaunchPad是一个强大的资源，特别是你与他人合作时，功能更多。我们会在这本书中提到它的各种功能，所以您最好去注册一个账号。如果您已经有了一个账号，请移步下一节。",
    "To set up a Launchpad account:": "注册 Launchpad 帐号你需要：",
    "Go to <a href=\"https://launchpad.net\">Launchpad.net</a>. Click on <strong>Log in/Register</strong> in the top right corner of the page.": "打开 <a href=\"https://launchpad.net\">Launchpad.net</a>. 点击页面右上角的 <strong>Log in/Register</strong>.",
    "Select <strong>I am a new Ubuntu One user</strong> on the left side.": "在左侧选择<strong>I am a new Ubuntu One user</strong>.",
    "Enter your information and click <strong>Create account</strong>.": "输入你的信息然后点击 <strong>Create account</strong>.",
    "After you have verified your email your Launchpad account is ready, so let's move on to the next section. Remember, we're not going to go over all the little details in this book. We'll come back to Launchpad a few times later on to use specific features, but if you really want to learn everything there is to know about the website you should read their user guide. Onward!": "在完成 Launchpad 的邮箱验证之后，进入到下一个阶段。注意，我们不会这本书里的所有细节都过一遍。在介绍过几个特定的功能之后，我们会回到 Launchpad 。但如果你确实想了解关于这个网站的所有内容，你可以阅读用户指南。加油！",
    "Bazaar": "Bazaar",
    "elementary projects are hosted on Launchpad. To interact with the code on Launchpad, we use a distributed <a href=\"http://en.wikipedia.org/wiki/Revision_control\">revision control system</a> called Bazaar. This allows multiple developers to collaboratively develop and maintain the code while keeping track of each revision along the way.": "elementary 所有项目都托管在 Launchpad 上。为了在 Launchpad 上操作代码，我们使用了一个分布式的<a href=\"http://en.wikipedia.org/wiki/Revision_control\">版本控制系统</a>，Bazaar。这样在跟踪每个版本的同时，可以由多名开发者一起合作编写和维护代码。",
    "If you're ready, let's get you set up to use Bazaar:": "如果你准备好了，让我们开始设置和使用 Bazaar：",
    "Open the Terminal. You'll be interacting with Bazaar through a simple terminal-based program called bzr.": "打开“终端”。你将通过一个名为 bzr 的基于终端的程序来与 Bazaar 交互。",
    "You'll need to install bzr. Simply type the following into the Terminal:": "您需要安装 bzr ，将下列命令输入到您的终端：",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http://en.wikipedia.org/wiki/Secure_Shell\">SSH</a> key pair (a kind of fingerprint for your computer) and import the public key in Launchpad. Type the following in terminal:": "为了验证身份和安全传输，你需要生成一个<a href=\"http://zh.wikipedia.org/wiki/Secure_Shell\">SSH</a> 密钥对（一种您的计算机的指纹）并在 Launchpad 中导入公钥。在终端中输入下列内容：",
    "When prompted, press Enter to accept the default file name for your key.": "在提示时，按回车接受为您的密钥使用默认文件名。",
    "Next, enter a password to protect your SSH key. You’ll be asked to enter it again, just to make sure you didn’t make any typos. You'll need to enter this password any time you try to push code to launchpad so don't forget it! Optionally, you can just press enter and use no password, but this is obviously less secure.": "然后输入密码，保护你的SSH公匙。你需要输入两遍，确保不会有粗别字。在以后每次提交代码到Launchpad的时候，你都会被要求输入密码，所以别忘了它。当然，你可以直接敲击回车，不使用密码，但这样显然是不安全的。",
    "Now, we're going to tell Launchpad about your SSH key. Open your SSH key with the following command, then copy the text from the file that opens in Scratch:": "现在，我们要告诉Launchpad你的SSH公匙。用下面的命令打开你的SSH公匙。然后复制在Scratch中打开的文件的文本：",
    "Visit <a href=\"https://launchpad.net/people/+me/+editsshkeys\">your SSH keys page</a>. Paste the text in the textbox and click <strong>Import public key</strong>.": "这是你的<a href=\"https://launchpad.net/people/+me/+editsshkeys\">SSH公匙页面</a>。粘贴文本到输入框里，然后点击<strong>Import public key，提交公匙</strong>.",
    "Now you can connect bzr to your Launchpad account. You'll need your launchpad id, which you can look up at <a href=\"https://launchpad.net/people/+me\">your launchpad page</a>.": "现在你可以用bzr连接到你的Launchpad账户。你可以在<a href=\"https://launchpad.net/people/+me\">你的launchpad页面</a>找到你的launchpad id，记下来。",
    "Done! Now you can download source code hosted on Launchpad and upload your own code. We'll revisit using bzr in a minute, but for now you're logged in. For a more in-depth introduction to bzr, you can also check the complete <a href=\"http://doc.bazaar.canonical.com/latest/en/user-guide\">Bazaar User Guide</a> provided by Canonical.": "完成！现在你可以下载托管在Launchpad上的源代码，还可以上传你自己的源代码。待会儿我们会继续使用bzr。现在你需要登录你的账户，在这里 <a href=\"http://doc.bazaar.canonical.com/latest/en/user-guide\">Bazaar User Guide ,Bazaar 用户指南</a>更深入的了解Bazaar，这个页面由Canonical提供。",
    "Developer &quot;SDK&quot;": "开发者 \"SDK\"",
    "At the time of this writing, elementary doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "elementary并没有像Android和iOS有一个全功能的集成开发工具。但庆幸的是，我们只需要学习几个简单的应用案例就可以开始编写代码了。",
    "Scratch": "Scratch",
    "The first piece of our simple &quot;SDK&quot; is the code editor Scratch. This comes by default with elementary OS. It comes with some helpful features like syntax highlighting, auto-save, and the Folder Manager extension. There are other extensions for Scratch as well, like the Outline, Terminal or Devhelp extensions. Play around with what works best for you.": "我们的第一个简易\"SDK\"是一个叫做Scratch的代码编辑器。elementary系统预装有这个软件。它提供语法高亮，自动保存和文件夹管理扩展功能。还有一些其他的扩展，例如Outline，Terminal，Devhelp等等。找到最适合你的工具吧。",
    "Terminal": "终端",
    "We’re going to use Terminal in order to compile our code, push revisions to Bazaar (bzr), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "我们使用Terminal编译并提交代码到Barzza（bzr），还有一些其他事。通过这个手册，我们将会与Terminal命令打交道。你可以假设任何的Terminal命令都是在你当前的“项目”根目录下执行的，当然，是假设。elementary并不会默认的创建那个目录，所以你要自己创建。",
    "Open Terminal and issue the following command:": "打开Terminal，输入下面的命令：",
    "Development Libraries": "开发者文档",
    "In order to build apps you're going to need their development libraries. We can fetch a basic set of libraries with the following terminal command:": "编译应用需要依赖开发环境。用下面的命令可以获得基本的库文件：",
    "The command <code>apt-get build-dep</code> installs the build dependencies of an app in the repositories. In this case, we're fetching the development libraries needed to build Granite Demo, an example app. We'll talk more about Granite later, but keep in mind that if you want to build an app from source, you can usually get its build dependencies easily by using <code>apt-get build-dep</code>.": "<code>apt-get build-dep</code>命令从资料库里安装了编译一个应用所依赖的文件。同时，我们会获取编译样例应用Granite Demo 的开发库文件。Granite 待会儿在讨论，你要记住的是，如果你想从源码编译一个应用的话，通常你可以使用<code>apt-get build-dep</code>来获取所需依赖。",
    "And with that, we're ready to dive into development! Let's move on!": "OK，我们已经准备好进入开发环境了！",
    "Hello World": "你好，世界",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a bzr branch. Let’s begin.": "我们第一个开发的应用程序肯定非“Hello World”莫属了。我们会从为程序代码创建一个文件夹讲起，到编译，再把它放入bzr项目分支。让我们开始吧。",
    "Setting Up": "设置",
    "Apps on elementary OS are organized into standardized directories contained in your project's &quot;root&quot; folder. Let's create a couple of these to get started:": "elementary OS 的应用在你项目的“根”文件夹里有序的组织存放目录。我们以创建下面几个文件夹开始：",
    "Create your root folder called &quot;gtk-hello&quot;": "创建你的根文件夹目录名为“gtk-hello”",
    "Create a folder inside that one called &quot;src&quot;. This folder will contain all of our source code.": "在刚创建的目录中创建 \"src\" 目录。这个目录存放您所有的源代码文件。",
    "Later on, We'll talk about adding other directories like &quot;po&quot; and &quot;data&quot;. For now, this is all we need.": "之后，我们会讲解其他例如“po”、“data”的文件夹。现在的话，这就够了。",
    "Gtk.Window and Gtk.Button": "Gtk.Window 和 Gtk.Button",
    "Now what you've been waiting for! We're going to create a window that contains a button. When pressed, the button will display the text &quot;Hello World!&quot; To do this, we're going to use a widget toolkit called GTK+ and the programming language Vala. Before we begin, we highly recommend that you do not copy and paste. Typing each section manually will help you to practice and remember. Let's get started:": "现在就是你一直等待的！我们会创建一个包含按钮的窗口。按下时，按钮会显示“Hello World！”的字样。为了完成这个效果，我们要使用 Vala 语言和一个叫做 GTK\n+ 的组件。在正式开始之前，我们强烈建议不要使用复制粘贴。手动输入每个部分，会达到更好的学习效果。我们开始吧：",
    "Create a new file in Scratch and save it as &quot;gtk-hello.vala&quot; inside your &quot;src&quot; folder": "在您的 \"src\" 目录下用 Scratch 创建一个新文件并保存，名为 \"gtk-hello.vala\" ",
    "First we must create the main function of our new GTK app. Type the following in your &quot;gtk-hello.vala&quot;.": "首先，我们必需为我们的新 GTK 程序创建 main 函数。在您的\"gtk-hello.vala\"文件中输入以下内容：",
    "Now, that we've initialized Gtk, we'll create a new window and declare a few properties of this window. You'll notice that most of these property names are pretty straightforward. Try to guess what each one does and we'll explain in a second. Type the following after the <code>Gtk.init</code> line, but before the last bracket:": "在初始化 Gtk 之后，我们要创建一个新的窗口，然后为这个窗口声明几个属性。你会注意到大多数属性的名字都是很直白的。猜一猜这些属性，我们过会儿会解释。在<code>Gtk.init</code>后面，右括号的前面输入下面的内容：",
    "The first line creates a new <code>Gtk.Window</code> called &quot;window&quot;. The second line sets the window title that you see at the top of the window. next, we create a margin inside that window so that widgets don't bump up against the window's edge. Then we tell the window manager that we want to place this window in the center of the screen instead of in the default position (which is usually the top left). We also must give our window a default size so that is does not appear too small for the user to interact with it. Finally, we explain what to do with this process if the main window is closed; In our case, we want to quit.": "第一行创建了一个叫做“window”的<code>Gtk.Window</code>。第二行设置了窗口上的标题，就是窗口顶上的那段文字。接着，我们给窗口设了一个外边距，防止里面的组件不会紧挨着窗口的边缘。然后我们告诉窗口把默认位置（通常是左上角）改为屏幕中心。我们还必需为它设置一个默认大小，确保不会看上去太小。最后，在主窗口关闭前，我们可能要处理一些事。而现在，我们只需要退出就可以了。",
    "Now that we've defined a nice window, let's put a button inside of it. After our window stuff (but before <code>Gtk.main</code> line), leave a new line and then type the following:": "我们已经定义了一个漂亮的窗口。让我们在里面放一个按钮。在定义窗口属性的那几行代码后面（<code>Gtk.main</code>之前），加一行并敲入下面的代码：",
    "Any ideas about what happened here? We've created a new <code>Gtk.Button</code> with the label &quot;Click me!&quot;. Then we've said that if this button is clicked, we want to change the label to say &quot;Hello World!&quot; instead. We've also said that we want to make the button insensitive; We do this because clicking the button again has no visible effect. Finally, we add the button to our <code>Gtk.Window</code> and declare that we want to show all of the window's contents.": "对新加的这些代码有想法吗？我们创建了一个带着“Click me！”标签的<code>Gtk.Button</code>——按钮。然后我们实现了当按钮被点击后，按钮上的标签变为“Hello World！”。我们也实现了按钮的不可点击，因为再次点击并没有别的可见效果。最后，我们把按钮添加到了我们的<code>Gtk.Window</code>里面，并且声明我们想要显示所有的窗口内容。",
    "Compiling and Running your code": "编译并运行你的代码",
    "Ready to test it out? Fire up your terminal and make sure you're in &quot;~/Projects/gtk-hello/src&quot;. Then execute the following commands to compile and run your first Gtk app:": "准备好测试一下了吗？打开你的终端，确认你的工作目录为“~/Projects/gtk-hello/src”。然后执行下面的命令编译并运行你的第一个 Gtk 应用：",
    "Did it work? If so, congratulations! If not, read over your source code again and look for errors. Also check the output of your terminal. Usually there is helpful output that will help you track down your mistake.": "成功了吗？如果成功了，那祝贺你！如果没有，重新看一遍源代码找找错误。同时检查终端的输出信息。通常情况下，终端的信息对你找到错误会很有帮助。",
    "Pushing to Launchpad": "提交到 Launchpad",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code. So let's take a minute to revisit our friend <code>bzr</code>:": "在做别的重要事之前，必需先提交我们的代码。如果不这样做，在合作开发中会导致误解，一次提交太多的代码也会使你代码里的 Bug 变得难以查找。所以，现在让我们花点时间看看我们的朋友<code>bzr</code>：",
    "Open Terminal and make sure you're in your project's root directory &quot;~Projects/gtk-hello&quot;": "打开终端并确认你的工作目录为“~/Projects/gtk-hello”",
    "With these commands, we've told <code>bzr</code> to track this folder as a branch, that we'd like to track revisions on the file &quot;gtk-hello.vala&quot;, we've committed our first revision and explained what we did in the revision, and then we've told <code>bzr</code> to push your code to Launchpad in your <a href=\"https://code.launchpad.net/people/+me/\">junk folder</a>.": "通过这些命令，<code>bzr</code>就会把这个文件夹标记为一个分支，这样我们就可以跟踪对文件“gtk-hello.vala”的所有修改。我们已经提交了第一个版本并解释了我们在这个版本里做了什么。我们也告诉<code>bzr</code>把你的代码提交到 Launchpad 的<a href=\"https://code.launchpad.net/people/+me/\">junk folder 垃圾文件夹</a>。",
    "Victory!": "胜利！",
    "Let's recap what we've learned to do in this first section:": "我们概括一下我们在第一部分学到了什么：",
    "We created a new project containing a &quot;src&quot; folder": "我们创建了一个包含“src”文件夹的项目",
    "We created our main vala file and inside it we created a new <code>Gtk.Window</code> and <code>Gtk.Button</code>": "我们创建了主 vala 文件，在里面我们又创建了<code>Gtk.Window</code>和<code>Gtk.Button</code>",
    "We built and ran our app to make sure that everything worked properly": "我们编译并运行以确保没有其它问题",
    "Finally, we commited our first revision and pushed code to Launchpad": "最后，我们提交了我们的第一个版本并且把代码提交到了 Launchpad",
    "Feel free to play around with this example. Make the window a different size, set different margins, make the button say other things. When you're comfortable with what you've learned, go on to the next section.": "多玩玩这个模板，改改窗口大小，设置不同的外边距，改变按钮的文本效果。当你习惯这些时，去下一部分吧。",
    "A Note About Libraries": "关于库的笔记",
    "Remember how when we compiled our code, we used the <code>valac</code> command and the argument <code>--pkg gtk+-3.0</code>? What we did there was make use of a &quot;library&quot;. If you're not familiar with the idea of libraries, a library is a collection of methods that your program can use. So this argument tells <code>valac</code> to include the GTK+ library (version 3.0) when compiling our app.": "还记得我们是怎样用带参数<code>--pkg gtk+-3.0</code>的<code>valac</code>命令编译并运行代码的吗？我们使用了“库”，库是一个你的应用程序可调用方法的集合。所以前面的参数告诉<code>valac</code>命令在编译我们的应用时要使用 GTK+(3.0 版本) 的库。",
    "In our code, we've used the <code>Gtk</code> &quot;Namespace&quot; to declare that we want to use methods from GTK+ (specifically, <code>Gtk.Window</code> and <code>Gtk.Button.with_label</code>). Notice that there is a hierarchy at play. If you want to explore that hierarchy in more detail, you can <a href=\"http://www.valadoc.org/#!api=gtk+-3.0/Gtk.Button\">check out Valadoc</a>.": "在上面的代码里，我们使用了<code>Gtk</code>的命名空间来声明我们所调用的方法来自 Gtk+(尤其包括<code>Gtk.Window</code>和<code>Gtk.Button.with_lable</code>)。注意，这里是有先后顺序的。如果你想了解更多这方面的信息，你可以点击<a href=\"http://www.valadoc.org/#!api=gtk+-3.0/Gtk.Button\">这里 Valadoc</a>。",
    "Our First App": "我们的第一个",
    "In the previous chapter, we created a simple &quot;Hello World!&quot; app to show off our vala and Gtk skills. But what if we wanted to share our new app with a friend? They'd have to know which packages to include with the <code>valac</code> command we used to build our app, and after they'd built it they'd have to run it from the build directory like we did. Clearly, we need to do some more stuff to make our app fit for people to use, to make it a <em>real</em> app.": "在之前的章节里，我们创建了一个简单的“Hello World！”应用程序来演示 vala 以及 Gtk。但是如果我们想把这个应用程序分享给我们的朋友呢？他们就需要了解我们是用的那个库配合<code>valac</code>命令来编译我们的应用，编译完成后，他们也需要像我们一样从编译目录开始运行。很明显，我们需要额外的工作使应用可以直接运行在他们的环境上，使它成为一个<em>真正</em>的应用。",
    "Hello (again) World!": "又见 Hello World！",
    "To create our first real app, we're going to need all the old stuff that we used in the last example. But don't just copy and paste! Let's take this time to practice our skills and see if we can recreate the last example from memory. Additionally, now that you have the basics, we're going to get a little more complex and a little more organized:": "为了创建真正的应用，我们需要在上面的样例中添加一些经典的东西。但不只是复制粘贴！让我们花点时间练习联系我们所学的东西，看看能不能凭记忆重新创建一个样例。而且，这次我们会稍微有序的复杂点：",
    "Create a new folder in &quot;~/Projects&quot; called &quot;hello-world&quot; and put our last project in that folder. Now create a new folder inside &quot;~/Projects/hello-world&quot; called &quot;hello-again&quot;. We're doing this because our first &quot;gtk-hello&quot; and &quot;hello-again&quot; are two branches of the same &quot;hello-world&quot; project. As you get more into collaborative development, you're going to have lots of branches. This method will help you stay organized.": "在“～/Projects”里创建一个新的“hello-world”文件夹，并把上一次的项目放到里面。再在“～/Projects/hello-world”创建一个叫做“hello-again”的文件夹。这样做的原因是我们的第一个“gtk-hello”与第二个“hello-again”是同一个项目的两个分支，都属于“Hello World”项目。当你对合作开发了解的深入一些时，你会有很多个不同的分支。这个办法会帮助你形成有序的组织。",
    "Now go into &quot;hello-again&quot; and create our directory structure including the &quot;src&quot; folder.": "现在进入“hello-again”，创建一个“src”文件夹以形成一个基本的目录结构。",
    "Create &quot;hello-again.vala&quot; in the &quot;src&quot; folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now, just copy and paste this, changing out <code>YourName</code> for your actual name:": "在“src”文件夹里创建一个\"hello-again.vala\"文件。这次我们会在文件的开头稍微正式一点。是的，更正式的在后面。现在，把这些复制粘贴过去，把<code>YourName</code>改为你的名字：",
    "Now, let's create our main function, a <code>Gtk.Window</code>, and set the window's default properties. Refer back to the last chapter if you need a refresher.": "现在来创建我们的主函数，<code>Gtk.Window</code>，然后设置一下窗口的默认属性。如果忘了的话，可以回顾一下上一章节。",
    "For the sake of time let's just put a <code>Gtk.Label</code> instead of a <code>Gtk.Button</code>. We don't need to try to make the label do anything when you click it.": "由于时间的缘故，我们用一个<code>Gtk.Label</code>替代原来的<code>Gtk.Button</code>，现在不需要点击来触发别的事情了。",
    "Don't forget to add it to your window and show the window's contents:": "别忘了把它添加到你的窗口里，然后显示窗口及其内容：",
    "Build &quot;hello-again.vala&quot; just to make sure it all works. If something goes wrong here, feel free to refer back to the last chapter and remember to check your terminal output for any hints.": "编译一下\"hello-again.vala\"确保程序正确。如果有错的话，你可以回顾一下上一章节的内容，或者通过终端的输出寻找出错的线索。",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, push your first revision with <code>bzr</code>:": "初始化分支版本，添加你的文件到项目，然后用你的上一章所学提交一个描述信息。最后，用<code>bzr</code>提交你的第一个版本：",
    "Everything working as expected? Good. Now, let's get our app ready for other people to use.": "达到预期了吗？很好。现在我们要为他人的使用做准备。",
    "The .desktop File": ".desktop 文件",
    "Every app comes with a .desktop file. This file contains all the information needed to display your app in the Applications menu and in the Dock. Let's go ahead and make one:": "每个应用都必有一个以 .desktop 结尾的文件。 这个文件描述了要在应用菜单和 Dock 栏显示应用的所有相关信息。现在我们来创建一个：",
    "In your project's root, create a new folder called &quot;data&quot;.": "在你项目的根目录下，创建一个叫做“data”的文件夹。",
    "Create a new file in scratch and save it in the &quot;data&quot; folder as &quot;hello.desktop&quot;.": "在 scratch 里创建一个文件，命名为“hello.desktop”，然后存在“data”文件夹里。",
    "Type the following into &quot;hello.desktop&quot;. Like before, try to guess what each line does.": "在\"hello.desktop\"文件里输入下列内容。像之前一样，猜猜每一行的意思。",
    "The first line declares that this file is a &quot;Desktop Entry&quot; file. The next three lines are descriptions of our app: The branded name of our app, a generic name for our app, and a comment that describes our app's function. Next, we categorize our app. Then, we say what command will execute it. Finally, we give our app an icon (a generic one included in elementary OS) and let the OS know that this isn't a command line app. For more info about crafting .desktop files, check out <a href=\"/docs/human-interface-guidelines/app-launchers\">this HIG entry</a>.": "第一行声明这是一个“Desktop Entry 桌面入口”文件。接下来的三行是关于我们应用的：应用的品牌名，应用的通用名以及一个描述我们应用功能的注释。接着，分类我们的应用。然后是一个执行它的命令。最后，给我们应用一个图标（elementary OS的一种通用图标）并且告诉系统这不是一个命令行应用。更多 .desktop 文件的相关信息，请查看<a href=\"/docs/human-interface-guidelines/app-launchers\">这里</a>。",
    "Finally, let's add this file to bzr and commit a revision:": "最后，让我们添加这个文件到 bzr 并提交修订：",
    "Legal Stuff": "法律事务",
    "Since we're going to be putting our app out into the wild, we should include some information about who wrote it and the legal usage of its source code. For this we need two new files in our project's root folder: AUTHORS and COPYING.": "当要发布应用时，我们要添加作者信息和源码的法律适用信息。为此我们要在项目的根目录下创建两个新文件：AUTHORS  和 COPYING。",
    "Authors": "作者",
    "The AUTHORS file is pretty straightforward. This file contains your name and email address along with the name and email address of anyone who helped you make your app. It typically looks like this:": "文件 AUTHORS 很直白。这个文件包含你和帮助过你的人的姓名及邮件地址。它一般看起来是这个样子的：",
    "Copying": "Copying",
    "The COPYING file contains a copy of the license that your code is released under. For elementary apps this is typically the <a href=\"http://www.gnu.org/licenses/quick-guide-gplv3.html\">GNU Public License</a> (GPL). Remember the header we added to our source code? That header reminds people that your app is licensed and it belongs to you. You can choose other licenses like the MIT license as well, but for this example let's stick to the <a href=\"http://www.gnu.org/licenses/gpl-3.0.txt\">GPL</a>.": "The COPYING file contains a copy of the license that your code is released under. For elementary apps this is typically the <a href=\"http://www.gnu.org/licenses/quick-guide-gplv3.html\">GNU Public License</a> (GPL). Remember the header we added to our source code? That header reminds people that your app is licensed and it belongs to you. You can choose other licenses like the MIT license as well, but for this example let's stick to the <a href=\"http://www.gnu.org/licenses/gpl-3.0.txt\">GPL</a>.",
    "Mark Your Progress": "标记你的进度",
    "Did you remember to add these files to bzr and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to Launchpad. Keep in mind that this acts as a backup system as well; when we push our work to Launchpad, we know it's safe and we can always revert to a known good revision if we mess up later.": "Did you remember to add these files to bzr and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to Launchpad. Keep in mind that this acts as a backup system as well; when we push our work to Launchpad, we know it's safe and we can always revert to a known good revision if we mess up later.",
    "Now that we've got all these swanky files laying around, we need a way to tell the computer what to do with them. Ready for the next chapter? Let's do this!": "Now that we've got all these swanky files laying around, we need a way to tell the computer what to do with them. Ready for the next chapter? Let's do this!",
    "The Build System": "构建系统",
    "The next thing we need is a build system. The build system that we're going to be using is called <a href=\"http://www.cmake.org\">CMake</a>. We already installed the <code>cmake</code> program at the beginning of this book when we got the build dependencies for Granite Demo. What we're going to do in this step is get a copy of some additional modules for Cmake (support for Vala, translations, etc), and create the files that tell Cmake how to install your program. This includes all the rules for building your source code as well as correctly installing your .desktop file and the binary app that results from the build process.": "The next thing we need is a build system. The build system that we're going to be using is called <a href=\"http://www.cmake.org\">CMake</a>. We already installed the <code>cmake</code> program at the beginning of this book when we got the build dependencies for Granite Demo. What we're going to do in this step is get a copy of some additional modules for Cmake (support for Vala, translations, etc), and create the files that tell Cmake how to install your program. This includes all the rules for building your source code as well as correctly installing your .desktop file and the binary app that results from the build process.",
    "The elementary apps team maintains a copy of the CMake modules that we're going to need. Make sure you're in &quot;~/Projects&quot; (not in your hello-again folder) and then grab the latest copy of those modules with bzr. Notice that we're not in &quot;~/Projects/hello-world&quot;. This is because our cmake modules are not a branch of our Hello World app:": "The elementary apps team maintains a copy of the CMake modules that we're going to need. Make sure you're in \"~/Projects\" (not in your hello-again folder) and then grab the latest copy of those modules with bzr. Notice that we're not in \"~/Projects/hello-world\". This is because our cmake modules are not a branch of our Hello World app:",
    "You'll see a folder called &quot;cmake&quot;. Copy that into your &quot;hello-again&quot; folder. It's that easy.": "You'll see a folder called \"cmake\". Copy that into your \"hello-again\" folder. It's that easy.",
    "Create a new file in your project's root folder called &quot;CMakeLists.txt&quot;. Since this file is a bit long, we've included some comments along the way to explain each section. You don't have to copy those, but type the rest into that file:": "Create a new file in your project's root folder called \"CMakeLists.txt\". Since this file is a bit long, we've included some comments along the way to explain each section. You don't have to copy those, but type the rest into that file:",
    "And you're done! Your app now has a real build system. Don't forget to add these files to bzr and push to launchpad. This is a major milestone in your app's development!": "And you're done! Your app now has a real build system. Don't forget to add these files to bzr and push to launchpad. This is a major milestone in your app's development!",
    "Building and Installing with CMake": "用 CMake 构建和安装",
    "Now that we have a build system, let's try it out:": "现在我们有一个构建系统了，让我们试试它吧：",
    "Create a new folder in your project's root folder called &quot;build&quot;": "在您的项目根目录中创建一个叫做 \"build\" 的文件夹",
    "Change into this directory in terminal and execute the following command:": "在终端中切换到此目录，并且执行下列命令：",
    "This command tells cmake to get ready to build our app using the prefix &quot;/usr&quot;. The <code>cmake</code> command defaults to installing our app locally, but we want to install our app for all users on the computer.": "This command tells cmake to get ready to build our app using the prefix \"/usr\". The <code>cmake</code> command defaults to installing our app locally, but we want to install our app for all users on the computer.",
    "Build your app with <code>make</code> and if successful install it with <code>sudo make install</code>:": "Build your app with <code>make</code> and if successful install it with <code>sudo make install</code>:",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the &quot;build&quot; folder to your bzr branch and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the &quot;build&quot; folder and it won't mess up our app's source code.": "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the \"build\" folder to your bzr branch and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the \"build\" folder and it won't mess up our app's source code.",
    "We'll revisit CMake again later to add some more complicated behavior, but for now this is all you need to know to give your app a proper build system. If you want to explore CMake a little more on your own, you can always check out <a href=\"http://www.cmake.org/cmake/help/documentation.html\">CMake's documentation</a>.": "We'll revisit CMake again later to add some more complicated behavior, but for now this is all you need to know to give your app a proper build system. If you want to explore CMake a little more on your own, you can always check out <a href=\"http://www.cmake.org/cmake/help/documentation.html\">CMake's documentation</a>.",
    "Review": "审核",
    "Let's review what all we've learned to do:": "Let's review what all we've learned to do:",
    "Create a new Gtk app using <code>Gtk.Window</code>, <code>Gtk.Button</code>, and <code>Gtk.Label</code>": "Create a new Gtk app using <code>Gtk.Window</code>, <code>Gtk.Button</code>, and <code>Gtk.Label</code>",
    "Keep our projects organized into branches": "Keep our projects organized into branches",
    "License our app under the GPL and declare our app's authors in a standardized manner": "License our app under the GPL and declare our app's authors in a standardized manner",
    "Create a .desktop file that tells the computer how to display our app in the Applications menu and the Dock": "Create a .desktop file that tells the computer how to display our app in the Applications menu and the Dock",
    "Set up a CMake build system that contains all the rules for building our app and installing it cleanly": "Set up a CMake build system that contains all the rules for building our app and installing it cleanly",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to branch your project from launchpad and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to branch your project from launchpad and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.",
    "Adding Translations": "Adding Translations",
    "Now that you've learned about CMake, the next step is to make your app able to be translated to different languages. The first thing you need to know is how to convert strings in your code into translatable strings. Here's an example:": "Now that you've learned about CMake, the next step is to make your app able to be translated to different languages. The first thing you need to know is how to convert strings in your code into translatable strings. Here's an example:",
    "See the difference? We just added <code>_()</code> around the string! Well, that was easy!": "See the difference? We just added <code>_()</code> around the string! Well, that was easy!",
    "Go back to your project and make all your strings translatable by adding <code>_()</code>": "Go back to your project and make all your strings translatable by adding <code>_()</code>",
    "Add the following lines in the &quot;CMakeLists.txt&quot; file you created a moment ago:": "Add the following lines in the \"CMakeLists.txt\" file you created a moment ago:",
    "Create a directory named &quot;po&quot; on the root folder of your project. Inside of your po directory you will need to create another CMakeLists.txt file. This time, it's contents will be:": "Create a directory named \"po\" on the root folder of your project. Inside of your po directory you will need to create another CMakeLists.txt file. This time, it's contents will be:",
    "On your build directory execute the following commands:": "On your build directory execute the following commands:",
    "Don't forget to add this new directory and it's contents to bzr": "Don't forget to add this new directory and it's contents to bzr",
    "That's it! CMake will automatically add all the string marked with <code>_()</code> into a .pot template file, and a file for each available language where you'll place the translatable strings.": "That's it! CMake will automatically add all the string marked with <code>_()</code> into a .pot template file, and a file for each available language where you'll place the translatable strings.",
    "Packaging": "打包",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, hosted in a Personal Package Archive (PPA) on Launchpad. This will allow normal people to install your app and even get updates for it in Update Manager.": "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, hosted in a Personal Package Archive (PPA) on Launchpad. This will allow normal people to install your app and even get updates for it in Update Manager.",
    "Practice Makes Perfect": "Practice Makes Perfect",
    "If you want to get really good really fast, you're going to want to practice. Repetition is the best way to commit something to memory. So let's recreate our entire Hello World app again <em>from scratch</em>:": "If you want to get really good really fast, you're going to want to practice. Repetition is the best way to commit something to memory. So let's recreate our entire Hello World app again <em>from scratch</em>:",
    "Create a new branch folder &quot;hello-packaging&quot;": "Create a new branch folder \"hello-packaging\"",
    "Set up our directory structure including the &quot;src&quot; and &quot;data&quot; folders.": "Set up our directory structure including the \"src\" and \"data\" folders.",
    "Add your Authors, Copying, .desktop, and source code.": "Add your Authors, Copying, .desktop, and source code.",
    "Now set up the CMake build system.": "Now set up the CMake build system.",
    "Test everything!": "Test everything!",
    "Did you commit and push to launchpad for each step? Keep up these good habits and let's get to packaging this app!": "Did you commit and push to launchpad for each step? Keep up these good habits and let's get to packaging this app!",
    "Debian Control": "Debian Control",
    "Now it's time to create the rules that will allow your app to be built as a .deb package. Let's dive right in:": "Now it's time to create the rules that will allow your app to be built as a .deb package. Let's dive right in:",
    "Like CMake, elementary maintaines a simple version of the &quot;debian&quot; folder that contains all the files we need for packaging. Let's grab a copy of that with bzr:": "Like CMake, elementary maintaines a simple version of the \"debian\" folder that contains all the files we need for packaging. Let's grab a copy of that with bzr:",
    "Copy the &quot;debian&quot; folder from that branch into your &quot;hello-packaging&quot; folder.": "Copy the \"debian\" folder from that branch into your \"hello-packaging\" folder.",
    "Open the file called &quot;changelog&quot; and make it look like below:": "Open the file called \"changelog\" and make it look like below:",
    "The first line contains your app's binary name, version, OS codename, and how urgently your package should be built. Remember that your app's binary name is lowercase and does not contain spaces. After the <code>*</code> is a list of your changes. Finally, you include your name, email address, and the date. For more information about the debian changelog, make sure to read the <a href=\"http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog\">documentation</a>.": "The first line contains your app's binary name, version, OS codename, and how urgently your package should be built. Remember that your app's binary name is lowercase and does not contain spaces. After the <code>*</code> is a list of your changes. Finally, you include your name, email address, and the date. For more information about the debian changelog, make sure to read the <a href=\"http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog\">documentation</a>.",
    "Open the file called &quot;control&quot; and make it look like below:": "Open the file called \"control\" and make it look like below:",
    "Open the file called &quot;copyright&quot;. We only need to edit what's up top:": "Open the file called \"copyright\". We only need to edit what's up top:",
    "That wasn't too bad right? We'll set up more complicated packaging in the future, but for now this is all you need. If you'd like you can always read <a href=\"http://www.debian.org/doc/debian-policy/\">more about Debian packaging</a>.": "That wasn't too bad right? We'll set up more complicated packaging in the future, but for now this is all you need. If you'd like you can always read <a href=\"http://www.debian.org/doc/debian-policy/\">more about Debian packaging</a>.",
    "Launchpad Recipes": "Launchpad Recipes",
    "Now that we have our &quot;debian&quot; folder in order, it's time to go to launchpad and create a recipe: instructions what code to build, how often to build it, and where to put the resulting packages.": "Now that we have our \"debian\" folder in order, it's time to go to launchpad and create a recipe: instructions what code to build, how often to build it, and where to put the resulting packages.",
    "<a href=\"https://code.launchpad.net/people/+me/+junk/hello-packaging/+new-recipe\">Click this link</a> or go to Launchpad, find your hello-packaging branch, then select <strong>Create packaging recipe</strong>.": "<a href=\"https://code.launchpad.net/people/+me/+junk/hello-packaging/+new-recipe\">Click this link</a> or go to Launchpad, find your hello-packaging branch, then select <strong>Create packaging recipe</strong>.",
    "Read through the options available to you. You can go ahead and keep the defaults for Name, Description (it's blank), Owner, Daily builds, and PPA but you can also customize a bit if you'd like.": "Read through the options available to you. You can go ahead and keep the defaults for Name, Description (it's blank), Owner, Daily builds, and PPA but you can also customize a bit if you'd like.",
    "When you get down to a set of checkboxes with the header &quot;Default distribution series&quot;, make sure you select &quot;Trusty&quot;. elementary OS Freya shares it's core with Ubuntu Trusty, so packages built on Trusty will also work on Freya.": "When you get down to a set of checkboxes with the header \"Default distribution series\", make sure you select \"Trusty\". elementary OS Freya shares it's core with Ubuntu Trusty, so packages built on Trusty will also work on Freya.",
    "For recipe text, we're going to change it ever so slightly to conform better with the official Debian rules. Change out the first line for this one:": "For recipe text, we're going to change it ever so slightly to conform better with the official Debian rules. Change out the first line for this one:",
    "Notice that this is ever so slightly different from the default line which includes <code>{debupstream}-0~{revno}</code> instead of <code>{debupstream}+r{revno}-0</code>.": "Notice that this is ever so slightly different from the default line which includes <code>{debupstream}-0~{revno}</code> instead of <code>{debupstream}+r{revno}-0</code>.",
    "When you're happy with the options you've chosen, select <strong>Create Recipe</strong>.": "When you're happy with the options you've chosen, select <strong>Create Recipe</strong>.",
    "Now that you've created a recipe, you only have to wait until Launchpad finishes the build! If everything goes as planned, your new PPA will contain a packaged app which other people can install and run with ease. Additionally, anyone using your PPA will be able to get updates for your app if you upload a new version. We'll talk more about how to do that later.": "Now that you've created a recipe, you only have to wait until Launchpad finishes the build! If everything goes as planned, your new PPA will contain a packaged app which other people can install and run with ease. Additionally, anyone using your PPA will be able to get updates for your app if you upload a new version. We'll talk more about how to do that later.",
    "Creating Layouts": "Creating Layouts",
    "Now that you know how to code, build, and distribute an app using Vala, Gtk, CMake, and Launchpad PPAs, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window</code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid</code>.": "Now that you know how to code, build, and distribute an app using Vala, Gtk, CMake, and Launchpad PPAs, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window</code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid</code>.",
    "Widgets as Subclasses of Other Widgets": "Widgets as Subclasses of Other Widgets",
    "Before we get into <code>Gtk.Grid</code>, let’s stop for a second and take some time to understand Gtk a little better. At the lower level, Gtk has classes that define some pretty abstract traits of widgets such as <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Container\"><code>Gtk.Container</code></a> and <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Orientable\"><code>Gtk.Orientable</code></a>. These aren’t widgets that we’re going to use directly in our code, but they’re used as building blocks to create the widgets that we do use. It’s important that we understand this, because it means that when we understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Grid</code>, we also understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Toolbar</code>. Both Grid and Toolbar are widgets that are subclasses of the more abstract class <code>Gtk.Container</code>.": "Before we get into <code>Gtk.Grid</code>, let’s stop for a second and take some time to understand Gtk a little better. At the lower level, Gtk has classes that define some pretty abstract traits of widgets such as <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Container\"><code>Gtk.Container</code></a> and <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Orientable\"><code>Gtk.Orientable</code></a>. These aren’t widgets that we’re going to use directly in our code, but they’re used as building blocks to create the widgets that we do use. It’s important that we understand this, because it means that when we understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Grid</code>, we also understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Toolbar</code>. Both Grid and Toolbar are widgets that are subclasses of the more abstract class <code>Gtk.Container</code>.",
    "If you want to understand more about these widgets and the parts of Gtk that they subclass, jump over to <a href=\"http://valadoc.elementary.io/\">Valadoc</a> and search for a widget like <code>Gtk.Grid</code>. See that big tree at the top of the page? It shows you every component of Gtk that <code>Gtk.Grid</code> subclasses and even what those components subclass. Having a lower level knowledge of Gtk will help you to implement widgets you haven’t worked with before since you will understand how their parent classes work.": "If you want to understand more about these widgets and the parts of Gtk that they subclass, jump over to <a href=\"http://valadoc.elementary.io/\">Valadoc</a> and search for a widget like <code>Gtk.Grid</code>. See that big tree at the top of the page? It shows you every component of Gtk that <code>Gtk.Grid</code> subclasses and even what those components subclass. Having a lower level knowledge of Gtk will help you to implement widgets you haven’t worked with before since you will understand how their parent classes work.",
    "Gtk.Grid": "Gtk.Grid",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid</code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to Launchpad, and build a PPA in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window</code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid</code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to Launchpad, and build a PPA in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window</code> without anything in it and make sure that builds. Ready? Let’s add a Grid.",
    "Just like when we add a Button or Label, we need to create our <code>Gtk.Grid</code>. As always, don’t copy and paste! Practice makes perfect. We create a new Gtk.Grid like this:": "Just like when we add a Button or Label, we need to create our <code>Gtk.Grid</code>. As always, don’t copy and paste! Practice makes perfect. We create a new Gtk.Grid like this:",
    "Remember that Button and Label accepted an argument (a String) in the creation method (that’s the stuff in parentheses and quotes). As shown above, <code>Gtk.Grid</code> doesn’t accept any arguments in the creation method. However, you can still change the grid’s properties (like <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Orientation\">orientation</a>) as we did on the second line. Here, we’ve declared that when we add widgets to our grid, they should stack vertically.": "Remember that Button and Label accepted an argument (a String) in the creation method (that’s the stuff in parentheses and quotes). As shown above, <code>Gtk.Grid</code> doesn’t accept any arguments in the creation method. However, you can still change the grid’s properties (like <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Orientation\">orientation</a>) as we did on the second line. Here, we’ve declared that when we add widgets to our grid, they should stack vertically.",
    "Let’s add some stuff to the Grid:": "Let’s add some stuff to the Grid:",
    "Super easy stuff, right? We can add the grid to our window using the same method that we just used to add widgets to our grid:": "Super easy stuff, right? We can add the grid to our window using the same method that we just used to add widgets to our grid:",
    "Now build your app and see what it looks like. Since we’ve given our grid a <code>Gtk.Orientation</code> of <code>VERTICAL</code> the labels stack up on top of each other. Try creating a <code>Gtk.Grid</code> without giving it an orientation. By default, <code>Gtk.Grid</code>’s orientation is horizontal. You really only ever have to give it an orientation if you need it to be vertical.": "Now build your app and see what it looks like. Since we’ve given our grid a <code>Gtk.Orientation</code> of <code>VERTICAL</code> the labels stack up on top of each other. Try creating a <code>Gtk.Grid</code> without giving it an orientation. By default, <code>Gtk.Grid</code>’s orientation is horizontal. You really only ever have to give it an orientation if you need it to be vertical.",
    "Functionality in Gtk.Grid": "Functionality in Gtk.Grid",
    "Okay, so you know all about using a <code>Gtk.Grid</code> to pack multiple children into a Window. What about using it to lay out some functionality in our app? Let’s try building an app that shows a message when we click a button. Remember in our first “Hello World” how we changed the label of the button with <code>button.clicked.connect</code>? Let’s use that method again, but instead of just changing the label of the button, we’re going to use it to change an empty label to a message.": "Okay, so you know all about using a <code>Gtk.Grid</code> to pack multiple children into a Window. What about using it to lay out some functionality in our app? Let’s try building an app that shows a message when we click a button. Remember in our first “Hello World” how we changed the label of the button with <code>button.clicked.connect</code>? Let’s use that method again, but instead of just changing the label of the button, we’re going to use it to change an empty label to a message.",
    "Let’s create a Window with a vertical Grid that contains a Button and a Label:": "Let’s create a Window with a vertical Grid that contains a Button and a Label:",
    "This time when we created our grid, we gave it another property: <code>row_spacing</code>. We can also add <code>column_spacing</code>, but since we’re stacking widgets vertically we’ll only see the effect of <code>row_spacing</code>. Notice how we can create new widgets outside the grid and then pack them into the grid by name. This is really helpful when you start using different methods to change the properties of your widgets.": "This time when we created our grid, we gave it another property: <code>row_spacing</code>. We can also add <code>column_spacing</code>, but since we’re stacking widgets vertically we’ll only see the effect of <code>row_spacing</code>. Notice how we can create new widgets outside the grid and then pack them into the grid by name. This is really helpful when you start using different methods to change the properties of your widgets.",
    "Now, let’s hook up the button to change that label. To keep our code logically separated, we’re going to add it below <code>this.add (grid);</code>. In this way, the first portion of our code defines the UI and the next portion defines the functions that we associated with the UI:": "Now, let’s hook up the button to change that label. To keep our code logically separated, we’re going to add it below <code>this.add (grid);</code>. In this way, the first portion of our code defines the UI and the next portion defines the functions that we associated with the UI:",
    "Remember, we set the button as insensitive here because clicking it again has no effect. Now compile your app and marvel at your newfound skills. Play around with orientation and spacing until you feel comfortable.": "Remember, we set the button as insensitive here because clicking it again has no effect. Now compile your app and marvel at your newfound skills. Play around with orientation and spacing until you feel comfortable.",
    "The Attach Method": "The Attach Method",
    "While we can use <code>Gtk.Grid</code> simply to create single row or single column layouts with the add method, we can also use it to create row-and-column-based layouts with the <code>attach</code> method. First we’re going to create a new <code>Gtk.Grid</code> and set both column and row spacing, then we’ll create all the widgets we want to attach to our grid, and finally we’ll attach them.": "While we can use <code>Gtk.Grid</code> simply to create single row or single column layouts with the add method, we can also use it to create row-and-column-based layouts with the <code>attach</code> method. First we’re going to create a new <code>Gtk.Grid</code> and set both column and row spacing, then we’ll create all the widgets we want to attach to our grid, and finally we’ll attach them.",
    "Make sure to give the Grid, Buttons, and Labels unique names that you’ll remember. It’s best practice to use descriptive names so that people who are unfamiliar with your code can understand what a widget is for without having to know your app inside and out.": "Make sure to give the Grid, Buttons, and Labels unique names that you’ll remember. It’s best practice to use descriptive names so that people who are unfamiliar with your code can understand what a widget is for without having to know your app inside and out.",
    "Notice that the attach method takes 5 arguments:": "Notice that the attach method takes 5 arguments:",
    "The widget that you want to attach to the grid.": "The widget that you want to attach to the grid.",
    "The column number to attach to starting at 0.": "The column number to attach to starting at 0.",
    "The row number to attach to starting at 0.": "The row number to attach to starting at 0.",
    "The number of columns the widget should span.": "The number of columns the widget should span.",
    "The number of rows the widget should span.": "The number of rows the widget should span.",
    "You can also use <code>attach_next_to</code> to place a widget next to another one on <a href=\"http://references.valadoc.org/#!api=gtk+-3.0/Gtk.PositionType\">all four sides</a>. Don’t forget to add the functionality associated with our buttons:": "You can also use <code>attach_next_to</code> to place a widget next to another one on <a href=\"http://references.valadoc.org/#!api=gtk+-3.0/Gtk.PositionType\">all four sides</a>. Don’t forget to add the functionality associated with our buttons:",
    "You’ll notice in the example code above that we’ve created a 2 x 2 grid with buttons on the left and labels on the right. The top label goes from blank to “Hello World!” and the button label is rotated 90 degrees. Notice how we gave the buttons labels that directly call out what they do to the other labels.": "You’ll notice in the example code above that we’ve created a 2 x 2 grid with buttons on the left and labels on the right. The top label goes from blank to “Hello World!” and the button label is rotated 90 degrees. Notice how we gave the buttons labels that directly call out what they do to the other labels.",
    "Let’s recap what we learned in this section:": "Let’s recap what we learned in this section:",
    "We learned about the building blocks of Gtk and the importance of subclasses": "We learned about the building blocks of Gtk and the importance of subclasses",
    "We packed multiple children into a Window using <code>Gtk.Grid</code>": "We packed multiple children into a Window using <code>Gtk.Grid</code>",
    "We set the properties of <code>Gtk.Grid</code> including its orientation and spacing": "We set the properties of <code>Gtk.Grid</code> including its orientation and spacing",
    "We added multiple widgets into a single Gtk.Grid using the attach method to create complex layouts containing Buttons and Labels that did cool stuff.": "We added multiple widgets into a single Gtk.Grid using the attach method to create complex layouts containing Buttons and Labels that did cool stuff.",
    "Now that you understand more about Gtk, Grids, and using Buttons to alter the properties of other widgets, try packing other kinds of widgets into a window like a Toolbar and changing other properties of <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Label\">Labels</a> like <code>width_chars</code> and <code>ellipsize</code>. Don’t forget to play around with the attach method and widgets that span across multiple rows and columns. Remember that Valadoc is super helpful for learning more about the methods and properties associated with widgets.": "Now that you understand more about Gtk, Grids, and using Buttons to alter the properties of other widgets, try packing other kinds of widgets into a window like a Toolbar and changing other properties of <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Label\">Labels</a> like <code>width_chars</code> and <code>ellipsize</code>. Don’t forget to play around with the attach method and widgets that span across multiple rows and columns. Remember that Valadoc is super helpful for learning more about the methods and properties associated with widgets.",
    "Notifications": "Notifications",
    "By now you've probably already seen the white notification bubbles that appear on the top right of the screen. Notifications are a simple way to notify a user about the state of your app. For example, they can inform the user that a long process has been completed or a new message has arrived. In this section we are going to show you just how to get them to work in your app. Let's begin by making a new project!": "By now you've probably already seen the white notification bubbles that appear on the top right of the screen. Notifications are a simple way to notify a user about the state of your app. For example, they can inform the user that a long process has been completed or a new message has arrived. In this section we are going to show you just how to get them to work in your app. Let's begin by making a new project!",
    "Making Preparations": "Making Preparations",
    "Create a new folder inside of  &quot;~/Projects&quot; called &quot;notifications-app&quot;": "Create a new folder inside of  \"~/Projects\" called \"notifications-app\"",
    "Create a file inside called <code>notify-app.vala</code>": "Create a file inside called <code>notify-app.vala</code>",
    "Re-create the <code>CMake</code> folder and <code>CMakeFiles.txt</code> file. If you don't remember how to set up CMake, go back to the <a href=\"#building-and-installing-with-cmake\">previous section</a> and review.": "Re-create the <code>CMake</code> folder and <code>CMakeFiles.txt</code> file. If you don't remember how to set up CMake, go back to the <a href=\"#building-and-installing-with-cmake\">previous section</a> and review.",
    "Remember how to <a href=\"#the-desktop-file\">make a .desktop file</a>? Excellent! Make one for this project, but this time, name it <code>notify.app.desktop</code> as <code>notify.app</code> will be your app's ID. Since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true</code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.": "Remember how to <a href=\"#the-desktop-file\">make a .desktop file</a>? Excellent! Make one for this project, but this time, name it <code>notify.app.desktop</code> as <code>notify.app</code> will be your app's ID. Since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true</code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.",
    "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed.": "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed.",
    "Gtk.Application": "Gtk.Application",
    "In order to display notifications, you're going to need your app to subclass <code>Gtk.Application</code>. <code>Gtk.Application</code> is a class that handles many important aspects of a Gtk app like app uniqueness and the application ID you need to identify your app to the notifications server. If you want some more details about <code>Gtk.Application</code>, <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Application\">check out Valadoc</a>.": "In order to display notifications, you're going to need your app to subclass <code>Gtk.Application</code>. <code>Gtk.Application</code> is a class that handles many important aspects of a Gtk app like app uniqueness and the application ID you need to identify your app to the notifications server. If you want some more details about <code>Gtk.Application</code>, <a href=\"http://valadoc.elementary.io/#!api=gtk+-3.0/Gtk.Application\">check out Valadoc</a>.",
    "Now that you know what a <code>Gtk.Application</code> is, let's create one:": "Now that you know what a <code>Gtk.Application</code> is, let's create one:",
    "Initiating your app with Gtk.Application is a little different from what we did a few sections back. This time, in <code>main</code> you are starting your app with <code>app.run</code> and you have a new function called <code>activate</code> inside of your class; This <code>activate</code> function will be the one that executes when you invoke <code>app.run</code>. We are also creating a <code>Gtk.ApplicationWindow</code>, this is where you will place all the widgets your app needs. Now that we have a simple window, let's use what we learned in <a href=\"#gtk-grid\">creating layouts</a> and make a grid containing one button that will show a notification.": "Initiating your app with Gtk.Application is a little different from what we did a few sections back. This time, in <code>main</code> you are starting your app with <code>app.run</code> and you have a new function called <code>activate</code> inside of your class; This <code>activate</code> function will be the one that executes when you invoke <code>app.run</code>. We are also creating a <code>Gtk.ApplicationWindow</code>, this is where you will place all the widgets your app needs. Now that we have a simple window, let's use what we learned in <a href=\"#gtk-grid\">creating layouts</a> and make a grid containing one button that will show a notification.",
    "In between <code>var app_window...</code> and <code>app_window.show ();</code>, write the folowing lines of code:": "In between <code>var app_window...</code> and <code>app_window.show ();</code>, write the folowing lines of code:",
    "Since we're adding translatable strings, don't forget to update your translation template by running <code>make pot</code>.": "Since we're adding translatable strings, don't forget to update your translation template by running <code>make pot</code>.",
    "Sending Notifications": "Sending Notifications",
    "Now that we have a Gtk.Application we can send notifications. Let's connect a function to the button we created and use it to send a notification:": "Now that we have a Gtk.Application we can send notifications. Let's connect a function to the button we created and use it to send a notification:",
    "Okay, now compile your new app. if everythink works, you should see your new app. Click the &quot;Send&quot; button. Did you see the notification? Great! Don't forget to commit and push your project in order to save your branch for later.": "Okay, now compile your new app. if everythink works, you should see your new app. Click the \"Send\" button. Did you see the notification? Great! Don't forget to commit and push your project in order to save your branch for later.",
    "Additional Features": "Additional Features",
    "Now that you know how to send basic notifications, lets talk about a couple ways to make your notifications better. Notifications are most useful when users can indentify where they came from and they contain relevant information. In order to make sure your notifications are useful, there are three important features you should know about: setting an icon, replacing a notification, and setting priority.": "Now that you know how to send basic notifications, lets talk about a couple ways to make your notifications better. Notifications are most useful when users can indentify where they came from and they contain relevant information. In order to make sure your notifications are useful, there are three important features you should know about: setting an icon, replacing a notification, and setting priority.",
    "Icons": "Icons",
    "In order to make sure users can easily recognize a notification, we should set a relevant icon. Right after the <code>var notification = New Notification</code> line, add:": "In order to make sure users can easily recognize a notification, we should set a relevant icon. Right after the <code>var notification = New Notification</code> line, add:",
    "That's it. Compile your app again, and press the &quot;Send&quot; button. As you can see, the notification now has an icon. Using this method, you can set the icon to anything you'd like. You can use <code>gtk3-icon-browser</code> to see what system icons are available.": "That's it. Compile your app again, and press the \"Send\" button. As you can see, the notification now has an icon. Using this method, you can set the icon to anything you'd like. You can use <code>gtk3-icon-browser</code> to see what system icons are available.",
    "Replace": "Replace",
    "We now know how to send a notification, but what if you need to update it with new information? Thanks to the notification ID, we can easily replace a notification. The notification ID should be the same as the app ID that we set in <code>Gtk.Application</code>.": "We now know how to send a notification, but what if you need to update it with new information? Thanks to the notification ID, we can easily replace a notification. The notification ID should be the same as the app ID that we set in <code>Gtk.Application</code>.",
    "Let's make the replace button. This button will replace the current notification with one with different information. Let's create a new button for it, and add it to the grid:": "Let's make the replace button. This button will replace the current notification with one with different information. Let's create a new button for it, and add it to the grid:",
    "{\n        this.withdraw_notification (\"notify-test\");\n    });\n-->": "{\n        this.withdraw_notification (\"notify-test\");\n    });\n-->",
    "Very easy right? Let's compile and run your app again. Click on the buttons, first on &quot;Show&quot;, then &quot;Replace&quot;. See how the text on your notification changes without making a new one appear?": "Very easy right? Let's compile and run your app again. Click on the buttons, first on \"Show\", then \"Replace\". See how the text on your notification changes without making a new one appear?",
    "Priority": "Priority",
    "Notifications also have priority. When a notification is set as <code>URGENT</code> it will stay on the screen until either the user interacts with it, or you withdraw it. To make an urgent notification, add the following line before the <code>this.send_notification ()</code> function": "Notifications also have priority. When a notification is set as <code>URGENT</code> it will stay on the screen until either the user interacts with it, or you withdraw it. To make an urgent notification, add the following line before the <code>this.send_notification ()</code> function",
    "<code>URGENT</code> notifications should really only be used on the most extreme cases. There are also <a href=\"http://valadoc.elementary.io/#!api=gio-2.0/GLib.NotificationPriority\">other notification priorities</a>.": "<code>URGENT</code> notifications should really only be used on the most extreme cases. There are also <a href=\"http://valadoc.elementary.io/#!api=gio-2.0/GLib.NotificationPriority\">other notification priorities</a>.",
    "Let's review what all we've learned:": "Let's review what all we've learned:",
    "We learned what <code>Gtk.Application</code> is and how to make a subclass of it.": "We learned what <code>Gtk.Application</code> is and how to make a subclass of it.",
    "We built an app that sends and updates notifications.": "We built an app that sends and updates notifications.",
    "We also learned about other notification features like setting an icon and a notification's priority.": "We also learned about other notification features like setting an icon and a notification's priority.",
    "As you could see, sending notifications is very easy thanks to <code>Gtk.Application</code>. If you need some further reading on notifications, Check out the page about <code>Glib.Notification</code> in <a href=\"http://valadoc.elementary.io/#!api=gio-2.0/GLib.Notification\">Valadoc</a>.": "如你所见，使用<code>Gtk.Application</code>发送通知是非常容易的。想了解更多关于通知的信息，请查看<a href=\"http://valadoc.elementary.io/#!api=gio-2.0/GLib.Notification\">Valadoc</a>页面的<code>Glib.Notification</code>。",
    "Next Page:": "下一页:",
    "Reference": "参考资料"
}