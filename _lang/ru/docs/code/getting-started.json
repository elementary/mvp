{
    "Getting Started": "Введение",
    "Welcome to the elementary Developer Guide! This book was created to teach you all about creating and distributing apps for elementary OS. The introduction will make sure that you have all the tools for the job and a solid understanding of what this book is about. Some of you may feel confident enough to jump straight into coding. If that's the case, you might want to skip ahead and start writing your first app.": "Добро пожаловать в руководство для разработчиков elementary OS!\n\nЭта книга была создана, чтобы научить вас создавать и распространять приложения для elementary OS. Для начала мы расскажет вам о необходимых инструментах и конкретно о чем эта книга. Те, кто чувствуете себя достаточно уверенно чтобы сразу приступить к программированию, могут пропустить вступление и перейти к созданию своего первого приложения.",
    "However, we strongly recommend to at least skim through this preparation step. Having the right setup is going to help you reach your goals faster, and having a solid foundation is going to help you throughout the rest of this book.": "Все же, мы советуем вам хотя бы бегло просмотреть указанные подготовительные действия. Правильная организация поможет вам достичь своих целей быстрее, а также создаст твердый фундамент, который поможет вам в понимании остального материала.",
    "What We Will And Won't Cover": "О чем расскажем и о чем нет",
    "We're going to assume that you have absolutely no experience in writing apps for elementary. But we will assume some basic programming knowledge, and hopefully a little experience in Vala or at least similarly syntaxed languages. If you're not familiar with Vala, we highly encourage you to brush up on it before coming here.": "Мы исходим из того что вы не имеете никакого опыта в разработке приложения для elementary. Но мы ожидаем знания основ программирования или хотя бы небольшого опыта в работе с Vala или схожих по синтаксису языках программирования. Если вы не знакомы с Vala, настойчиво советуем сделать это перед тем как читать дальше.",
    "We’re also not covering design too much in this guide; that’s what the <a href=\"\/docs\/human-interface-guidelines\">Human Interface Guidelines<\/a> (HIG) are for, and you’re highly encouraged to take a look there before beginning your app. We're going to assume you have a basic knowledge of (or at least a quick link to) the HIG and focus on coding. However, elementary is all about great design and stellar consistency. It’s important you grasp these concepts before moving on.": "Мы не будем много рассказывать про дизайн в этом руководстве. Для этого больше подходит <a href=\"\/docs\/human-interface-guidelines\">рекомендации для разработчиков пользовательского интерфейса<\/a>. Тем не менее, мы советуем чтобы вы освоили их прежде чем начнете работу над своим приложением. Мы предположим что вы сделали это и сосредоточимся на программировании. elementary прежде всего заботится об отличном дизайне и приоритете в логичности. Понимание этой концепции очень важно.",
    "In this book, we're going to talk about building apps using GTK+, Granite, and other tech available in elementary, setting up a build system, hosting your code for collaborative development, working with translations, a few other bits and pieces, and finally packaging and distributing your new app.": "В этой книге мы будем говорить:\nо разработке приложений с использованием GTK+, Granite и других технологий, доступных в elementary\nо настройке системы сборки, публикации вашего кода для совместной разработки, работе с переводами\nо других полезных вещах\nо создании пакетов и распространении вашего нового приложения",
    "The Basic Setup": "Настройка основных инструментов",
    "Before we even think about writing code, you'll need a certain basic setup. This chapter will walk you through the process of getting set up. We will cover the following topics:": "Прежде чем приступить к написанию кода, вам потребуются определенные базовые инструменты, и эта глава поможет вам их в их настройке.\nРассмотрим их:",
    "Creating an account in launchpad.net and importing an SSH key in Launchpad": "Создание аккаунта на launchpad.net и импорт SSH ключа в Launchpad",
    "Setting up the Bazaar revision control system": "Настройка системы управления версиями Bazaar",
    "Getting and using the elementary developer \"SDK\"": "",
    "We’re going to assume that you’re working from a clean installation of elementary OS Freya or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "Мы рассчитываем на то, что вы используете свежеустановленную elementary OS как минимум Freya. Это важно потому, что мы будем ссылаться на приложения которые не присутствуют или вовсе недоступны для других дистрибутивов Linux, например, Ubuntu. Принципы изложенные в этом руководстве возможно использовать для разработки на Ubuntu, но могут появиться затруднения.",
    "Launchpad": "",
    "Launchpad is a free online service provided by Canonical, the same people who brought you Ubuntu. It is used as a platform for hosting code, tracking milestones, tracking bugs, proposing designs, making translations, and more. Launchpad is a powerful resource, especially if you are a developer working with others. We're going to be using it for its various features throughout this book, so it's a good idea for you to sign up for an account. If you already have an account, feel free to move on to the next section.": "Launchpad — это бесплатный онлайн-сервис, предоставляемый компанией Canonical, которая также создала Ubuntu. Он используется в качестве платформы для хостинга кода, отслеживания ключевых моментов, багов, предложений дизайна, реализации переводов и многого другого. Launchpad - мощный ресурс для командной работы. Мы будем использовать его на протяжении всей книги, так что заведите себе аккаунт на данном сайте. Если он у вас уже есть, то переходите к следующему разделу.",
    "To set up a Launchpad account:": "Чтобы создать аккаунт Launchpad:",
    "Go to <a href=\"https:\/\/launchpad.net\">Launchpad.net<\/a>. Click on <strong>Log in\/Register<\/strong> in the top right corner of the page.": "Перейдите на <a href=\"https:\/\/launchpad.net\">Launchpad.net<\/a>. Кликните на <strong>Log in\/Register<\/strong> в правом верхнем углу страницы.",
    "Select <strong>I am a new Ubuntu One user<\/strong> on the left side.": "Выберете <strong>I am a new Ubuntu One user<\/strong> слева.",
    "Enter your information and click <strong>Create account<\/strong>.": "Введите информацию о себе и нажмите <strong>Create account<\/strong>.",
    "After you have verified your email your Launchpad account is ready, so let's move on to the next section. Remember, we're not going to go over all the little details in this book. We'll come back to Launchpad a few times later on to use specific features, but if you really want to learn everything there is to know about the website you should read their user guide. Onward!": "После подтверждения адреса электронной почты, ваша учетная запись на Launchpad готова, перейдем к следующему разделу. Помните, что в данной книге мы не будем отвлекаться на разные мелочи. На Launchpad мы вернемся немного позже для использования конкретных функций. Но если вы действительно хотите узнать о сайте все, вы должны найти и прочитать там руководство пользователя. Так что вперед!",
    "Bazaar": "",
    "elementary projects are hosted on Launchpad. To interact with the code on Launchpad, we use a distributed <a href=\"http:\/\/en.wikipedia.org\/wiki\/Revision_control\">revision control system<\/a> called Bazaar. This allows multiple developers to collaboratively develop and maintain the code while keeping track of each revision along the way.": "Проекты elementary размещены на Launchpad. Для работы с кодом на Launchpad мы используем <a href=\"https:\/\/ru.wikipedia.org\/wiki\/Bazaar\">распределенную систему управления версиями Bazaar<\/a>. Она позволяет множеству разработчиков совместно разрабатывать и поддерживать код, сохраняя при этом историю каждого изменения.",
    "If you're ready, let's get you set up to use Bazaar:": "Если вы готовы, то приступим к настройке Bazaar:",
    "Open the Terminal. You'll be interacting with Bazaar through a simple terminal-based program called bzr.": "Откройте терминал. Будем работать с Bazaar через консольную программу bzr.",
    "You'll need to install bzr. Simply type the following into the Terminal:": "Вам нужно будет установить bzr. Просто введите в терминале:",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http:\/\/en.wikipedia.org\/wiki\/Secure_Shell\">SSH<\/a> key pair (a kind of fingerprint for your computer) and import the public key in Launchpad. Type the following in terminal (note that <code>C<\/code> stands for comment and that you can alter its value as you wish, but it's a requirement for Launchpad):": "Для аутентификации и безопасной передачи кода, вам понадобится сгенерировать пару ключей <a href=\"https:\/\/ru.wikipedia.org\/wiki\/SSH\">SSH<\/a> (наподобие отпечатков пальца, но только для компьютера) и импортировать публичный ключ в Launchpad. В терминале введите следующее (обратите внимание, что <code>C<\/code> используется для комментариев и его значение может быть изменено по вашему желанию, это требование для Launchpad):",
    "When prompted, press Enter to accept the default file name for your key.": "При появлении запроса, нажмите Enter, чтобы принять используемое по умолчанию название для вашего ключа.",
    "Next, enter a password to protect your SSH key. You’ll be asked to enter it again, just to make sure you didn’t make any typos. You'll need to enter this password any time you try to push code to launchpad so don't forget it! Optionally, you can just press enter and use no password, but this is obviously less secure.": "Далее, введите пароль для защиты вашего SSH ключа. У вас запросят ввести его ещё раз, для того чтобы удостовериться, что вы не ошиблись. Вам надо будет вводить этот пароль всякий раз, когда вы попытаетесь опубликовать код на Launchpad, поэтому не забудьте его. Как вариант вы можете просто нажать Enter и не использовать пароль, однако это очевидно менее безопасно.",
    "Now, we're going to tell Launchpad about your SSH key. Open your SSH key with the following command, then copy the text from the file that opens in Scratch:": "Теперь мы собираемся рассказать о вашем SSH ключе сервису Launchpad. С помощью следующей команды откройте файл с вашим SSH ключом в текстовом редакторе Scratch,  а затем скопируйте его содержимое. ",
    "Visit <a href=\"https:\/\/launchpad.net\/people\/+me\/+editsshkeys\">your SSH keys page<\/a>. Paste the text in the textbox and click <strong>Import public key<\/strong>.": "Перейдите на <a href=\"https:\/\/launchpad.net\/people\/+me\/+editsshkeys\">страницу с вашими SSH ключами<\/a> и вставьте скопированный текст в текстовое поле и нажмите <strong>Import public key<\/strong>.",
    "Now you can connect bzr to your Launchpad account. You'll need your launchpad id, which you can look up at <a href=\"https:\/\/launchpad.net\/people\/+me\">your launchpad page<\/a>.": "Теперь вы можете подключить bzr к своему Launchpad аккаунту.  Для этого вам потребуется Launchpad ID, который вы можете найти на <a href=\"https:\/\/launchpad.net\/people\/+me\">своей странице<\/a>.",
    "Done! Now you can download source code hosted on Launchpad and upload your own code. We'll revisit using bzr in a minute, but for now you're logged in. For a more in-depth introduction to bzr, you can also check the complete <a href=\"http:\/\/doc.bazaar.canonical.com\/latest\/en\/user-guide\">Bazaar User Guide<\/a> provided by Canonical.": "Вот и все! Теперь вы можете скачивать исходный код, размещенный на Launchpad, и загружать свой. Для более детального изучения Bazaar вы можете использовать <a href=\"http:\/\/doc.bazaar.canonical.com\/latest\/ru\/user-guide\">Руководство пользователя по Bazaar<\/a>, предоставляемое Canonical.",
    "Developer \"SDK\"": "",
    "At the time of this writing, elementary doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "На момент написания этой статьи elementary не имел полного SDK, как Android или iOS. Но к счастью, для того чтобы нам начать писать код, нужно совсем немного простых приложений.",
    "Scratch": "",
    "The first piece of our simple \"SDK\" is the code editor Scratch. This comes by default with elementary OS. It comes with some helpful features like syntax highlighting, auto-save, and the Folder Manager extension. There are other extensions for Scratch as well, like the Outline, Terminal or Devhelp extensions. Play around with what works best for you.": "",
    "Terminal": "Терминал",
    "We’re going to use Terminal in order to compile our code, push revisions to Bazaar (bzr), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "Терминал будет использован для компиляции кода, использования Bazaar (bzr) для отправки версий и других целей. Мы будем использовать его на протяжении всего руководства. Вы должны быть готовы, что все команды исполняются из директории “Projects” в вашей домашней папке, если иное специально не указано. По умолчанию ее нет, вы должны ее создать.",
    "Open Terminal and issue the following command:": "Откройте терминал и выполните следующую команду:",
    "Development Libraries": "Библиотеки для разработки",
    "In order to build apps you're going to need their development libraries. We can fetch a basic set of libraries and other development tools with the following terminal command:": "Для создания приложений понадобятся библиотеки для разработки. Установите базовый набор библиотек и инструментов для разработки используя команду:",
    "And with that, we're ready to dive into development! Let's move on!": "И вот теперь мы полностью готовы погрузиться в разработку! Поехали!",
    "Hello World": "",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a bzr branch. Let’s begin.": "Первым приложением станет привычный «Hello World». Мы пройдем через несколько этапов: создание папок для хранения исходного кода, компиляция нашего первого приложения и отправление кода в ветку bzr. Начнем.",
    "Setting Up": "Настройка",
    "Apps on elementary OS are organized into standardized directories contained in your project's \"root\" folder. Let's create a couple of these to get started:": "",
    "Create your root folder called \"gtk-hello\"": "",
    "Create a folder inside that one called \"src\". This folder will contain all of our source code.": "",
    "Later on, We'll talk about adding other directories like \"po\" and \"data\". For now, this is all we need.": "",
    "Gtk.Window and Gtk.Button": "Gtk.Window и Gtk.Button",
    "Now what you've been waiting for! We're going to create a window that contains a button. When pressed, the button will display the text \"Hello World!\" To do this, we're going to use a widget toolkit called GTK+ and the programming language Vala. Before we begin, we highly recommend that you do not copy and paste. Typing each section manually will help you to practice and remember. Let's get started:": "",
    "Create a new file in Scratch and save it as \"gtk-hello.vala\" inside your \"src\" folder": "",
    "First we must create the main function of our new GTK app. Type the following in your \"gtk-hello.vala\".": "",
    "Now, that we've initialized Gtk, we'll create a new window and declare a few properties of this window. You'll notice that most of these property names are pretty straightforward. Try to guess what each one does and we'll explain in a second. Type the following after the <code>Gtk.init<\/code> line, but before the last bracket:": "Теперь, когда мы инициализировали Gtk, мы создадим новое окно и объявим некоторые его свойства. Вы заметите, что большинство имен этих свойств довольно просты. Попробуйте догадаться, что делает каждое из них, а мы через секунду объясним. Введите следующее после строки <code>Gtk.init<\/code>, но перед последней скобкой:",
    "The first line creates a new <code>Gtk.Window<\/code> called \"window\". The second line sets the window title that you see at the top of the window. Next, we create a margin inside that window so that widgets don't bump up against the window's edge. Then we tell the window manager that we want to place this window in the center of the screen instead of in the default position (which is usually the top left). We also must give our window a default size so that is does not appear too small for the user to interact with it. Finally, we explain what to do with this process if the main window is closed; In our case, we want to quit.": "",
    "Now that we've defined a nice window, let's put a button inside of it. After our window stuff (but before <code>Gtk.main<\/code> line), leave a new line and then type the following:": "Теперь, когда мы определились каким будет хорошее окно, давайте поместим в него кнопку. После кода нашего окна (но перед строкой <code>Gtk.main<\/code>), оставьте пустую строку и наберите следующее:",
    "Any ideas about what happened here? We've created a new <code>Gtk.Button<\/code> with the label \"Click me!\". Then we've said that if this button is clicked, we want to change the label to say \"Hello World!\" instead. We've also said that we want to make the button insensitive; We do this because clicking the button again has no visible effect. Finally, we add the button to our <code>Gtk.Window<\/code> and declare that we want to show all of the window's contents.": "",
    "Compiling and Running your code": "Компилирование и запуск вашего кода",
    "Ready to test it out? Fire up your terminal and make sure you're in \"~\/Projects\/gtk-hello\/src\". Then execute the following commands to compile and run your first Gtk app:": "",
    "Did it work? If so, congratulations! If not, read over your source code again and look for errors. Also check the output of your terminal. Usually there is helpful output that will help you track down your mistake.": "Сработало? Если да, наши поздравления! Если нет, прочтите исходный код и отыщите в нем ошибки. Так же проверьте вывод терминала. Обычно в нем есть полезная информация, которая поможет отследить вашу ошибку.",
    "Pushing to Launchpad": "Загрузка в Launchpad",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code. So let's take a minute to revisit our friend <code>bzr<\/code>:": "После внесения существенных изменений, вы должны загрузить свой код. Это особенно важно в совместной разработке, когда недостаточно оперативное обновление кода может привести к непредусмотренным форкам, а загрузка слишком большого количества кода за раз может затруднить отслеживание багов. Так что уделите минутку для <code>bzr<\/code>:",
    "Open Terminal and make sure you're in your project's root directory \"~Projects\/gtk-hello\"": "",
    "With these commands, we've told <code>bzr<\/code> to track this folder as a branch, that we'd like to track revisions on the file \"gtk-hello.vala\", we've committed our first revision and explained what we did in the revision, and then we've told <code>bzr<\/code> to push your code to Launchpad in your <a href=\"https:\/\/code.launchpad.net\/people\/+me\/\">junk folder<\/a>.": "",
    "Victory!": "Победа!",
    "Let's recap what we've learned to do in this first section:": "Давайте резюмируем что мы успели изучить в первой части:",
    "We created a new project containing a \"src\" folder": "",
    "We created our main vala file and inside it we created a new <code>Gtk.Window<\/code> and <code>Gtk.Button<\/code>": "Мы создали наш главный файл и внутри него создали новые <code>Gtk.Window<\/code> и <code>Gtk.Button<\/code>",
    "We built and ran our app to make sure that everything worked properly": "Мы собрали и запустили наше приложение чтобы убедиться, что все работает как надо",
    "Finally, we commited our first revision and pushed code to Launchpad": "Наконец, мы сделали первую ревизию(версию) и загрузили код на Launchpad",
    "Feel free to play around with this example. Make the window a different size, set different margins, make the button say other things. When you're comfortable with what you've learned, go on to the next section.": "Разберитесь с этим примером. Измените размер окна, установите разные отстуаы, заставьте кнопку поменять надпись на другую. Когда Вы почувствуйте, что готовы, двигайтесь дальше.",
    "A Note About Libraries": "О библиотеках",
    "Remember how when we compiled our code, we used the <code>valac<\/code> command and the argument <code>--pkg gtk+-3.0<\/code>? What we did there was make use of a \"library\". If you're not familiar with the idea of libraries, a library is a collection of methods that your program can use. So this argument tells <code>valac<\/code> to include the GTK+ library (version 3.0) when compiling our app.": "",
    "In our code, we've used the <code>Gtk<\/code> \"Namespace\" to declare that we want to use methods from GTK+ (specifically, <code>Gtk.Window<\/code> and <code>Gtk.Button.with_label<\/code>). Notice that there is a hierarchy at play. If you want to explore that hierarchy in more detail, you can <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Button\">check out Valadoc<\/a>.": "",
    "Our First App": "Наше первое приложение",
    "In the previous chapter, we created a simple \"Hello World!\" app to show off our vala and Gtk skills. But what if we wanted to share our new app with a friend? They'd have to know which packages to include with the <code>valac<\/code> command we used to build our app, and after they'd built it they'd have to run it from the build directory like we did. Clearly, we need to do some more stuff to make our app fit for people to use, to make it a <em>real<\/em> app.": "",
    "Hello (again) World!": "",
    "To create our first real app, we're going to need all the old stuff that we used in the last example. But don't just copy and paste! Let's take this time to practice our skills and see if we can recreate the last example from memory. Additionally, now that you have the basics, we're going to get a little more complex and a little more organized:": "Чтобы создать первую настоящую программу, нам понадобится все то, что мы использовали в последнем примере. Только, пожалуйста, не занимайтесь простым копированием! Давайте уделим некоторое время тренировке навыков и убедимся, что вы можете повторить то, что вы сделали в последнем задании по памяти. Кроме того, сейчас, когда вы усвоили основы, мы попробуем усложнить задачу и быть немного более последовательны: ",
    "Create a new folder in \"~\/Projects\" called \"hello-world\" and put our last project in that folder. Now create a new folder inside \"~\/Projects\/hello-world\" called \"hello-again\". We're doing this because our first \"gtk-hello\" and \"hello-again\" are two branches of the same \"hello-world\" project. As you get more into collaborative development, you're going to have lots of branches. This method will help you stay organized.": "",
    "Now go into \"hello-again\" and create our directory structure including the \"src\" folder.": "",
    "Create \"hello-again.vala\" in the \"src\" folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now, just copy and paste this, changing out <code>YourName<\/code> for your actual name:": "",
    "Now, let's create our main function, a <code>Gtk.Window<\/code>, and set the window's default properties. Refer back to the last chapter if you need a refresher.": "Теперь давайте создадим нашу главную функцию <code>Gtk.Window<\/code> и настроим стандартные параметры окна. Вернитесь к предыдущей главе, если вам нужно освежить в памяти как это делается.",
    "For the sake of time let's just put a <code>Gtk.Label<\/code> instead of a <code>Gtk.Button<\/code>. We don't need to try to make the label do anything when you click it.": "Чтобы сэкономить время давайте используем <code>Gtk.Label<\/code> вместо <code>Gtk.Button<\/code>, чтобы не настраивать действие по щелчку.",
    "Don't forget to add it to your window and show the window's contents:": "Добавьте и позаботьтесь о вызове окна:",
    "Build \"hello-again.vala\" just to make sure it all works. If something goes wrong here, feel free to refer back to the last chapter and remember to check your terminal output for any hints.": "",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, push your first revision with <code>bzr<\/code>:": "Инициализируйте ветку, добавьте свои файлы в проект и напишите commit-сообщение, используя полученные в предыдущей главе знания. И, наконец, загрузите свою первую ревизию используя <code>bzr<\/code>:",
    "Everything working as expected? Good. Now, let's get our app ready for other people to use.": "Все работает как надо? Отлично. Теперь приспособим приложение для использованию другими людьми.",
    "The .desktop File": "Файл .desktop",
    "Every app comes with a .desktop file. This file contains all the information needed to display your app in the Applications menu and in the Dock. Let's go ahead and make one:": "Каждое приложение сопровождается файлом .desktop. Этот файл содержит всю информацию, необходимую для отображения вашего приложения в главном меню и в док — панели инструментов. Давайте двигаться дальше и создадим один:",
    "In your project's root, create a new folder called \"data\".": "",
    "Create a new file in scratch and save it in the \"data\" folder as \"hello.desktop\".": "",
    "Type the following into \"hello.desktop\". Like before, try to guess what each line does.": "",
    "The first line declares that this file is a \"Desktop Entry\" file. The next three lines are descriptions of our app: The branded name of our app, a generic name for our app, and a comment that describes our app's function. Next, we categorize our app. Then, we say what command will execute it. Finally, we give our app an icon (a generic one included in elementary OS) and let the OS know that this isn't a command line app. For more info about crafting .desktop files, check out <a href=\"\/docs\/human-interface-guidelines\/app-launchers\">this HIG entry<\/a>.": "",
    "Finally, let's add this file to bzr and commit a revision:": "Давайте добавим файл в bzr и зафиксируем версию:",
    "Legal Stuff": "Юридический материал",
    "Since we're going to be putting our app out into the wild, we should include some information about who wrote it and the legal usage of its source code. For this we need two new files in our project's root folder: AUTHORS and COPYING.": "Так как мы будем размещать наше приложение в сети, мы должны включить немного информации о том, кто написал это приложение, указать юридические права на использование данного исходного кода. Для этого нам нужны два новых файла в корневой папке нашего проекта: AUTHORS и COPYING.",
    "Authors": "Авторы",
    "The AUTHORS file is pretty straightforward. This file contains your name and email address along with the name and email address of anyone who helped you make your app. It typically looks like this:": "Файл AUTHORS довольно простой. Файл содержит ваше имя и адрес электронной почты, а также имя и электронную почту тех, кто помог сделать ваше приложение. Как правило, он выглядит так:",
    "Copying": "Копирование",
    "The COPYING file contains a copy of the license that your code is released under. For elementary apps this is typically the <a href=\"http:\/\/www.gnu.org\/licenses\/quick-guide-gplv3.html\">GNU General Public License<\/a> (GPL). Remember the header we added to our source code? That header reminds people that your app is licensed and it belongs to you. You can choose other licenses like the MIT license as well, but for this example let's stick to the <a href=\"http:\/\/www.gnu.org\/licenses\/gpl-3.0.txt\">GPL<\/a>.": "Файл COPYING содержит копию лицензии, под которой выпущен ваш код. Для приложений elementary это как правило <a href=\"http:\/\/www.gnu.org\/licenses\/quick-guide-gplv3.html\">GNU General Public License<\/a> (GPL). Помните какой заголовок мы добавили в наш исходный код? Он напоминает людям о том, что ваше приложение лицензировано и принадлежит вам. Вы можете выбрать другую лицензию, такую как MIT, но в этом примере давайте придерживаться <a href=\"http:\/\/www.gnu.org\/licenses\/gpl-3.0.txt\">GPL<\/a>.",
    "Mark Your Progress": "Оцените свой прогресс",
    "Did you remember to add these files to bzr and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to Launchpad. Keep in mind that this acts as a backup system as well; when we push our work to Launchpad, we know it's safe and we can always revert to a known good revision if we mess up later.": "Вы не забыли добавить эти файлы в bzr и добавить ревизию? Каждый раз, когда мы добавляем новый файл или вносим существенные изменения, хорошей идеей будет добавить новую ревизию и загрузить на Launchpad. Помните, что это работает также как система бекапов. Когда мы загружаем нашу работу на Launchpad, мы знаем, что это безопасно и мы всегда можем откатиться на хорошую ревизию, если ошибемся.",
    "Now that we've got all these swanky files laying around, we need a way to tell the computer what to do with them. Ready for the next chapter? Let's do this!": "Теперь, когда у нас есть все эти шикарные файлы, нам нужно объяснить компьютеру с ними делать. Готовы к следующей главе? Поехали!",
    "The Build System": "Система сборки",
    "The next thing we need is a build system. The build system that we're going to be using is called <a href=\"http:\/\/www.cmake.org\">CMake<\/a>. We already installed the <code>cmake<\/code> program at the beginning of this book when we got the build dependencies for Granite Demo. What we're going to do in this step is create the files that tell Cmake how to install your program. This includes all the rules for building your source code as well as correctly installing your .desktop file and the binary app that results from the build process.": "Следующее, что нам нужно — это система сборки. Система сборки, которую мы собираемся использовать, называется <a href=\"http:\/\/www.cmake.org\">CMake<\/a>. Мы уже установили программу <code>cmake<\/code> в начале книги, когда собирали зависимости для Granite Demo. Сейчас нам нужно создать файлы, которые объяснят Cmake как установить вашу программу. Это включает все правила сборки вашего исходного кода, правильную установку файла .desktop и бинарное приложение, которое мы содадим после процесса сборки.",
    "Create a new file in your project's root folder called \"CMakeLists.txt\". Since this file is a bit long, we've included some comments along the way to explain each section. You don't have to copy those, but type the rest into that file:": "",
    "And you're done! Your app now has a real build system. Don't forget to add these files to bzr and push to launchpad. This is a major milestone in your app's development!": "Готово! Ваше приложение теперь имеет систему сборки. Не забудьте добавить эти файлы в bzr и загрузить на Launchpad. Это важный этап в разработке вашего приложения!",
    "Building and Installing with CMake": "Компиляция и установка используя CMake",
    "Now that we have a build system, let's try it out:": "Теперь давайте попробуем её в действии:",
    "Create a new folder in your project's root folder called \"build\"": "",
    "Change into this directory in terminal and execute the following command:": "Перейдите в эту директорию и выполните следующую команду в терминале:",
    "This command tells cmake to get ready to build our app using the prefix \"\/usr\". The <code>cmake<\/code> command defaults to installing our app locally, but we want to install our app for all users on the computer.": "",
    "Build your app with <code>make<\/code> and if successful install it with <code>sudo make install<\/code>:": "Соберите приложение с помощью <code>make<\/code> и в случае успеха установите его командой <code>sudo make install<\/code>:",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the \"build\" folder to your bzr branch and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the \"build\" folder and it won't mess up our app's source code.": "",
    "We'll revisit CMake again later to add some more complicated behavior, but for now this is all you need to know to give your app a proper build system. If you want to explore CMake a little more on your own, you can always check out <a href=\"http:\/\/www.cmake.org\/cmake\/help\/documentation.html\">CMake's documentation<\/a>.": "Мы вернемся к CMake позже, чтобы добавить некоторые более сложные задачи, но на данный момент это все, что вам нужно знать, для того чтобы ваше приложение имело правильную систему сборки. Если вы хотите изучить CMake немного больше, вы всегда можете обратиться к <a href=\"http:\/\/www.cmake.org\/cmake\/help\/documentation.html\">документации<\/a>.",
    "Review": "Обзор",
    "Let's review all we've learned to do:": "Давайте резюмируем все, что мы научились делать:",
    "Create a new Gtk app using <code>Gtk.Window<\/code>, <code>Gtk.Button<\/code>, and <code>Gtk.Label<\/code>": "Создавать новое Gtk приложение используя <code>Gtk.Window<\/code>, <code>Gtk.Button<\/code> и <code>Gtk.Label<\/code>",
    "Keep our projects organized into branches": "Организовывать наши проекты в ветви",
    "License our app under the GPL and declare our app's authors in a standardized manner": "Лицензировать наше приложение используя GPL и объявлять авторов приложения стандартизированным способом",
    "Create a .desktop file that tells the computer how to display our app in the Applications menu and the Dock": "Создавать файл формата .desktop, который сообщает компьютеру как отображать наше приложение в меню «Приложения» и в док",
    "Set up a CMake build system that contains all the rules for building our app and installing it cleanly": "Настраивать систему сборки CMake, которая содержит все правила сборки нашего приложения и корректно его устанавливает",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to branch your project from launchpad and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "Это уже прилично! Вы на пути чтобы стать хорошим разработчиком приложений для elementary OS. Вы можете быть довольны этим. Чтобы продолжить, поэксперементируйте с данным примером. Смените названия файлов и посмотрите сможете ли вы настроить и установить их без ошибок. Попросите другого разработчика протестировать ваш проект на своем компьютере, чтобы узнать, не возникнут ли у него ошибки во время сборки и установки. Если нет, то вы только что разместили свое первое приложение!\nКогда будете готовы, перейдите к следующему этапу — созданию пакетов.",
    "Adding Translations": "Добавление переводов",
    "Now that you've learned about CMake, the next step is to make your app able to be translated to different languages. The first thing you need to know is how to convert strings in your code into translatable strings. Here's an example:": "Теперь, когда вы узнали о CMake, следующий шаг — сделать ваше приложение переводимым на другие языки. Первая вещь, которую вам нужно знать — как преобразовать строки в вашем коде в переводимые строки. Вот пример:",
    "See the difference? We just added <code>_()<\/code> around the string! Well, that was easy!": "Видите разницу? Мы только заключили строку в <code>_()<\/code>! Что ж, это было просто!",
    "Go back to your project and make all your strings translatable by adding <code>_()<\/code>": "Вернитесь в проект и сделайте все строки переводимыми, добавив <code>_()<\/code>",
    "Add the following lines in the \"CMakeLists.txt\" file you created a moment ago:": "",
    "Create a directory named \"po\" on the root folder of your project. Inside of your po directory you will need to create another CMakeLists.txt file. This time, it's contents will be:": "",
    "On your build directory execute the following commands:": "В вашей рабочей директории выполните следующие комманды:",
    "Don't forget to add this new directory and it's contents to bzr": "Не забудьте добавить новую директорию и ее содержимое в bzr",
    "That's it! CMake will automatically add all the string marked with <code>_()<\/code> into a .pot template file, and a file for each available language where you'll place the translatable strings.": "И всё! CMake автоматически добавит все строки отмеченные при помощи <code>_()<\/code> в шаблонный файл .pot и файл для каждого доступного языка, куда вы поместите переведённые строки.",
    "Packaging": "Создание пакетов",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, hosted in a Personal Package Archive (PPA) on Launchpad. This will allow normal people to install your app and even get updates for it in Update Manager.": "Несмотря на наличие системы сборки, наше приложение все еще не готово для обычных пользователей. Мы хотим убедиться, что наше приложение можно собрать и установить без использования Терминала. Что нам нужно, так это создать пакет для приложение. Для этого мы используем формат пакетов Debian (.deb) в elementary OS. Этот раздел научит вас как упаковывать приложение в .deb файл и размещать его в PPA на Launchpad. Это позволит обычным людям установить ваше приложение и даже получать обновления для него в Менеджере Обновлений.",
    "Practice Makes Perfect": "Практика необходима",
    "If you want to get really good really fast, you're going to want to practice. Repetition is the best way to commit something to memory. So let's recreate our entire Hello World app again <em>from scratch<\/em>:": "Если вы хотите стать хорошим разработчиком, вам нужно практиковаться. Повторение — лучший способ что-либо запомнить. Так давайте снова создадим программу «Hello world» <em>с нуля<\/em>:",
    "Create a new branch folder \"hello-packaging\"": "",
    "Set up our directory structure including the \"src\" and \"data\" folders.": "",
    "Add your Authors, Copying, .desktop, and source code.": "Добавьте ваши файлы Authors, Copying, .desktop и исходный код.",
    "Now set up the CMake build system.": "Теперь давайте настроим систему сборки CMake.",
    "Test everything!": "Протестируйте все!",
    "Did you commit and push to launchpad for each step? Keep up these good habits and let's get to packaging this app!": "Возможно, вы фиксируете версии и загружаети их на Launchpad на каждом шаге? Это хорошие привычки!\nДавайте перейдем к созданию пакета для этого приложения!",
    "Debian Control": "",
    "Now it's time to create the rules that will allow your app to be built as a .deb package. Let's dive right in:": "Пришло время создать правила, которые позволят собрать ваше приложение в .deb пакет. Давайте начнем:",
    "Like CMake, elementary maintains a simple version of the \"debian\" folder that contains all the files we need for packaging. Let's grab a copy of that with bzr:": "",
    "Copy the \"debian\" folder from that branch into your \"hello-packaging\" folder.": "",
    "Open the file called \"changelog\" and make it look like below:": "",
    "The first line contains your app's binary name, version, OS codename, and how urgently your package should be built. Remember that your app's binary name is lowercase and does not contain spaces. After the <code>*<\/code> is a list of your changes. Finally, you include your name, email address, and the date. For more information about the debian changelog, make sure to read the <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/ch-source.html#s-dpkgchangelog\">documentation<\/a>.": "Первая строка содержит имя бинарное приложения, версию, кодовое имя ОС и срочность сборки вашего пакета. Запомните, что имя пишется в нижнем регистре и не содержит пробелов. После символа <code>*<\/code> находится список ваших изменений. Наконец, вы наберите ваше имя, электронную почту и дату. Для более подробной информации о Debian changelog прочитайте <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/ch-source.html#s-dpkgchangelog\">документацию<\/a>.",
    "Open the file called \"control\" and make it look like below:": "",
    "Open the file called \"copyright\". We only need to edit what's up top:": "",
    "That wasn't too bad right? We'll set up more complicated packaging in the future, but for now this is all you need. If you'd like you can always read <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/\">more about Debian packaging<\/a>.": "Не так уж плохо, правда? Потом мы создадим более сложную настройку пакета, но сейчас это все, что вам нужно. Если вы хотите, то всегда можете прочитать больше о <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/\">создании пакетов в Debian<\/a>.",
    "Launchpad Recipes": "Рецепты Launchpad",
    "Now that we have our \"debian\" folder in order, it's time to go to launchpad and create a recipe: instructions what code to build, how often to build it, and where to put the resulting packages.": "",
    "<a href=\"https:\/\/code.launchpad.net\/people\/+me\/+junk\/hello-packaging\/+new-recipe\">Click this link<\/a> or go to Launchpad, find your hello-packaging branch, then select <strong>Create packaging recipe<\/strong>.": "<a href=\"https:\/\/code.launchpad.net\/people\/+me\/+junk\/hello-packaging\/+new-recipe\">Щелкните по ссылке<\/a> или зайдите на Launchpad, найдите вашу ветку hello-packaging и выберите <strong>Create packaging recipe<\/strong>.",
    "Read through the options available to you. You can go ahead and keep the defaults for Name, Description (it's blank), Owner, Daily builds, and PPA but you can also customize a bit if you'd like.": "Ознакомьтесь с доступными настройками. Вы можете пойти дальше, оставив для полей Name, Description (оно пустое), Owner, Daily builds и PPA значения по умолчанию, а можете изменить их, если хотите.",
    "When you get down to a set of checkboxes with the header \"Default distribution series\", make sure you select \"Trusty\". elementary OS Freya shares it's core with Ubuntu Trusty, so packages built on Trusty will also work on Freya.": "",
    "For recipe text, we're going to change it ever so slightly to conform better with the official Debian rules. Change out the first line for this one:": "Мы собираемся лишь немного изменить текст рецепта для лучшего соответствия официальным правилам Debian. Измените первую строку на такую:",
    "Notice that this is ever so slightly different from the default line which includes <code>{debupstream}-0~{revno}<\/code> instead of <code>{debupstream}+r{revno}-0<\/code>.": "Заметьте, что она не сильно отличается от строки по умолчанию, которая включает <code>{debupstream}-0~{revno}<\/code> вместо <code>{debupstream}+r{revno}-0<\/code>.",
    "When you're happy with the options you've chosen, select <strong>Create Recipe<\/strong>.": "Когда вы определились с параметрами, которые выбрали, нажмите <strong>Create Recipe<\/strong>.",
    "Now that you've created a recipe, you only have to wait until Launchpad finishes the build! If everything goes as planned, your new PPA will contain a packaged app which other people can install and run with ease. Additionally, anyone using your PPA will be able to get updates for your app if you upload a new version. We'll talk more about how to do that later.": "Теперь, когда вы создали рецепт, вам нужно только дождаться пока Launchpad закончит создание! Если все пойдет по плану, ваш новый PPA будет содержать упакованное приложение, которое другие люди могут с легкостью устанавливать и запускать. Кроме того, любому пользователю вашего PPA будут доступны обновления для вашего приложения, если вы загрузите новую версию. Мы еще поговорим об этом позже.",
    "Creating Layouts": "Создание разметок",
    "Now that you know how to code, build, and distribute an app using Vala, Gtk, CMake, and Launchpad PPAs, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window<\/code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid<\/code>.": "Теперь, когда вы знаете, как писать код, создавать и распространять приложения с помощью Vala, Gtk, CMake, и Launchpad PPA, настало время, чтобы узнать немного больше о том, как превратить ваше приложение в нечто действительно полезное. Первое, что мы должны научиться — это выкладывать виджеты в наши окна. Но у нас есть фундаментальная проблема: мы можем добавить только один виджет (один «ребенок») в <code>Gtk.Window<\/code>. Так как же нам обойти это, чтобы поместить сложные макеты в окно? Мы должны добавить виджет, который может содержать несколько «детей». Один из этих виджетов <code>Gtk.Grid<\/code>.",
    "Widgets as Subclasses of Other Widgets": "Виджеты, как подклассы других виджетов",
    "Before we get into <code>Gtk.Grid<\/code>, let’s stop for a second and take some time to understand Gtk a little better. At the lower level, Gtk has classes that define some pretty abstract traits of widgets such as <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Container\"><code>Gtk.Container<\/code><\/a> and <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Orientable\"><code>Gtk.Orientable<\/code><\/a>. These aren’t widgets that we’re going to use directly in our code, but they’re used as building blocks to create the widgets that we do use. It’s important that we understand this, because it means that when we understand how to add children to a <code>Gtk.Container<\/code> like <code>Gtk.Grid<\/code>, we also understand how to add children to a <code>Gtk.Container<\/code> like <code>Gtk.Toolbar<\/code>. Both Grid and Toolbar are widgets that are subclasses of the more abstract class <code>Gtk.Container<\/code>.": "",
    "If you want to understand more about these widgets and the parts of Gtk that they subclass, jump over to <a href=\"https:\/\/valadoc.org\/\">Valadoc<\/a> and search for a widget like <code>Gtk.Grid<\/code>. See that big tree at the top of the page? It shows you every component of Gtk that <code>Gtk.Grid<\/code> subclasses and even what those components subclass. Having a lower level knowledge of Gtk will help you to implement widgets you haven’t worked with before since you will understand how their parent classes work.": "",
    "Gtk.Grid": "",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid<\/code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to Launchpad, and build a PPA in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window<\/code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "Давайте вернемся к нашему окну и <code>Gtk.Grid<\/code>. Вероятно вы уже можете настроить проект с помощью CMake, загрузить его на Launchpad, и создать PPA. Ради практики вы можете выполнить все это еще раз. Иначе ограничимся терминалом. Напишите пустое <code>Gtk.Window<\/code> и удостоверьтесь что все правильно собирается. Готовы? Добавим Grid.",
    "Just like when we add a Button or Label, we need to create our <code>Gtk.Grid<\/code>. As always, don’t copy and paste! Practice makes perfect. We create a new Gtk.Grid like this:": "Нужно создавать <code>Gtk.Grid<\/code>, ровно также как мы добавляли Button или Label. Не копируйте! Практика необходима! Создаем Gtk.Grid:",
    "Remember that Button and Label accepted an argument (a String) in the creation method (that’s the stuff in parentheses and quotes). As shown above, <code>Gtk.Grid<\/code> doesn’t accept any arguments in the creation method. However, you can still change the grid’s properties (like <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Orientation\">orientation<\/a>) as we did on the second line. Here, we’ve declared that when we add widgets to our grid, they should stack vertically.": "",
    "Let’s add some stuff to the Grid:": "Давайте добавим что-нибудь в Grid:",
    "Super easy stuff, right? We can add the grid to our window using the same method that we just used to add widgets to our grid:": "Действительно удобная штука, да? Мы можем добавить Grid в окно, используя тот же метод, который мы только что использовали, чтобы добавить виджеты в Grid:",
    "Now build your app and see what it looks like. Since we’ve given our grid a <code>Gtk.Orientation<\/code> of <code>VERTICAL<\/code> the labels stack up on top of each other. Try creating a <code>Gtk.Grid<\/code> without giving it an orientation. By default, <code>Gtk.Grid<\/code>’s orientation is horizontal. You really only ever have to give it an orientation if you need it to be vertical.": "Теперь давайте построим ваше приложение и увидим как оно выглядит. Тат как как мы задали <code>Gtk.Orientation<\/code> и <code>VERTICAL<\/code>  надписи расположились один над другим.  Попробуйте создать <code>Gtk.Grid<\/code>  не задавая ему ориентацию. По умолчанию ориентация <code>Gtk.Grid<\/code> — горизонтальная. Вам необходимо задать ему ориентацию только если нужно чтобы она была вертикальной.",
    "Functionality in Gtk.Grid": "Набор возможностей в Gtk.Grid",
    "Okay, so you know all about using a <code>Gtk.Grid<\/code> to pack multiple children into a Window. What about using it to lay out some functionality in our app? Let’s try building an app that shows a message when we click a button. Remember in our first “Hello World” how we changed the label of the button with <code>button.clicked.connect<\/code>? Let’s use that method again, but instead of just changing the label of the button, we’re going to use it to change an empty label to a message.": "Итак, вы знаете все об использовании <code>Gtk.Grid<\/code> для объединения потомков в окно. Добавим возможностей в наше приложение. Сделаем приложение, которое показывает сообщение при нажатии на кнопку. Помните как в «Hello World» мы изменяли название кнопки используя <code>button.clicked.connect<\/code>? Повторим это, однако на этот раз мы изменим пустое название на сообщение.",
    "Let’s create a Window with a vertical Grid that contains a Button and a Label:": "Давайте создадим окно с вертикальной сеткой, которая содержит Button и Label:",
    "This time when we created our grid, we gave it another property: <code>row_spacing<\/code>. We can also add <code>column_spacing<\/code>, but since we’re stacking widgets vertically we’ll only see the effect of <code>row_spacing<\/code>. Notice how we can create new widgets outside the grid and then pack them into the grid by name. This is really helpful when you start using different methods to change the properties of your widgets.": "На этот раз при создании сетки установим другое свойство <code>row_spacing<\/code>. Также можно добавить <code>column_spacing<\/code>, но мы размещаем виджеты вертикально и увидим только результат от <code>row_spacing<\/code>. Обратите внимание как мы создаем новые виджеты вне сетки и вставляем их в нее по имени. Это действительно помогает когда используешь разные методы для изменения свойств виджетов.",
    "Now, let’s hook up the button to change that label. To keep our code logically separated, we’re going to add it below <code>window.add (grid);<\/code>. In this way, the first portion of our code defines the UI and the next portion defines the functions that we associated with the UI:": "",
    "Remember, we set the button as insensitive here because clicking it again has no effect. Now compile your app and marvel at your newfound skills. Play around with orientation and spacing until you feel comfortable.": "Запомните, мы настроили кнопку как нечувствительную, т. к. нажатие на нее снова не даст эффекта. Скомпилируйте ваше приложение и восхититесь своими новыми знаниями, разберитесь с ориентацией и расположением.",
    "The Attach Method": "Метод attach",
    "While we can use <code>Gtk.Grid<\/code> simply to create single row or single column layouts with the add method, we can also use it to create row-and-column-based layouts with the <code>attach<\/code> method. First we’re going to create a new <code>Gtk.Grid<\/code> and set both column and row spacing, then we’ll create all the widgets we want to attach to our grid, and finally we’ll attach them.": "Пока мы можем использовать <code>Gtk.Grid<\/code> просто для создания одной строки и одного столбца с помощью метода add. Можно использовать метод <code>attach<\/code>. Создадим новую <code>Gtk.Grid<\/code>, расположим столбец и строку и создадим виджет для присоединения к сетке и присоединим его.",
    "Make sure to give the Grid, Buttons, and Labels unique names that you’ll remember. It’s best practice to use descriptive names so that people who are unfamiliar with your code can understand what a widget is for without having to know your app inside and out.": "Убедитесь что Grid, Buttons и Labels имеют различные имена, которые хорошо запоминаются. Хорошая практика состоит в использовании описательных имен, чтобы люди не знакомые с кодом понимали для чего предназначен виджет.",
    "Notice that the attach method takes 5 arguments:": "Обратите внимание, что метод attach принимает 5 аргументов",
    "The widget that you want to attach to the grid.": "Виджет, который вы хотите прикрепить к сетке.",
    "The column number to attach to starting at 0.": "Номер столбца, который нужно прикретить, начинается с 0.",
    "The row number to attach to starting at 0.": "Номер строки, которую нужно прикрепить, начинается с 0.",
    "The number of columns the widget should span.": "Число столбцов, который виджет должен охватить.",
    "The number of rows the widget should span.": "Число строк, который виджет должен охватить.",
    "You can also use <code>attach_next_to<\/code> to place a widget next to another one on <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.PositionType\">all four sides<\/a>. Don’t forget to add the functionality associated with our buttons:": "",
    "You’ll notice in the example code above that we’ve created a 2 x 2 grid with buttons on the left and labels on the right. The top label goes from blank to “Hello World!” and the button label is rotated 90 degrees. Notice how we gave the buttons labels that directly call out what they do to the other labels.": "Вы заметите в коде вверху, что была создана сетка 2 x 2 с кнопками слева и надписями справа. Верхняя надпись изменяется с пустой до «Hello World!» и надпись на кнопке вращается на 90 градусов. Обратите внимание, как мы задали надписи на кнопках которые напрямую вызывают то, что они делают с другими надписями.",
    "Let’s recap what we learned in this section:": "Давайте резюмируем то, что мы выучили в этом разделе:",
    "We learned about the building blocks of Gtk and the importance of subclasses": "Мы узнали о составных блоках Gtk и о важности подклассов",
    "We packed multiple children into a Window using <code>Gtk.Grid<\/code>": "Мы собрали несколько «детей» в одно окно при помощи <code>Gtk.Grid<\/code>",
    "We set the properties of <code>Gtk.Grid<\/code> including its orientation and spacing": "Мы добавили свойства <code>Gtk.Grid<\/code>, включающие его ориентацию и расположение",
    "We added multiple widgets into a single Gtk.Grid using the attach method to create complex layouts containing Buttons and Labels that did cool stuff.": "Мы добавили несколько виджетов в один Gtk.Grid, используя метод attach для создания сложных разметок, содержащих кнопки и надписи, которые сделают интересные вещи.",
    "Now that you understand more about Gtk, Grids, and using Buttons to alter the properties of other widgets, try packing other kinds of widgets into a window like a Toolbar and changing other properties of <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Label\">Labels<\/a> like <code>width_chars<\/code> and <code>ellipsize<\/code>. Don’t forget to play around with the attach method and widgets that span across multiple rows and columns. Remember that Valadoc is super helpful for learning more about the methods and properties associated with widgets.": "",
    "Notifications": "Уведомления",
    "By now you've probably already seen the white notification bubbles that appear on the top right of the screen. Notifications are a simple way to notify a user about the state of your app. For example, they can inform the user that a long process has been completed or a new message has arrived. In this section we are going to show you just how to get them to work in your app. Let's begin by making a new project!": "Вероятно вы уже видели всплывающие уведомления в правом верхнем углу экрана. Это простой способ оповестить пользователя  о состоянии приложения. Например, длительный процесс может быть завершен или пришло новое сообщение. В этом разделе мы покажем вам как с ними работать в вашем приложении. Создадим новый проект!",
    "Making Preparations": "Подготовимся",
    "Create a new folder inside of  \"~\/Projects\" called \"notifications-app\"": "",
    "Create a file inside called <code>notify-app.vala<\/code>": "Создайте внутри нее файл с именем <code>notify-app.vala<\/code>",
    "Re-create the <code>CMake<\/code> folder and <code>CMakeFiles.txt<\/code> file. If you don't remember how to set up CMake, go back to the <a href=\"#building-and-installing-with-cmake\">previous section<\/a> and review.": "Создайте заново директорию <code>CMake<\/code> и файл <code>CMakeFiles.txt<\/code>. Если не помните как, то <a href=\"#building-and-installing-with-cmake\">смотрите здесь<\/a>.",
    "Remember how to <a href=\"#the-desktop-file\">make a .desktop file<\/a>? Excellent! Make one for this project, but this time, name it <code>notify.app.desktop<\/code> as <code>notify.app<\/code> will be your app's ID. Since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true<\/code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.": "Помните как <a href=\"#the-desktop-file\">создавать .desktop файл<\/a>? Прекрасно! Создайте один для этого проекта, но на этот раз назовите его <code>notify.app.desktop<\/code> и <code>notify.app<\/code> будет ID вашего приложения. Так как ваше приложение будет  отображать уведомления, добавьте <code>X-GNOME-UsesNotifications=true<\/code> в конец файла. Это нужно чтобы пользователи могли устанавливать настройки для вашего приложения в системных настройках уведомлений.",
    "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed.": "Используя уведомления важно чтобы desktop файл имел тоже имя что и ID приложения. elementary использует desktop файлы для поиска дополнительной информации о приложении которое посылает уведомления, например значок по умолчанию или имя приложения. Если нет desktop файла чье имя совпадает с ID приложения, ваше уведомление может не отобразиться.",
    "Gtk.Application": "",
    "In order to display notifications, you're going to need your app to subclass <code>Gtk.Application<\/code>. <code>Gtk.Application<\/code> is a class that handles many important aspects of a Gtk app like app uniqueness and the application ID you need to identify your app to the notifications server. If you want some more details about <code>Gtk.Application<\/code>, <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Application\">check out Valadoc<\/a>.": "",
    "Now that you know what a <code>Gtk.Application<\/code> is, let's create one:": "Теперь, когда вы знаете, что такое <code>Gtk.Application<\/code>, давайте создадим его:",
    "Initiating your app with Gtk.Application is a little different from what we did a few sections back. This time, in <code>main<\/code> you are starting your app with <code>app.run<\/code> and you have a new function called <code>activate<\/code> inside of your class; This <code>activate<\/code> function will be the one that executes when you invoke <code>app.run<\/code>. We are also creating a <code>Gtk.ApplicationWindow<\/code>, this is where you will place all the widgets your app needs. Now that we have a simple window, let's use what we learned in <a href=\"#gtk-grid\">creating layouts<\/a> and make a grid containing one button that will show a notification.": "Ваше приложение с Gtk.Application отличается от того что мы делали ранее. На этот раз в <code>main<\/code> вы начинаете с <code>app.run<\/code>, также у вас появилась новая функция <code>activate<\/code> в вашем классе. <code>activate<\/code> запускается при исполнении <code>app.run<\/code>. Также создаем <code>Gtk.ApplicationWindow<\/code>. Здесь вы будете помещать виджеты, которые нужны для приложения. Теперь у нас простое окно, используем то чему мы научились <a href=\"#gtk-grid\">здесь<\/a> и поместим в сетке кнопку, которая покажет уведомления.",
    "In between <code>var app_window...<\/code> and <code>app_window.show ();<\/code>, write the folowing lines of code:": "Между <code>var app_window...<\/code> и <code>app_window.show ();<\/code>, напишите следующие строки кода:",
    "Since we're adding translatable strings, don't forget to update your translation template by running <code>make pot<\/code>.": "Поскольку мы добавляем переводимые строки, не забудьте обновить ваш шаблон перевода, запустив <code>make pot<\/code>.",
    "Sending Notifications": "Отсылка уведомлений",
    "Now that we have a Gtk.Application we can send notifications. Let's connect a function to the button we created and use it to send a notification:": "Теперь, когда у нас есть приложение Gtk мы можем отправлять уведомления. Давайте соединим функцию с кнопкой, которую мы создали и воспользуемся ей чтобы отправить уведомление. ",
    "Okay, now compile your new app. if everythink works, you should see your new app. Click the \"Send\" button. Did you see the notification? Great! Don't forget to commit and push your project in order to save your branch for later.": "",
    "Additional Features": "Дополнительные возможности",
    "Now that you know how to send basic notifications, lets talk about a couple ways to make your notifications better. Notifications are most useful when users can indentify where they came from and they contain relevant information. In order to make sure your notifications are useful, there are three important features you should know about: setting an icon, replacing a notification, and setting priority.": "Теперь когда вы знаете как отправлять базовые уведомления,  давайте обсудим пару способов как сделать ваши уведомления лучше. Уведомления наиболее полезны, когда пользователи могут определять от кого они пришли и когда они содержат соответствующую информацию. Для того, чтобы убедиться, что ваши уведомления полезны, существуют три важные особенности, о которых вам необходимо знать: настройка значков, замена уведомлений, установка приоритета.",
    "Icons": "Значки",
    "In order to make sure users can easily recognize a notification, we should set a relevant icon. Right after the <code>var notification = New Notification<\/code> line, add:": "Чтобы пользователи могли с лёгкостью распознать оповещение, нам нужно поставить соответствующую иконку. Сразу после строки <code>var notification = New Notification<\/code> добавьте:",
    "That's it. Compile your app again, and press the \"Send\" button. As you can see, the notification now has an icon. Using this method, you can set the icon to anything you'd like. You can use <code>gtk3-icon-browser<\/code> to see what system icons are available.": "",
    "Replace": "Заменить",
    "We now know how to send a notification, but what if you need to update it with new information? Thanks to the notification ID, we can easily replace a notification. The notification ID should be the same as the app ID that we set in <code>Gtk.Application<\/code>.": "Теперь мы знаем, как отправлять уведомления, но что если вам необходимо обновить их содержание? Благодаря ID уведомления, мы легко можем заменить уведомление. ID уведомления должно быть таким же как и ID приложения который мы установили в <code>Gtk.Application<\/code>.",
    "Let's make the replace button. This button will replace the current notification with one with different information. Let's create a new button for it, and add it to the grid:": "Давайте сделаем кнопку для замены. Эта кнопка будет заменять текущее уведомление другим с другой информацией. Давайте создадим для этого другую кнопку и разместим в Grid: ",
    "{\n        this.withdraw_notification (\"notify-test\");\n    });\n-->": "{\n        this.withdraw_notification («notify-test»);\n    });\n-->",
    "Very easy right? Let's compile and run your app again. Click on the buttons, first on \"Show\", then \"Replace\". See how the text on your notification changes without making a new one appear?": "",
    "Priority": "Приоритет",
    "Notifications also have priority. When a notification is set as <code>URGENT<\/code> it will stay on the screen until either the user interacts with it, or you withdraw it. To make an urgent notification, add the following line before the <code>this.send_notification ()<\/code> function": "Уведомления также имеют приоритет. Они будет оставаться на экране до принудительного взаимодействия с ними, когда установлен <code>URGENT<\/code>. Для срочного уведомления добавьте эту строку до функции <code>this.send_notification ()<\/code>",
    "<code>URGENT<\/code> notifications should really only be used on the most extreme cases. There are also <a href=\"https:\/\/valadoc.org\/gio-2.0\/GLib.NotificationPriority\">other notification priorities<\/a>.": "",
    "Let's review what all we've learned:": "Давайте рассмотрим все, что мы научились делать:",
    "We learned what <code>Gtk.Application<\/code> is and how to make a subclass of it.": "Мы узнали что такое <code>Gtk.Application<\/code> и как сделать из него подкласс.",
    "We built an app that sends and updates notifications.": "Мы создали приложение, которое отправляет и обновляет уведомления.",
    "We also learned about other notification features like setting an icon and a notification's priority.": "Мы также узнали о других функциях уведомлений, таких как установка значка и приоритета.",
    "As you could see, sending notifications is very easy thanks to <code>Gtk.Application<\/code>. If you need some further reading on notifications, Check out the page about <code>Glib.Notification<\/code> in <a href=\"https:\/\/valadoc.org\/gio-2.0\/GLib.Notification\">Valadoc<\/a>.": "",
    "Next Page:": "Следующая страница:",
    "Reference": "Справка",
    "Creating an account on GitHub and importing an SSH key": "",
    "Setting up the Git revision control system": "",
    "We’re going to assume that you’re working from a clean installation of elementary OS Loki or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "",
    "GitHub": "",
    "GitHub is an online platform for hosting code, reporting issues, tracking milestones, making releases, and more. If you're planning to publish your app through AppCenter, you'll need a GitHub account. If you already have an account, feel free to move on to the next section. Otherwise, <a href=\"https:\/\/github.com\/join\">sign up for a GitHub account<\/a> and return when you're finished.": "",
    "Git": "",
    "To download and upload to GitHub, you'll need the Terminal program <code>git<\/code>. Git is a type of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Revision_control\">revision control system<\/a> that allows multiple developers to collaboratively develop and maintain code while keeping track of each revision along the way.": "",
    "If you're ready, let's get you set up to use Git:": "",
    "Open the Terminal and install Git": "",
    "We need to inform Git who we are so that when we upload code it is attributed correctly. Inform Git of your identity with the following commands": "",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http:\/\/en.wikipedia.org\/wiki\/Secure_Shell\">SSH<\/a> key pair (a kind of fingerprint for your computer) and import your public key to GitHub. Type the following in Terminal:": "",
    "When prompted, press <kbd>Enter<\/kbd> to accept the default file name for your key. You can choose to protect your key with a password or press <kbd>Enter<\/kbd> again to use no password when pushing code.": "",
    "Now we're going to import your public key to GitHub. View your public SSH key with the following command, then copy the text that appears": "",
    "Visit <a href=\"https:\/\/github.com\/settings\/keys\">your SSH keys page<\/a> and click the green button in the upper right-hand corner that says &quot;New SSH key&quot;. Paste your key in the &quot;Key&quot; box and give it a title.": "",
    "We're all done! Now you can download source code hosted on GitHub and upload your own code. We'll revisit using <code>git<\/code> in a bit, but for now you're set up. For a more in-depth intro to Git, we recommend <a href=\"https:\/\/www.codecademy.com\/learn\/learn-git\">Codecademy's course on Git<\/a>.": "",
    "At the time of this writing, elementary OS doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "",
    "We’re going to use Terminal in order to compile our code, push revisions to GitHub (using <code>git<\/code>), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a Git branch. Let’s begin.": "",
    "Pushing to GitHub": "",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code.": "",
    "First we need to create a new repository on GitHub. Visit <a href=\"https:\/\/github.com\/new\">the new repository page<\/a> and create a new repository for your code.": "",
    "Open Terminal and make sure you're in your project's root directory &quot;~Projects\/gtk-hello&quot;, then issue the following commands": "",
    "Remember to replace <code>yourusername<\/code> with your GitHub username and <code>yourrepositoryname<\/code> with the name of the new repository you created.": "",
    "With these commands, we've told <code>git<\/code> to track revisions in this folder, that we'd like to track revisions on the file &quot;gtk-hello.vala&quot; specifically, we've committed our first revision and explained what we did in the revision, and then we've told <code>git<\/code> to push your code to GitHub.": "",
    "Finally, we commited our first revision and pushed code to GitHub": "",
    "Create &quot;hello-again.vala&quot; in the &quot;src&quot; folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now you can copy <a href=\"https:\/\/elementary.io\/docs\/code\/reference#gpl-header\">the GPL header from our reference documentation<\/a>. Be sure to assign the copyright to yourself at the top of the header and change the author to you at the bottom of the header.": "",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, make sure you've created a new repository for your project on GitHub push your first revision with <code>git<\/code>:": "",
    "Create a new file in scratch and save it in the &quot;data&quot; folder as &quot;com.github.yourusername.yourrepositoryname.desktop&quot;. This naming scheme is called <a href=\"https:\/\/en.wikipedia.org\/wiki\/Reverse_domain_name_notation\">Reverse Domain Name Notation<\/a> and will ensure that your .desktop file has a unique file name.": "",
    "Type the following into your .desktop file. Like before, try to guess what each line does.": "",
    "Finally, let's add this file to <code>git<\/code> and commit a revision:": "",
    "AppData.xml": "",
    "Every app also comes with an .appdata.xml file. This file contains all the information needed to list your app in AppCenter.": "",
    "In your data folder, create a new file called &quot;com.github.yourusername.yourrepositoryname.appdata.xml&quot;. Just like with the .desktop file, we use RDNN to avoid file naming collisions.": "",
    "Type the following into your .appdata.xml file": "",
    "These are all the mandatory fields for displaying your app in AppCenter. There are plenty of other optional fields that you can read about <a href=\"https:\/\/www.freedesktop.org\/software\/appstream\/docs\/chap-Metadata.html\">here<\/a>.": "",
    "There are also some special custom fields for AppCenter to further brand your listing. Specifically, you can set a background color and a text color for your app's header and banner. You can do so by adding the following keys inside the <code>component<\/code> tag:": "",
    "You can specificy colors here in either Hexidecimal or RGB. The background color will automatically be given a slight gradient in your app's banner.": "",
    "You can also specify a suggested price in whole USD. Remember though that AppCenter is a pay-what-you-want store. This is not a price floor. Users will still be able to choose any price they like, including 0.": "",
    "Did you remember to add these files to <code>git<\/code> and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to GitHub. Keep in mind that this acts as a backup system as well; when we push our work to GitHub, we know it's safe and we can always revert to a known good revision if we mess up later.": "",
    "And you're done! Your app now has a real build system. Don't forget to add these files to <code>git<\/code> and push to GitHub. This is a major milestone in your app's development!": "",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the &quot;build&quot; folder to your <code>git<\/code> repository and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the &quot;build&quot; folder and it won't mess up our app's source code.": "",
    "Create a .desktop file using RDNN that tells the computer how to display our app in the Applications menu and the Dock": "",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to clone your repo from GitHub and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "",
    "Don't forget to add this new directory and it's contents to git": "",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, which is required to publish apps in AppCenter. This will allow normal people to install your app and even get updates for it when you publish them.": "",
    "Did you commit and push to GitHub for each step? Keep up these good habits and let's get to packaging this app!": "",
    "Like CMake, elementary maintains a simple version of the &quot;debian&quot; folder that contains all the files we need for packaging. Let's grab a copy of that with <code>git<\/code>:": "",
    "Now that you know how to code, build, and package an app using Vala, Gtk, CMake, and Debian packaging, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window<\/code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid<\/code>.": "",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid<\/code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to GitHub, and set up Debian Packaging in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window<\/code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "",
    "Remember how to <a href=\"#the-desktop-file\">make a .desktop file<\/a>? Excellent! Make one for this project, but this time, since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true<\/code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.": "",
    "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed. To keep things simple, we'll be using the same RDNN everywhere.": ""
}