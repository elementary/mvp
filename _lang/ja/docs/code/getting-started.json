{
    "Getting Started": "はじめに",
    "Welcome to the elementary Developer Guide! This book was created to teach you all about creating and distributing apps for elementary OS. The introduction will make sure that you have all the tools for the job and a solid understanding of what this book is about. Some of you may feel confident enough to jump straight into coding. If that's the case, you might want to skip ahead and start writing your first app.": "elementary デベロッパーガイドへようこそ! このガイドでは、 elementary OS 向けのアプリを開発し、配布するためのすべてが説明されています。まずは、アプリを開発するために必要なツールを確かめ、このガイドの目的をはっきりさせていきます。もし早くコーディングを始めたいなら、そしてそれをできる自信があるなら、このセクションは読み飛ばしてもかまいません。",
    "However, we strongly recommend to at least skim through this preparation step. Having the right setup is going to help you reach your goals faster, and having a solid foundation is going to help you throughout the rest of this book.": "ですが、このセクションには目を通しておくことをおすすめします。完全なセットアップは、目標への到達をより早くでき、この後のガイドを読んでいく上でも役に立つでしょう。",
    "What We Will And Won't Cover": "ガイドが取り扱う範囲",
    "We're going to assume that you have absolutely no experience in writing apps for elementary. But we will assume some basic programming knowledge, and hopefully a little experience in Vala or at least similarly syntaxed languages. If you're not familiar with Vala, we highly encourage you to brush up on it before coming here.": "このドキュメントは、初めてアプリを作る人向けに書かれています。しかし、基本的なプログラミングの知識があり、少しなりとも Vala に触れた経験があることを前提とする部分が一部ありますので、このガイドを読む前に Vala を学習しておくとスムーズです。",
    "We’re also not covering design too much in this guide; that’s what the <a href=\"\/docs\/human-interface-guidelines\">Human Interface Guidelines<\/a> (HIG) are for, and you’re highly encouraged to take a look there before beginning your app. We're going to assume you have a basic knowledge of (or at least a quick link to) the HIG and focus on coding. However, elementary is all about great design and stellar consistency. It’s important you grasp these concepts before moving on.": "このガイドでは、デザインに関しては最小限しか取り扱っていません。アプリを作成する前に、 <a href=\"\/docs\/human-interface-guidelines\">ヒューマンインターフェイスガイドライン<\/a> (HIG) をよく読んで理解してください。これからのガイドは、 HIG について基本的な知識をお持ちである (最低限、いつでも参照できる) ものとして進めていきます。\nelementary はそのデザインが大きな特徴です。開発を始める前に、そのコンセプトをしっかりと理解してください。",
    "In this book, we're going to talk about building apps using GTK+, Granite, and other tech available in elementary, setting up a build system, hosting your code for collaborative development, working with translations, a few other bits and pieces, and finally packaging and distributing your new app.": "このガイドでは、 GTK+ や Granite などの elementary で使用可能なテクノロジーについて、ビルド環境のセットアップについて、複数人での開発について、アプリの多国語化について、パッケージ化と配布について、を主に扱います。",
    "The Basic Setup": "セットアップ",
    "Before we even think about writing code, you'll need a certain basic setup. This chapter will walk you through the process of getting set up. We will cover the following topics:": "アプリを作りはじめる前に、いくつかの準備が必要です。ここでは、プログラミングを始める前にしなければならない以下の点について触れます。",
    "Creating an account in launchpad.net and importing an SSH key in Launchpad": "launchpad.net にアカウントを作成し、 SSH キーをインポートする",
    "Setting up the Bazaar revision control system": "Bazaar リビジョンコントロールシステムのセットアップ",
    "Getting and using the elementary developer \"SDK\"": "",
    "We’re going to assume that you’re working from a clean installation of elementary OS Freya or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "ここでは、あなたは Freya 以降の elementary OS をクリーンインストールしたものとして進めていきます。これはガイド中で Ubuntu をはじめとする他の Linux OS にはない(あるいは使えない)アプリケーションを参照することになるためです。このガイドの方法を Ubuntu 向けアプリケーションの開発に適用することは不可能ではありませんが、それは非常に難しいでしょう。",
    "Launchpad": "",
    "Launchpad is a free online service provided by Canonical, the same people who brought you Ubuntu. It is used as a platform for hosting code, tracking milestones, tracking bugs, proposing designs, making translations, and more. Launchpad is a powerful resource, especially if you are a developer working with others. We're going to be using it for its various features throughout this book, so it's a good idea for you to sign up for an account. If you already have an account, feel free to move on to the next section.": "Launchpadはコードの公開、マイルストーンの管理、バグの追跡、デザインの配布、翻訳などを行う無料のオンラインサービスです。提供元のCanonicalはUbuntuを開発していることでも知られています。Launchpadは特に複数人からなる開発者のチームにとって強力な武器になりますので、この機会にアカウントを登録してしまいましょう。ガイドでは、Launchpadのさまざまな機能を活用して進めていきます。すでにアカウントをお持ちであれば、次のセクションへ進んでください。",
    "To set up a Launchpad account:": "Launchpadアカウントのセットアップ",
    "Go to <a href=\"https:\/\/launchpad.net\">Launchpad.net<\/a>. Click on <strong>Log in\/Register<\/strong> in the top right corner of the page.": "<a href=\"https:\/\/launchpad.net\">Launchpad.net<\/a> へアクセスし、右上の <strong>Log in\/Register<\/strong> をクリックしてください。",
    "Select <strong>I am a new Ubuntu One user<\/strong> on the left side.": "左側の <strong>I am a new Ubuntu One user<\/strong> を選択してください。",
    "Enter your information and click <strong>Create account<\/strong>.": "あなたの情報を入力して <strong>Create account<\/strong> をクリックしてください。",
    "After you have verified your email your Launchpad account is ready, so let's move on to the next section. Remember, we're not going to go over all the little details in this book. We'll come back to Launchpad a few times later on to use specific features, but if you really want to learn everything there is to know about the website you should read their user guide. Onward!": "Eメールアドレスの検証の後、Launchpad アカウントは利用できるようになります。次のセクションに進みましょう。覚えておいてください、このガイドにすべての詳細を書くつもりはありません。私たちは、後で何回か、ある機能を使用するために Launchpad に戻ってきます。\nしかし、あなたが本当にすべてを知りたい場合、Launchpad のユーザーガイドをお読みください。次に進みましょう！",
    "Bazaar": "",
    "elementary projects are hosted on Launchpad. To interact with the code on Launchpad, we use a distributed <a href=\"http:\/\/en.wikipedia.org\/wiki\/Revision_control\">revision control system<\/a> called Bazaar. This allows multiple developers to collaboratively develop and maintain the code while keeping track of each revision along the way.": "elementary のプロジェクトは Launchpad で公開されています。\nLaunchpad でのコードを管理するために、私たちは Bazaar と呼ばれる分散型の<a href=\"http:\/\/en.wikipedia.org\/wiki\/Revision_control\">リビジョン管理システム<\/a>を使用しています。\nこれは複数の開発者が協力し合って開発し、それぞれの修正を管理しながらコードをメンテナンスすることを可能にするものです。",
    "If you're ready, let's get you set up to use Bazaar:": "準備ができたら、 Bazaar をセットアップしましょう。",
    "Open the Terminal. You'll be interacting with Bazaar through a simple terminal-based program called bzr.": "「ターミナル」を開きます。Bazaar には、bzr と呼ばれる、シンプルなCUIベースのプログラムを通してアクセスします。",
    "You'll need to install bzr. Simply type the following into the Terminal:": "まず bzr をインストールする必要があります。端末へ次のように打ってください。",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http:\/\/en.wikipedia.org\/wiki\/Secure_Shell\">SSH<\/a> key pair (a kind of fingerprint for your computer) and import the public key in Launchpad. Type the following in terminal (note that <code>C<\/code> stands for comment and that you can alter its value as you wish, but it's a requirement for Launchpad):": "認証して安全にコードを転送するために、<a href=\"http:\/\/en.wikipedia.org\/wiki\/Secure_Shell\">SSH<\/a>鍵のペア(コンピュータの指紋のようなもの)を生成し、Launchpad にインポートする必要があります。端末を開き、次のように入力してください (注: <code>C<\/code>はコメントを表し、好きなように変えても構いませんが、Launchpad には必須です)。",
    "When prompted, press Enter to accept the default file name for your key.": "促されたら、 Enter キーを押して作った鍵の名前を承諾します。",
    "Next, enter a password to protect your SSH key. You’ll be asked to enter it again, just to make sure you didn’t make any typos. You'll need to enter this password any time you try to push code to launchpad so don't forget it! Optionally, you can just press enter and use no password, but this is obviously less secure.": "次に、あなたの SSH 鍵を保護するためのパスワードを入力します。タイプミスをしていないことを確認するために、もう一度それを入力するように求められます。 Launchpad にコードを push しようとするときはいつもこのパスワードを入力する必要があります。忘れないようにしてください！ 必要に応じて、エンターだけを押すことでパスワードを使わないようにすることもできますが、これは明らかに安全性が低くなります。",
    "Now, we're going to tell Launchpad about your SSH key. Open your SSH key with the following command, then copy the text from the file that opens in Scratch:": "では、SSH 鍵を Launchpad に伝えましょう。以下のコマンドで SSH 鍵を開き、その後、 Scratch で開かれたファイルのテキストをコピーしてください。",
    "Visit <a href=\"https:\/\/launchpad.net\/people\/+me\/+editsshkeys\">your SSH keys page<\/a>. Paste the text in the textbox and click <strong>Import public key<\/strong>.": "<a href=\"https:\/\/launchpad.net\/people\/+me\/+editsshkeys\">your SSH keys page<\/a> にアクセスしてください。テキストボックスにテキストをペーストして、 <strong>Import public key<\/strong> をクリックしてください。",
    "Now you can connect bzr to your Launchpad account. You'll need your launchpad id, which you can look up at <a href=\"https:\/\/launchpad.net\/people\/+me\">your launchpad page<\/a>.": "これで、 bzr をあなたの Launchpad アカウントに接続することができます。<a href=\"https:\/\/launchpad.net\/people\/+me\">your launchpad page<\/a> で確認ができるあなたの launchpad id が必要になります。",
    "Done! Now you can download source code hosted on Launchpad and upload your own code. We'll revisit using bzr in a minute, but for now you're logged in. For a more in-depth introduction to bzr, you can also check the complete <a href=\"http:\/\/doc.bazaar.canonical.com\/latest\/en\/user-guide\">Bazaar User Guide<\/a> provided by Canonical.": "完了！これで Launchpad でホストされているソースコードをダウンロードしたり独自のコードをアップロードしたりできます。私たちは bzr を使用してすぐに再度もどってきますが、今あなたはログインしています。より詳細な bzr の概要については、Canonical が提供する、完全な <a href=\"http:\/\/doc.bazaar.canonical.com\/latest\/en\/user-guide\">Bazaar User Guide<\/a> を確認することもできます",
    "Developer \"SDK\"": "",
    "At the time of this writing, elementary doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "この記事の執筆時点では、elementary は Android や iOS のような完全な SDK を持っていません。しかし幸いにも、私たちがコードを書き始めるために必要なものはいくつかのシンプルなアプリだけです。",
    "Scratch": "",
    "The first piece of our simple \"SDK\" is the code editor Scratch. This comes by default with elementary OS. It comes with some helpful features like syntax highlighting, auto-save, and the Folder Manager extension. There are other extensions for Scratch as well, like the Outline, Terminal or Devhelp extensions. Play around with what works best for you.": "",
    "Terminal": "ターミナル",
    "We’re going to use Terminal in order to compile our code, push revisions to Bazaar (bzr), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "私たちは、コードをコンパイルしたり、Bazaar (bzr) に修正をプッシュしたり、その他役に立つことをしたりするために、ターミナルを使います。このガイドではターミナルコマンドを発行することがありますが、特に断りのない限り、全てのコマンドは、ホームフォルダ内の \"Projects\" ディレクトリから実行されていることを前提とします。 elementary にはデフォルトではそのフォルダがないため、手動で作成する必要があります。",
    "Open Terminal and issue the following command:": "ターミナルを開いて、次のコマンドを発行してください:",
    "Development Libraries": "開発ライブラリ",
    "In order to build apps you're going to need their development libraries. We can fetch a basic set of libraries and other development tools with the following terminal command:": "アプリをビルドするためには、アプリの開発ライブラリが必要です。次のターミナルコマンドでライブラリの基本セットをと開発ツールを取得できます。",
    "And with that, we're ready to dive into development! Let's move on!": "さて、これで開発の準備は整いました! 次へ進みましょう。",
    "Hello World": "",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a bzr branch. Let’s begin.": "ここで作成する最初のアプリは基本的で一般的な \"Hello World\" です。ソースコードを格納するためのフォルダの作成から、最初のアプリのコンパイル、 bzr のブランチへのプロジェクトのプッシュまでの手順をご説明します。はじめましょう。",
    "Setting Up": "セットアップ",
    "Apps on elementary OS are organized into standardized directories contained in your project's \"root\" folder. Let's create a couple of these to get started:": "",
    "Create your root folder called \"gtk-hello\"": "",
    "Create a folder inside that one called \"src\". This folder will contain all of our source code.": "",
    "Later on, We'll talk about adding other directories like \"po\" and \"data\". For now, this is all we need.": "",
    "Gtk.Window and Gtk.Button": "Gtk.Window と Gtk.Button",
    "Now what you've been waiting for! We're going to create a window that contains a button. When pressed, the button will display the text \"Hello World!\" To do this, we're going to use a widget toolkit called GTK+ and the programming language Vala. Before we begin, we highly recommend that you do not copy and paste. Typing each section manually will help you to practice and remember. Let's get started:": "",
    "Create a new file in Scratch and save it as \"gtk-hello.vala\" inside your \"src\" folder": "",
    "First we must create the main function of our new GTK app. Type the following in your \"gtk-hello.vala\".": "",
    "Now, that we've initialized Gtk, we'll create a new window and declare a few properties of this window. You'll notice that most of these property names are pretty straightforward. Try to guess what each one does and we'll explain in a second. Type the following after the <code>Gtk.init<\/code> line, but before the last bracket:": "今、私たちは Gtk を初期化したので、新しいウィンドウを作成し、このウィンドウのいくつかのプロパティを宣言します。これらのプロパティ名のほとんどは非常に簡単であることに気がつくでしょう。それぞれが何をするかを推測してみてください、私たちは次に説明します。<code>Gtk.init<\/code> 行の次、最後の括弧の前に、次のように入力してください:",
    "The first line creates a new <code>Gtk.Window<\/code> called \"window\". The second line sets the window title that you see at the top of the window. Next, we create a margin inside that window so that widgets don't bump up against the window's edge. Then we tell the window manager that we want to place this window in the center of the screen instead of in the default position (which is usually the top left). We also must give our window a default size so that is does not appear too small for the user to interact with it. Finally, we explain what to do with this process if the main window is closed; In our case, we want to quit.": "",
    "Now that we've defined a nice window, let's put a button inside of it. After our window stuff (but before <code>Gtk.main<\/code> line), leave a new line and then type the following:": "今、私たちは素敵なウィンドウを定義したので、その中にボタンを配置してみましょう。私たちのウィンドウのものの後 (ただし<code>Gtk.main<\/code>の行の前) に、新しい行を残し、その後、次のように入力します:",
    "Any ideas about what happened here? We've created a new <code>Gtk.Button<\/code> with the label \"Click me!\". Then we've said that if this button is clicked, we want to change the label to say \"Hello World!\" instead. We've also said that we want to make the button insensitive; We do this because clicking the button again has no visible effect. Finally, we add the button to our <code>Gtk.Window<\/code> and declare that we want to show all of the window's contents.": "",
    "Compiling and Running your code": "コンパイルとコードの実行",
    "Ready to test it out? Fire up your terminal and make sure you're in \"~\/Projects\/gtk-hello\/src\". Then execute the following commands to compile and run your first Gtk app:": "",
    "Did it work? If so, congratulations! If not, read over your source code again and look for errors. Also check the output of your terminal. Usually there is helpful output that will help you track down your mistake.": "動作しましたか？もしそうなら、おめでとうございます！そうではない場合、もう一度あなたのソースコードを読み返してエラーを探してください。またターミナルの出力を確認してください。たいてい、ミスの追跡を手助けする、役立つ出力があります。",
    "Pushing to Launchpad": "Launchpadへのプッシュ",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code. So let's take a minute to revisit our friend <code>bzr<\/code>:": "なにか重要なことをしたあとは、コードをプッシュすることを覚えておく必要があります。あなたのコードをすぐにプッシュしないと意図しないフォークにつながったり、多すぎるコードを一度にプッシュするとあなたのコードによってもたらされたバグを追跡することが難しくなるので、すぐにプッシュするのは共同開発では特に重要です。では、少し時間を割いて、私たちの友人 <code>bzr<\/code> にもう一度会いに行きましょう。",
    "Open Terminal and make sure you're in your project's root directory \"~Projects\/gtk-hello\"": "",
    "With these commands, we've told <code>bzr<\/code> to track this folder as a branch, that we'd like to track revisions on the file \"gtk-hello.vala\", we've committed our first revision and explained what we did in the revision, and then we've told <code>bzr<\/code> to push your code to Launchpad in your <a href=\"https:\/\/code.launchpad.net\/people\/+me\/\">junk folder<\/a>.": "",
    "Victory!": "おめでとう！",
    "Let's recap what we've learned to do in this first section:": "この最初のセクションで学んだことを復習しましょう:",
    "We created a new project containing a \"src\" folder": "",
    "We created our main vala file and inside it we created a new <code>Gtk.Window<\/code> and <code>Gtk.Button<\/code>": "メインの vala ファイルを作成し、その中に新しい <code>Gtk.Window<\/code> と　<code>Gtk.Button<\/code> を作成しました。",
    "We built and ran our app to make sure that everything worked properly": "すべてが正常に動くことを確認するために、アプリをビルドして実行しました。",
    "Finally, we commited our first revision and pushed code to Launchpad": "最後に、初回リビジョンをコミットして Launchpad にコードをプッシュしました。",
    "Feel free to play around with this example. Make the window a different size, set different margins, make the button say other things. When you're comfortable with what you've learned, go on to the next section.": "この例で気軽に遊んでみてください。ウィンドウを異なるサイズにしたり、異なる余白を設定したり、ボタンに何か別のことを言わせてみてください。学んだことに慣れたら、次のセクションに進んでください。",
    "A Note About Libraries": "ライブラリに関する注意",
    "Remember how when we compiled our code, we used the <code>valac<\/code> command and the argument <code>--pkg gtk+-3.0<\/code>? What we did there was make use of a \"library\". If you're not familiar with the idea of libraries, a library is a collection of methods that your program can use. So this argument tells <code>valac<\/code> to include the GTK+ library (version 3.0) when compiling our app.": "",
    "In our code, we've used the <code>Gtk<\/code> \"Namespace\" to declare that we want to use methods from GTK+ (specifically, <code>Gtk.Window<\/code> and <code>Gtk.Button.with_label<\/code>). Notice that there is a hierarchy at play. If you want to explore that hierarchy in more detail, you can <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Button\">check out Valadoc<\/a>.": "",
    "Our First App": "初めてのアプリケーションを作る",
    "In the previous chapter, we created a simple \"Hello World!\" app to show off our vala and Gtk skills. But what if we wanted to share our new app with a friend? They'd have to know which packages to include with the <code>valac<\/code> command we used to build our app, and after they'd built it they'd have to run it from the build directory like we did. Clearly, we need to do some more stuff to make our app fit for people to use, to make it a <em>real<\/em> app.": "",
    "Hello (again) World!": "",
    "To create our first real app, we're going to need all the old stuff that we used in the last example. But don't just copy and paste! Let's take this time to practice our skills and see if we can recreate the last example from memory. Additionally, now that you have the basics, we're going to get a little more complex and a little more organized:": "これから初めての本物のアプリケーションを作りますが、例に漏れず、私たちも前章の例を再び持ち出してくる必要があります。でもちょっと待って、コピーアンドペーストはやめましょう！今はスキル向上のために私たちが先ほど作った例を、記憶だけを頼りにもう一度作ってみる練習をしてみましょう。さて、あなたはすでに基本を学んでいます。せっかくなので、もう少し複雑で組織化されたものを作ってみましょう:",
    "Create a new folder in \"~\/Projects\" called \"hello-world\" and put our last project in that folder. Now create a new folder inside \"~\/Projects\/hello-world\" called \"hello-again\". We're doing this because our first \"gtk-hello\" and \"hello-again\" are two branches of the same \"hello-world\" project. As you get more into collaborative development, you're going to have lots of branches. This method will help you stay organized.": "",
    "Now go into \"hello-again\" and create our directory structure including the \"src\" folder.": "",
    "Create \"hello-again.vala\" in the \"src\" folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now, just copy and paste this, changing out <code>YourName<\/code> for your actual name:": "",
    "Now, let's create our main function, a <code>Gtk.Window<\/code>, and set the window's default properties. Refer back to the last chapter if you need a refresher.": "それでは、main 関数を作り、 <code>Gtk.Window<\/code> でデフォルトプロパティを設定しましょう。もし必要であれば、前章に戻ってください。",
    "For the sake of time let's just put a <code>Gtk.Label<\/code> instead of a <code>Gtk.Button<\/code>. We don't need to try to make the label do anything when you click it.": "今回は時間の都合で、<code>Gtk.Button<\/code> の代わりに  <code>Gtk.Label<\/code> を使うことにします。ラベルをクリックした際、何か動作をするように仕込む必要はありません。",
    "Don't forget to add it to your window and show the window's contents:": "そして、これをウィンドウの中身に追加するのを忘れないでくださいね。",
    "Build \"hello-again.vala\" just to make sure it all works. If something goes wrong here, feel free to refer back to the last chapter and remember to check your terminal output for any hints.": "",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, push your first revision with <code>bzr<\/code>:": "ブランチを初期化し、プロジェクトにファイルを追加し、コミットメッセージを書きましょう。方法は前章と同じです。最後に、<code>bzr<\/code> コマンドを使って最初のリビジョンをプッシュしましょう。",
    "Everything working as expected? Good. Now, let's get our app ready for other people to use.": "すべてうまくいきましたか？ OK、ではこのアプリを他の人が使えるようにしましょう。",
    "The .desktop File": ".desktop ファイル",
    "Every app comes with a .desktop file. This file contains all the information needed to display your app in the Applications menu and in the Dock. Let's go ahead and make one:": "すべてのアプリには .desktop ファイルが付属しています。このファイルには、アプリケーションメニューとドックにアプリを表示するために必要となるすべての情報が含まれています。ここでひとつ作ってみましょう:",
    "In your project's root, create a new folder called \"data\".": "",
    "Create a new file in scratch and save it in the \"data\" folder as \"hello.desktop\".": "",
    "Type the following into \"hello.desktop\". Like before, try to guess what each line does.": "",
    "The first line declares that this file is a \"Desktop Entry\" file. The next three lines are descriptions of our app: The branded name of our app, a generic name for our app, and a comment that describes our app's function. Next, we categorize our app. Then, we say what command will execute it. Finally, we give our app an icon (a generic one included in elementary OS) and let the OS know that this isn't a command line app. For more info about crafting .desktop files, check out <a href=\"\/docs\/human-interface-guidelines\/app-launchers\">this HIG entry<\/a>.": "",
    "Finally, let's add this file to bzr and commit a revision:": "そしてこのファイルを bzr に追加してリビジョンをコミットしましょう。",
    "Legal Stuff": "法律に関するもの",
    "Since we're going to be putting our app out into the wild, we should include some information about who wrote it and the legal usage of its source code. For this we need two new files in our project's root folder: AUTHORS and COPYING.": "私たちがしようとしているのは、このアプリを野に解き放つことです。そこで、アプリは誰が作ったのか、ソースコードの法的な取り扱い方はどうなるのかを示しておくべきでしょう。これをするためには、プロジェクトのルートフォルダに AUTHORS と COPYING の2つのファイルを追加します。",
    "Authors": "",
    "The AUTHORS file is pretty straightforward. This file contains your name and email address along with the name and email address of anyone who helped you make your app. It typically looks like this:": "AUTHORS ファイルは非常に簡単です。このファイルには、アプリを開発するのに携わった人すべての名前とＥメールアドレスを、あなたのものも含め記載します。例えば、こんな感じになります。",
    "Copying": "",
    "The COPYING file contains a copy of the license that your code is released under. For elementary apps this is typically the <a href=\"http:\/\/www.gnu.org\/licenses\/quick-guide-gplv3.html\">GNU General Public License<\/a> (GPL). Remember the header we added to our source code? That header reminds people that your app is licensed and it belongs to you. You can choose other licenses like the MIT license as well, but for this example let's stick to the <a href=\"http:\/\/www.gnu.org\/licenses\/gpl-3.0.txt\">GPL<\/a>.": "COPYING ファイルはコードが採用しているライセンスのコピーになります。elementary のアプリでは、通常 <a href=\"http:\/\/www.gnu.org\/licenses\/quick-guide-gplv3.html\">GNU General Public License<\/a> (GPL) を使います。ソースコードに追加したヘッダーを覚えていますか？あれはアプリがライセンスされていること、そしてあなたが作ったものであることを証明するものなのです。もちろん、MIT ライセンスなどの他のライセンスを選ぶこともできますが、ここでは <a href=\"http:\/\/www.gnu.org\/licenses\/gpl-3.0.txt\">GPL<\/a> を使いましょう。",
    "Mark Your Progress": "進捗のマーク",
    "Did you remember to add these files to bzr and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to Launchpad. Keep in mind that this acts as a backup system as well; when we push our work to Launchpad, we know it's safe and we can always revert to a known good revision if we mess up later.": "さて、作ったファイルを bzr に追加して、リビジョンをコミットすることを覚えておられますか？新しいファイルを追加したり、大きな変更をしたりするときは、その度に新しいリビジョンをコミットし、 Launchpad にプッシュするのをお勧めします。なぜなら、これはバックアップとしてうまく機能するからです。もし将来の変更の結果うまく動かなくなったとしても、最後にうまくいっていたバージョンにいつでも戻すことができるわけです。",
    "Now that we've got all these swanky files laying around, we need a way to tell the computer what to do with them. Ready for the next chapter? Let's do this!": "これで必要なファイルは揃いました。次に私たちはこのファイルで何をするかをコンピュータに伝えてやらないといけません。準備はいいですか？次に進みましょう！",
    "The Build System": "ビルドシステム",
    "The next thing we need is a build system. The build system that we're going to be using is called <a href=\"http:\/\/www.cmake.org\">CMake<\/a>. We already installed the <code>cmake<\/code> program at the beginning of this book when we got the build dependencies for Granite Demo. What we're going to do in this step is create the files that tell Cmake how to install your program. This includes all the rules for building your source code as well as correctly installing your .desktop file and the binary app that results from the build process.": "次に必要なのはビルドシステムです。ここで私たちが使うのは <a href=\"http:\/\/www.cmake.org\">CMake<\/a> と呼ばれているものです。このガイドの最初ですでに <code>cmake<\/code> は Granite Demo の依存関係としてインストールしてあります。ここで行うのは、 Cmake がどのようにプログラムをインストールするのかを伝えるファイルを作ることです。このファイルでは、ソースコードをビルドし、 .desktop ファイルとビルドの結果できたバイナリをインストールするルールを記述します。",
    "Create a new file in your project's root folder called \"CMakeLists.txt\". Since this file is a bit long, we've included some comments along the way to explain each section. You don't have to copy those, but type the rest into that file:": "",
    "And you're done! Your app now has a real build system. Don't forget to add these files to bzr and push to launchpad. This is a major milestone in your app's development!": "これで完了です！アプリはビルドシステムを手に入れました。このファイルを忘れずに bzr に追加し、 Launchpad にプッシュしてください。アプリ開発の大きなマイルストーンです！",
    "Building and Installing with CMake": "Cmake を使ったビルドとインストール",
    "Now that we have a build system, let's try it out:": "早速ビルドシステムを試してみましょう。",
    "Create a new folder in your project's root folder called \"build\"": "",
    "Change into this directory in terminal and execute the following command:": "端末でこのディレクトリに入って、次のコマンドを実行します。",
    "This command tells cmake to get ready to build our app using the prefix \"\/usr\". The <code>cmake<\/code> command defaults to installing our app locally, but we want to install our app for all users on the computer.": "",
    "Build your app with <code>make<\/code> and if successful install it with <code>sudo make install<\/code>:": "<code>make<\/code> でアプリをビルドし、成功すれば <code>sudo make install<\/code> でインストールします。",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the \"build\" folder to your bzr branch and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the \"build\" folder and it won't mess up our app's source code.": "",
    "We'll revisit CMake again later to add some more complicated behavior, but for now this is all you need to know to give your app a proper build system. If you want to explore CMake a little more on your own, you can always check out <a href=\"http:\/\/www.cmake.org\/cmake\/help\/documentation.html\">CMake's documentation<\/a>.": "私たちはさらに複雑なことをするために再度 CMake を使うことになりますが、アプリにあったビルドシステムを作るために知っておくことは今のところもうありません。もし CMake について詳しく知りたい方は、<a href=\"http:\/\/www.cmake.org\/cmake\/help\/documentation.html\">CMake のドキュメント<\/a> もご覧ください。",
    "Review": "おさらい",
    "Let's review all we've learned to do:": "これまでに扱ったことをまとめてみましょう。",
    "Create a new Gtk app using <code>Gtk.Window<\/code>, <code>Gtk.Button<\/code>, and <code>Gtk.Label<\/code>": "<code>Gtk.Window<\/code>、 <code>Gtk.Button<\/code>、 <code>Gtk.Label<\/code> を使って新しいアプリを作る",
    "Keep our projects organized into branches": "プロジェクトをブランチで管理する",
    "License our app under the GPL and declare our app's authors in a standardized manner": "標準的な方法でアプリに GPL ライセンスを適用し、アプリの開発者を明記する",
    "Create a .desktop file that tells the computer how to display our app in the Applications menu and the Dock": "アプリケーションメニューとドックにアプリを表示するための .desktop ファイルを作成する",
    "Set up a CMake build system that contains all the rules for building our app and installing it cleanly": "CMake ビルドシステムを設定し、ビルドとクリーンインストールのためのルールを明記する",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to branch your project from launchpad and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "たくさんありましたね！今あなたは、elementary OS のアプリ開発初心者になろうとしています。ここで少し時間を取って、これまでの例をいじってみてください。ファイル名を変えて同じようにビルド・インストールを行ったり、他の開発者に Launchpad でプロジェクトをブランチしてクリーンインストールしてもらったりしてみてください。これができれば、ついに最初のアプリを配布したことになります！準備ができたら、次のセクションに進みましょう。パッケージ化です。",
    "Adding Translations": "翻訳を追加する",
    "Now that you've learned about CMake, the next step is to make your app able to be translated to different languages. The first thing you need to know is how to convert strings in your code into translatable strings. Here's an example:": "CMake が使えるようになったら、次はアプリを他の言語でも使えるようにすることです。まずはじめに、プログラムの中に出てくる文字列を、翻訳ができる形式に書き換えてやる方法をお教えします。次の例を見てください。",
    "See the difference? We just added <code>_()<\/code> around the string! Well, that was easy!": "違いがわかりましたか？ただ単に、 <code>_()<\/code> を文字列の周りに付け加えただけです。簡単ですね！",
    "Go back to your project and make all your strings translatable by adding <code>_()<\/code>": "早速、プロジェクトの他の全部の文字列にも  <code>_()<\/code> を追加して、翻訳可能にしましょう。",
    "Add the following lines in the \"CMakeLists.txt\" file you created a moment ago:": "",
    "Create a directory named \"po\" on the root folder of your project. Inside of your po directory you will need to create another CMakeLists.txt file. This time, it's contents will be:": "",
    "On your build directory execute the following commands:": "そして build ディレクトリで次のコマンドを実行してください。",
    "Don't forget to add this new directory and it's contents to bzr": "やはり、新しいディレクトリとその中身を bzr に追加してください。",
    "That's it! CMake will automatically add all the string marked with <code>_()<\/code> into a .pot template file, and a file for each available language where you'll place the translatable strings.": "これだけです！ CMake は自動的に <code>_()<\/code> でマークされた文字列を .pot テンプレートファイルと翻訳済みの文字列を書き込む言語別のファイルとに追加してくれます。",
    "Packaging": "パッケージング",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, hosted in a Personal Package Archive (PPA) on Launchpad. This will allow normal people to install your app and even get updates for it in Update Manager.": "ビルドシステムを持つことは素晴らしいのですが、アプリはまだ一般ユーザー向けの準備ができていません。私たちは、ターミナルを使用することなく、アプリをビルドしてインストールできるようにしたいのです。そこで必要なのはアプリのパッケージ化です。これを行うために、私たちは elementary OS の上でDebianのパッケージ形式 (.deb) を使用します。このセクションでは、 Launchpad 上の個人パッケージアーカイブ (PPA) でホストされた .deb ファイルとしてアプリをパッケージ化する方法をお教えします。これで、普通の人がアプリをインストールしたりアップデートマネージャでそのアップデートを取得することもできるようになります。",
    "Practice Makes Perfect": "備えあれば憂いなし",
    "If you want to get really good really fast, you're going to want to practice. Repetition is the best way to commit something to memory. So let's recreate our entire Hello World app again <em>from scratch<\/em>:": "もし本当に早く勉強したいなら、練習が必要です。そして、繰り返すことは何かを覚えるための最良の方法です！そこで、この Hello World アプリを<em>最初から<\/em>作り直してみましょう。",
    "Create a new branch folder \"hello-packaging\"": "",
    "Set up our directory structure including the \"src\" and \"data\" folders.": "",
    "Add your Authors, Copying, .desktop, and source code.": "Authors、Copying、.desktop、そしてソースコードを追加してください。",
    "Now set up the CMake build system.": "次に CMake ビルドシステムを設定します。",
    "Test everything!": "さあ、うまくいくでしょうか？",
    "Did you commit and push to launchpad for each step? Keep up these good habits and let's get to packaging this app!": "それぞれのステップで Launchpad にコミットしてプッシュしましたか？この習慣を続けて、アプリのパッケージングに入りましょう！",
    "Debian Control": "Debian コントロールファイル",
    "Now it's time to create the rules that will allow your app to be built as a .deb package. Let's dive right in:": ".deb パッケージ向けに私たちのアプリをビルドするルールを作りましょう。次のようにします。",
    "Like CMake, elementary maintains a simple version of the \"debian\" folder that contains all the files we need for packaging. Let's grab a copy of that with bzr:": "",
    "Copy the \"debian\" folder from that branch into your \"hello-packaging\" folder.": "",
    "Open the file called \"changelog\" and make it look like below:": "",
    "The first line contains your app's binary name, version, OS codename, and how urgently your package should be built. Remember that your app's binary name is lowercase and does not contain spaces. After the <code>*<\/code> is a list of your changes. Finally, you include your name, email address, and the date. For more information about the debian changelog, make sure to read the <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/ch-source.html#s-dpkgchangelog\">documentation<\/a>.": "最初の行はアプリのバイナリ名、バージョン、OS コードネーム、そしてビルドの優先度を記述してあります。バイナリ名は小文字であり、スペースを含まないことに注意してください。 <code>*<\/code> の後には、変更点のリストが続きます。最後に、あなたの名前、Eメールアドレス、日付を入れれば完成です。Debian の changelog に関して詳しくは、 <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/ch-source.html#s-dpkgchangelog\">ドキュメント<\/a> を参照してください。",
    "Open the file called \"control\" and make it look like below:": "",
    "Open the file called \"copyright\". We only need to edit what's up top:": "",
    "That wasn't too bad right? We'll set up more complicated packaging in the future, but for now this is all you need. If you'd like you can always read <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/\">more about Debian packaging<\/a>.": "難しくありませんね？将来はもっと複雑なパッケージングをすることになるかもしれませんが、いまはこれで十分です。<a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/\">Debian のパッケージングについてのドキュメント<\/a> も、いつでもご覧いただけます。",
    "Launchpad Recipes": "",
    "Now that we have our \"debian\" folder in order, it's time to go to launchpad and create a recipe: instructions what code to build, how often to build it, and where to put the resulting packages.": "",
    "<a href=\"https:\/\/code.launchpad.net\/people\/+me\/+junk\/hello-packaging\/+new-recipe\">Click this link<\/a> or go to Launchpad, find your hello-packaging branch, then select <strong>Create packaging recipe<\/strong>.": "<a href=\"https:\/\/code.launchpad.net\/people\/+me\/+junk\/hello-packaging\/+new-recipe\">このリンクをクリックする<\/a>か Launchpad に行って、hello-packaging ブランチを見つけ、<strong>Create packaging recipe<\/strong> を選択してください。",
    "Read through the options available to you. You can go ahead and keep the defaults for Name, Description (it's blank), Owner, Daily builds, and PPA but you can also customize a bit if you'd like.": "オプションに目を通してください。Name、Description (デフォルトでは空)、Owner、Daily builds、PPA のオプションはデフォルトのままでも構いませんし、変更することもできます。",
    "When you get down to a set of checkboxes with the header \"Default distribution series\", make sure you select \"Trusty\". elementary OS Freya shares it's core with Ubuntu Trusty, so packages built on Trusty will also work on Freya.": "",
    "For recipe text, we're going to change it ever so slightly to conform better with the official Debian rules. Change out the first line for this one:": "recipe text の欄では、Debian 公式の規則からほんのすこしだけ変更を加えます。最初の行を次のように編集してください。",
    "Notice that this is ever so slightly different from the default line which includes <code>{debupstream}-0~{revno}<\/code> instead of <code>{debupstream}+r{revno}-0<\/code>.": "最初と比較すると、 <code>{debupstream}-0~{revno}<\/code> が <code>{debupstream}+r{revno}-0<\/code> になったという小さな変更です。",
    "When you're happy with the options you've chosen, select <strong>Create Recipe<\/strong>.": "選んだオプションに満足したら、 <strong>Create Recipe<\/strong> を選択してください。",
    "Now that you've created a recipe, you only have to wait until Launchpad finishes the build! If everything goes as planned, your new PPA will contain a packaged app which other people can install and run with ease. Additionally, anyone using your PPA will be able to get updates for your app if you upload a new version. We'll talk more about how to do that later.": "レシピが作成されましたので、後は Launchpad がビルドをしてくれるのを待つのみです！うまくいけば、新しい PPA には他の人も簡単にインストールできるようになったパッケージ化されたアプリがあるはずです。さらに、この PPA を使っている人は新しいバージョンがアップロードされたときに更新を受け取れるようになります。これについてはこの後詳しくお話ししましょう。",
    "Creating Layouts": "レイアウトを作成する",
    "Now that you know how to code, build, and distribute an app using Vala, Gtk, CMake, and Launchpad PPAs, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window<\/code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid<\/code>.": "Vala、Gtk、CMake、Launchpad PPAを使ってアプリをコーディング、ビルド、配布する方法を知ったので、あなたのアプリを本当に有用なものにする方法をもう少し学びましょう。私たちが学ぶ必要がある最初のことは、ウインドウにウィジェットをレイアウトする方法です。しかし、私たちには基本的な問題があります。<code>Gtk.Window<\/code>には1つのウィジェット(1つの\"子\")しか追加できません。では、1つのウィンドウの中に複雑なレイアウトを作るためにはどのようにすればよいでしょうか？複数の子を含むことができるウィジェットを追加する必要があります。これらのウィジェットの一つが<code>Gtk.Grid<\/code>です。",
    "Widgets as Subclasses of Other Widgets": "他のウィジェットのサブクラスとしてのウィジェット",
    "Before we get into <code>Gtk.Grid<\/code>, let’s stop for a second and take some time to understand Gtk a little better. At the lower level, Gtk has classes that define some pretty abstract traits of widgets such as <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Container\"><code>Gtk.Container<\/code><\/a> and <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Orientable\"><code>Gtk.Orientable<\/code><\/a>. These aren’t widgets that we’re going to use directly in our code, but they’re used as building blocks to create the widgets that we do use. It’s important that we understand this, because it means that when we understand how to add children to a <code>Gtk.Container<\/code> like <code>Gtk.Grid<\/code>, we also understand how to add children to a <code>Gtk.Container<\/code> like <code>Gtk.Toolbar<\/code>. Both Grid and Toolbar are widgets that are subclasses of the more abstract class <code>Gtk.Container<\/code>.": "",
    "If you want to understand more about these widgets and the parts of Gtk that they subclass, jump over to <a href=\"https:\/\/valadoc.org\/\">Valadoc<\/a> and search for a widget like <code>Gtk.Grid<\/code>. See that big tree at the top of the page? It shows you every component of Gtk that <code>Gtk.Grid<\/code> subclasses and even what those components subclass. Having a lower level knowledge of Gtk will help you to implement widgets you haven’t worked with before since you will understand how their parent classes work.": "",
    "Gtk.Grid": "",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid<\/code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to Launchpad, and build a PPA in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window<\/code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "道をそれていますが、ウィンドウと<code>Gtk.Grid<\/code>に戻りましょう。 あなたはもうマスター開発者ですから、CMakeで新しいプロジェクトをセットアップし、Launchpad にプッシュして、睡眠中にPPAをビルドすることができるでしょう。あなたが練習をしたいなら、どうぞ、それをすべてもう一度やってください。そうでなければ、テスト目的のために、ローカルで遊んでターミナルからビルドするのが便利かもしれません。ですから、中に何も含まない<code>Gtk.Window<\/code>をコーディングして、それがビルドされることを確認してください。準備は良いですか？ グリッドを追加しましょう。",
    "Just like when we add a Button or Label, we need to create our <code>Gtk.Grid<\/code>. As always, don’t copy and paste! Practice makes perfect. We create a new Gtk.Grid like this:": "ボタンやラベルを追加するときのように、<code>Gtk.Grid<\/code>を作成する必要があります。いつものように、コピー＆ペーストしないでください！練習は完璧にします。このように新しい Gtk.Grid を作成します。",
    "Remember that Button and Label accepted an argument (a String) in the creation method (that’s the stuff in parentheses and quotes). As shown above, <code>Gtk.Grid<\/code> doesn’t accept any arguments in the creation method. However, you can still change the grid’s properties (like <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Orientation\">orientation<\/a>) as we did on the second line. Here, we’ve declared that when we add widgets to our grid, they should stack vertically.": "",
    "Let’s add some stuff to the Grid:": "グリッドにいくつかのものを追加しましょう。",
    "Super easy stuff, right? We can add the grid to our window using the same method that we just used to add widgets to our grid:": "とても簡単、ですよね？ グリッドにウィジェットを追加するのと同じ方法を使用して、グリッドをウィンドウに追加することができます。",
    "Now build your app and see what it looks like. Since we’ve given our grid a <code>Gtk.Orientation<\/code> of <code>VERTICAL<\/code> the labels stack up on top of each other. Try creating a <code>Gtk.Grid<\/code> without giving it an orientation. By default, <code>Gtk.Grid<\/code>’s orientation is horizontal. You really only ever have to give it an orientation if you need it to be vertical.": "アプリをビルドし、それがどのように見えるかを確認してください。グリッドの<code>Gtk.Orientation<\/code>に<code>VERTICAL<\/code>を与えているので、ラベルはそれぞれの上部に積み重なります。向きを与えずに<code>Gtk.Grid<\/code>を作成してみてください。デフォルトでは、<code>Gtk.Grid<\/code>の向きは水平です。もしあなたがそれを垂直にする必要があるならば、あなたは本当にそれに向きを与えなければなりません。",
    "Functionality in Gtk.Grid": "Gtk.Grid の機能",
    "Okay, so you know all about using a <code>Gtk.Grid<\/code> to pack multiple children into a Window. What about using it to lay out some functionality in our app? Let’s try building an app that shows a message when we click a button. Remember in our first “Hello World” how we changed the label of the button with <code>button.clicked.connect<\/code>? Let’s use that method again, but instead of just changing the label of the button, we’re going to use it to change an empty label to a message.": "さて、あなたは<code>Gtk.Grid<\/code>を使って複数の子を1つのウィンドウにまとめることについて知っています。アプリにいくつかの機能をレイアウトすることについてはどうですか？ボタンをクリックしたときにメッセージを表示するアプリを構築してみましょう。最初の“Hello World”では、ボタンのラベルを<code>button.clicked.connect<\/code>を使ってどのように変更したかを覚えていますか？そのメソッドをもう一度使ってみましょう。ボタンのラベルを変更するだけでなく、空のラベルをメッセージに変更するために使用します。",
    "Let’s create a Window with a vertical Grid that contains a Button and a Label:": "Button と Label を含む垂直 Grid を持つ Window を作成しましょう。",
    "This time when we created our grid, we gave it another property: <code>row_spacing<\/code>. We can also add <code>column_spacing<\/code>, but since we’re stacking widgets vertically we’ll only see the effect of <code>row_spacing<\/code>. Notice how we can create new widgets outside the grid and then pack them into the grid by name. This is really helpful when you start using different methods to change the properties of your widgets.": "今回は、グリッドを作成したときに、別のプロパティ<code>row_spacing<\/code>を与えました。<code>column_spacing<\/code>を追加することもできますが、ウィジェットを垂直方向に積み重ねているので、<code>row_spacing<\/code>の効果だけが表示されます。グリッドの外に新しいウィジェットを作成してから、名前でグリッドにパックする方法に注目してください。これは、ウィジェットのプロパティを変更するために異なるメソッドを使い始めるときに非常に役立ちます。",
    "Now, let’s hook up the button to change that label. To keep our code logically separated, we’re going to add it below <code>window.add (grid);<\/code>. In this way, the first portion of our code defines the UI and the next portion defines the functions that we associated with the UI:": "",
    "Remember, we set the button as insensitive here because clicking it again has no effect. Now compile your app and marvel at your newfound skills. Play around with orientation and spacing until you feel comfortable.": "思い出してください、ここでボタンを反応しないように設定します。それをもう一回クリックすることには効果がないためです。今すぐあなたのアプリをコンパイルし、あなたの新しく見つけたスキルに驚嘆してください。あなたが納得するまで向きと間隔を入れて遊んでください。",
    "The Attach Method": "アタッチメソッド",
    "While we can use <code>Gtk.Grid<\/code> simply to create single row or single column layouts with the add method, we can also use it to create row-and-column-based layouts with the <code>attach<\/code> method. First we’re going to create a new <code>Gtk.Grid<\/code> and set both column and row spacing, then we’ll create all the widgets we want to attach to our grid, and finally we’ll attach them.": "addメソッドで単一行または単一列のレイアウトを作成するために<code>Gtk.Grid \n<\/code>をシンプルに使うこともできますが、<code>attach<\/code>メソッドで行と列をベースにしたレイアウトを作成するために使うこともできます。まず、新しい<code>Gtk.Grid<\/code>を作成し、列と行の間隔を設定してから、グリッドにアタッチしたいすべてのウィジェットを作成し、最後にそれらをアタッチします 。",
    "Make sure to give the Grid, Buttons, and Labels unique names that you’ll remember. It’s best practice to use descriptive names so that people who are unfamiliar with your code can understand what a widget is for without having to know your app inside and out.": "グリッド、ボタン、ラベルには、あなたが思い出せるような一意の名前をつけてください。コードに精通していない人がアプリケーションの内部と外部を知らなくてもウィジェットが何であるかを理解できるように、記述的な名前を使用することがベストプラクティスです。",
    "Notice that the attach method takes 5 arguments:": "attach メソッドは5つの引数を取ります。",
    "The widget that you want to attach to the grid.": "グリッドにアタッチしたいウィジェット。",
    "The column number to attach to starting at 0.": "0からはじまる、アタッチする列番号。",
    "The row number to attach to starting at 0.": "0からはじまる、アタッチする行番号。",
    "The number of columns the widget should span.": "ウィジェットがスパンする列の数。",
    "The number of rows the widget should span.": "ウィジェットがスパンする行の数。",
    "You can also use <code>attach_next_to<\/code> to place a widget next to another one on <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.PositionType\">all four sides<\/a>. Don’t forget to add the functionality associated with our buttons:": "",
    "You’ll notice in the example code above that we’ve created a 2 x 2 grid with buttons on the left and labels on the right. The top label goes from blank to “Hello World!” and the button label is rotated 90 degrees. Notice how we gave the buttons labels that directly call out what they do to the other labels.": "上記に示す例のコードでは、左にボタン、右にラベルがある2 x 2グリッドが作成されていることがわかります。一番上のラベルが、空白から \"Hello World!\" に変わり、ボタンのラベルが90度回転します。どのようにボタンラベルを付けたかに注目してください。",
    "Let’s recap what we learned in this section:": "このセクションで学んだことを総括しましょう。",
    "We learned about the building blocks of Gtk and the importance of subclasses": "Gtk の基礎的要素とサブクラスの重要性について学びました",
    "We packed multiple children into a Window using <code>Gtk.Grid<\/code>": "<code>Gtk.Grid<\/code>を使用して、複数の子要素を1つのウィンドウにまとめました",
    "We set the properties of <code>Gtk.Grid<\/code> including its orientation and spacing": "向きとスペースを含む <code>Gtk.Grid<\/code> のプロパティを設定しました",
    "We added multiple widgets into a single Gtk.Grid using the attach method to create complex layouts containing Buttons and Labels that did cool stuff.": "ちょっとしたものを加えたボタンとラベルを含む複雑なレイアウトを作成するために、attach メソッドを使用して複数のウィジェットを1つの Gtk.Grid に追加しました。",
    "Now that you understand more about Gtk, Grids, and using Buttons to alter the properties of other widgets, try packing other kinds of widgets into a window like a Toolbar and changing other properties of <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Label\">Labels<\/a> like <code>width_chars<\/code> and <code>ellipsize<\/code>. Don’t forget to play around with the attach method and widgets that span across multiple rows and columns. Remember that Valadoc is super helpful for learning more about the methods and properties associated with widgets.": "",
    "Notifications": "通知",
    "By now you've probably already seen the white notification bubbles that appear on the top right of the screen. Notifications are a simple way to notify a user about the state of your app. For example, they can inform the user that a long process has been completed or a new message has arrived. In this section we are going to show you just how to get them to work in your app. Let's begin by making a new project!": "これで、画面の右上に表示される白い通知の吹き出しがすでに見えているはずです。通知は、ユーザーにアプリの状態を通知する簡単な方法です。たとえば、長いプロセスが完了したことや新しいメッセージが到着したことをユーザーに知らせることができます。このセクションでは、アプリでそれらを動作させる方法を説明します。新しいプロジェクトを作って始めましょう！",
    "Making Preparations": "準備をする",
    "Create a new folder inside of  \"~\/Projects\" called \"notifications-app\"": "",
    "Create a file inside called <code>notify-app.vala<\/code>": "中に<code>notify-app.vala<\/code>というファイルを作成してください。",
    "Re-create the <code>CMake<\/code> folder and <code>CMakeFiles.txt<\/code> file. If you don't remember how to set up CMake, go back to the <a href=\"#building-and-installing-with-cmake\">previous section<\/a> and review.": "<code>CMake<\/code>フォルダと<code>CMakeFiles.txt<\/code>ファイルを再作成してください。CMake のセットアップ方法を覚えていない場合は、<a href=\"#building-and-installing-with-cmake\">前のセクション<\/a>に戻って確認してください。",
    "Remember how to <a href=\"#the-desktop-file\">make a .desktop file<\/a>? Excellent! Make one for this project, but this time, name it <code>notify.app.desktop<\/code> as <code>notify.app<\/code> will be your app's ID. Since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true<\/code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.": "<a href=\"#the-desktop-file\">.desktop ファイルを作成する<\/a>方法を覚えていますか？素晴らしい！このプロジェクト用に1つ作成しますが、今回は<code>notify.app<\/code>という名前をアプリのIDとするので、<code>notify.app.desktop<\/code>という名前を付けてください。アプリは通知を表示するため、ファイルの最後に<code>X-GNOME-UsesNotifications=true<\/code>を追加してください。これは、ユーザーがシステムの通知設定でアプリの通知設定を設定できるようにするために必要です。",
    "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed.": "通知を使用する場合は、desktop ファイルの名前がアプリケーションのIDと同じであることが重要です。これは、elementary が desktop ファイルを使用して、デフォルトのアイコンやアプリ名などの通知を送信するアプリに関する追加情報を検索するためです。名前がアプリケーションIDと一致する desktop ファイルがない場合、通知が表示されないことがあります。",
    "Gtk.Application": "",
    "In order to display notifications, you're going to need your app to subclass <code>Gtk.Application<\/code>. <code>Gtk.Application<\/code> is a class that handles many important aspects of a Gtk app like app uniqueness and the application ID you need to identify your app to the notifications server. If you want some more details about <code>Gtk.Application<\/code>, <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Application\">check out Valadoc<\/a>.": "",
    "Now that you know what a <code>Gtk.Application<\/code> is, let's create one:": "<code>Gtk.Application<\/code> が何であるかを知りましたので、作成しましょう。",
    "Initiating your app with Gtk.Application is a little different from what we did a few sections back. This time, in <code>main<\/code> you are starting your app with <code>app.run<\/code> and you have a new function called <code>activate<\/code> inside of your class; This <code>activate<\/code> function will be the one that executes when you invoke <code>app.run<\/code>. We are also creating a <code>Gtk.ApplicationWindow<\/code>, this is where you will place all the widgets your app needs. Now that we have a simple window, let's use what we learned in <a href=\"#gtk-grid\">creating layouts<\/a> and make a grid containing one button that will show a notification.": "Gtk.Application でアプリを起動することは、私たちがいくつかの前のセクションをやったこと少し異なります。今回は<code>main<\/code>の中で、<code>app.run<\/code>であなたのアプリを 開始しています。また、クラスの中に新しい関数<code>activate<\/code>があります。この<code>activate<\/code>関数は、<code>app.run<\/code>を呼び出したときに実行される関数になります。<code>Gtk.ApplicationWindow<\/code>も作成しています。これは、アプリが必要とするすべてのウィジェットを配置する場所です。これで簡単なウィンドウができたので、<a href=\"#gtk-grid\">レイアウトの作成<\/a>で学んだことを使い、通知を表示するボタンが1つ入ったグリッドを作ってみましょう。",
    "In between <code>var app_window...<\/code> and <code>app_window.show ();<\/code>, write the folowing lines of code:": "<code>var app_window...<\/code> と <code>app_window.show ();<\/code> の間に次のコード行を書いてください。",
    "Since we're adding translatable strings, don't forget to update your translation template by running <code>make pot<\/code>.": "翻訳可能な文字列を追加するので、<code>make pot<\/code>を実行して翻訳テンプレートを更新するのを忘れないでください。",
    "Sending Notifications": "通知を送る",
    "Now that we have a Gtk.Application we can send notifications. Let's connect a function to the button we created and use it to send a notification:": "いま私たちには Gtk.Application があるので、通知を送信できます。私たちが作成したボタンに関数を接続し、それを使って通知を送信しましょう。",
    "Okay, now compile your new app. if everythink works, you should see your new app. Click the \"Send\" button. Did you see the notification? Great! Don't forget to commit and push your project in order to save your branch for later.": "",
    "Additional Features": "追加機能",
    "Now that you know how to send basic notifications, lets talk about a couple ways to make your notifications better. Notifications are most useful when users can indentify where they came from and they contain relevant information. In order to make sure your notifications are useful, there are three important features you should know about: setting an icon, replacing a notification, and setting priority.": "基本的な通知を送信する方法を知ったので、通知をより良くするためのいくつかの方法について話しましょう。通知は、ユーザーがどこから来たのかを識別できて、それらに関連情報が含まれている場合に最も役立ちます。あなたの通知が有用であることを確実にするために、アイコンの設定、通知の置き換え、および優先順位の設定という3つの重要な機能について知っておく必要があります。",
    "Icons": "アイコン",
    "In order to make sure users can easily recognize a notification, we should set a relevant icon. Right after the <code>var notification = New Notification<\/code> line, add:": "ユーザーが簡単に通知を認識できるように、関連するアイコンを設定するべきです。 <code>var notification = New Notification<\/code> 行の直後に次の行を追加します。",
    "That's it. Compile your app again, and press the \"Send\" button. As you can see, the notification now has an icon. Using this method, you can set the icon to anything you'd like. You can use <code>gtk3-icon-browser<\/code> to see what system icons are available.": "",
    "Replace": "置き換え",
    "We now know how to send a notification, but what if you need to update it with new information? Thanks to the notification ID, we can easily replace a notification. The notification ID should be the same as the app ID that we set in <code>Gtk.Application<\/code>.": "通知を送信する方法はわかりましたが、新しい情報で更新する必要がある場合はどうすればよいでしょうか？通知IDのおかげで、私たちは通知を簡単に置き換えることができます。通知IDは、<code>Gtk.Application<\/code>の中で設定したアプリケーションIDと同じでなければなりません。",
    "Let's make the replace button. This button will replace the current notification with one with different information. Let's create a new button for it, and add it to the grid:": "置き換えボタンを作りましょう。このボタンは現在の通知の情報を異なる情報に置き換えます。そのための新しいボタンを作成し、グリッドに追加してください。",
    "{\n        this.withdraw_notification (\"notify-test\");\n    });\n-->": "",
    "Very easy right? Let's compile and run your app again. Click on the buttons, first on \"Show\", then \"Replace\". See how the text on your notification changes without making a new one appear?": "",
    "Priority": "優先権",
    "Notifications also have priority. When a notification is set as <code>URGENT<\/code> it will stay on the screen until either the user interacts with it, or you withdraw it. To make an urgent notification, add the following line before the <code>this.send_notification ()<\/code> function": "また、通知は優先権を持っています。通知が <code>URGENT<\/code> として設定されている場合は、ユーザーがそれと対話するまで、またはあなたがそれを撤回するまで画面上にとどまります。緊急通知を行うためには、<code>this.send_notification ()<\/code> 機能の前に次の行を追加します。",
    "<code>URGENT<\/code> notifications should really only be used on the most extreme cases. There are also <a href=\"https:\/\/valadoc.org\/gio-2.0\/GLib.NotificationPriority\">other notification priorities<\/a>.": "",
    "Let's review what all we've learned:": "ここで何を学んだのか復習しましょう。",
    "We learned what <code>Gtk.Application<\/code> is and how to make a subclass of it.": " <code>Gtk.Application<\/code> が何であるのかとそのサブクラスの作り方を学びました。",
    "We built an app that sends and updates notifications.": "通知の送信と通知の更新を行うアプリをビルドしました。",
    "We also learned about other notification features like setting an icon and a notification's priority.": "また、アイコンと通知の優先順位を設定するなどの他の通知機能について学びました。",
    "As you could see, sending notifications is very easy thanks to <code>Gtk.Application<\/code>. If you need some further reading on notifications, Check out the page about <code>Glib.Notification<\/code> in <a href=\"https:\/\/valadoc.org\/gio-2.0\/GLib.Notification\">Valadoc<\/a>.": "",
    "Next Page:": "次のページ:",
    "Reference": "リファレンス",
    "Creating an account on GitHub and importing an SSH key": "",
    "Setting up the Git revision control system": "",
    "We’re going to assume that you’re working from a clean installation of elementary OS Loki or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "",
    "GitHub": "",
    "GitHub is an online platform for hosting code, reporting issues, tracking milestones, making releases, and more. If you're planning to publish your app through AppCenter, you'll need a GitHub account. If you already have an account, feel free to move on to the next section. Otherwise, <a href=\"https:\/\/github.com\/join\">sign up for a GitHub account<\/a> and return when you're finished.": "",
    "Git": "",
    "To download and upload to GitHub, you'll need the Terminal program <code>git<\/code>. Git is a type of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Revision_control\">revision control system<\/a> that allows multiple developers to collaboratively develop and maintain code while keeping track of each revision along the way.": "",
    "If you're ready, let's get you set up to use Git:": "",
    "Open the Terminal and install Git": "",
    "We need to inform Git who we are so that when we upload code it is attributed correctly. Inform Git of your identity with the following commands": "",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http:\/\/en.wikipedia.org\/wiki\/Secure_Shell\">SSH<\/a> key pair (a kind of fingerprint for your computer) and import your public key to GitHub. Type the following in Terminal:": "",
    "When prompted, press <kbd>Enter<\/kbd> to accept the default file name for your key. You can choose to protect your key with a password or press <kbd>Enter<\/kbd> again to use no password when pushing code.": "",
    "Now we're going to import your public key to GitHub. View your public SSH key with the following command, then copy the text that appears": "",
    "Visit <a href=\"https:\/\/github.com\/settings\/keys\">your SSH keys page<\/a> and click the green button in the upper right-hand corner that says &quot;New SSH key&quot;. Paste your key in the &quot;Key&quot; box and give it a title.": "",
    "We're all done! Now you can download source code hosted on GitHub and upload your own code. We'll revisit using <code>git<\/code> in a bit, but for now you're set up. For a more in-depth intro to Git, we recommend <a href=\"https:\/\/www.codecademy.com\/learn\/learn-git\">Codecademy's course on Git<\/a>.": "",
    "At the time of this writing, elementary OS doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "",
    "We’re going to use Terminal in order to compile our code, push revisions to GitHub (using <code>git<\/code>), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a Git branch. Let’s begin.": "",
    "Pushing to GitHub": "",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code.": "",
    "First we need to create a new repository on GitHub. Visit <a href=\"https:\/\/github.com\/new\">the new repository page<\/a> and create a new repository for your code.": "",
    "Open Terminal and make sure you're in your project's root directory &quot;~Projects\/gtk-hello&quot;, then issue the following commands": "",
    "Remember to replace <code>yourusername<\/code> with your GitHub username and <code>yourrepositoryname<\/code> with the name of the new repository you created.": "",
    "With these commands, we've told <code>git<\/code> to track revisions in this folder, that we'd like to track revisions on the file &quot;gtk-hello.vala&quot; specifically, we've committed our first revision and explained what we did in the revision, and then we've told <code>git<\/code> to push your code to GitHub.": "",
    "Finally, we commited our first revision and pushed code to GitHub": "",
    "Create &quot;hello-again.vala&quot; in the &quot;src&quot; folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now you can copy <a href=\"https:\/\/elementary.io\/docs\/code\/reference#gpl-header\">the GPL header from our reference documentation<\/a>. Be sure to assign the copyright to yourself at the top of the header and change the author to you at the bottom of the header.": "",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, make sure you've created a new repository for your project on GitHub push your first revision with <code>git<\/code>:": "",
    "Create a new file in scratch and save it in the &quot;data&quot; folder as &quot;com.github.yourusername.yourrepositoryname.desktop&quot;. This naming scheme is called <a href=\"https:\/\/en.wikipedia.org\/wiki\/Reverse_domain_name_notation\">Reverse Domain Name Notation<\/a> and will ensure that your .desktop file has a unique file name.": "",
    "Type the following into your .desktop file. Like before, try to guess what each line does.": "",
    "Finally, let's add this file to <code>git<\/code> and commit a revision:": "",
    "AppData.xml": "",
    "Every app also comes with an .appdata.xml file. This file contains all the information needed to list your app in AppCenter.": "",
    "In your data folder, create a new file called &quot;com.github.yourusername.yourrepositoryname.appdata.xml&quot;. Just like with the .desktop file, we use RDNN to avoid file naming collisions.": "",
    "Type the following into your .appdata.xml file": "",
    "These are all the mandatory fields for displaying your app in AppCenter. There are plenty of other optional fields that you can read about <a href=\"https:\/\/www.freedesktop.org\/software\/appstream\/docs\/chap-Metadata.html\">here<\/a>.": "",
    "There are also some special custom fields for AppCenter to further brand your listing. Specifically, you can set a background color and a text color for your app's header and banner. You can do so by adding the following keys inside the <code>component<\/code> tag:": "",
    "You can specificy colors here in either Hexidecimal or RGB. The background color will automatically be given a slight gradient in your app's banner.": "",
    "You can also specify a suggested price in whole USD. Remember though that AppCenter is a pay-what-you-want store. This is not a price floor. Users will still be able to choose any price they like, including 0.": "",
    "Did you remember to add these files to <code>git<\/code> and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to GitHub. Keep in mind that this acts as a backup system as well; when we push our work to GitHub, we know it's safe and we can always revert to a known good revision if we mess up later.": "",
    "And you're done! Your app now has a real build system. Don't forget to add these files to <code>git<\/code> and push to GitHub. This is a major milestone in your app's development!": "",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the &quot;build&quot; folder to your <code>git<\/code> repository and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the &quot;build&quot; folder and it won't mess up our app's source code.": "",
    "Create a .desktop file using RDNN that tells the computer how to display our app in the Applications menu and the Dock": "",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to clone your repo from GitHub and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "",
    "Don't forget to add this new directory and it's contents to git": "",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, which is required to publish apps in AppCenter. This will allow normal people to install your app and even get updates for it when you publish them.": "",
    "Did you commit and push to GitHub for each step? Keep up these good habits and let's get to packaging this app!": "",
    "Like CMake, elementary maintains a simple version of the &quot;debian&quot; folder that contains all the files we need for packaging. Let's grab a copy of that with <code>git<\/code>:": "",
    "Now that you know how to code, build, and package an app using Vala, Gtk, CMake, and Debian packaging, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window<\/code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid<\/code>.": "",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid<\/code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to GitHub, and set up Debian Packaging in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window<\/code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "",
    "Remember how to <a href=\"#the-desktop-file\">make a .desktop file<\/a>? Excellent! Make one for this project, but this time, since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true<\/code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.": "",
    "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed. To keep things simple, we'll be using the same RDNN everywhere.": ""
}