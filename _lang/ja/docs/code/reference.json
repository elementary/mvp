{
    "Reference": "リファレンス",
    "Now that you've stepped through the developer guide like a champ, we have some reference materials for you. This would be a great place to bookmark and refer back to when you have questions about elementary development.": "いま、あなたは見事に開発者ガイドを踏破したので、参考資料をいくつか用意しています。これは、elementary の開発についての質問があるときに参照したりブックマークしたりするのに最適な場所です。",
    "Code Style": "コードスタイル",
    "The purpose of this guide is to provide clean and accurate instructions on\nwriting good code across all elementary projects. This guideline is to be\nfollowed on every file, in order to keep our code consistent and readable. We\nare also inheriting some of the GNOME's Vala guidelines to keep our code\nconsistent with other Vala programs.": "このガイドの目的は、全ての elementary プロジェクトで良いコードを書くためのクリーンで正確なインストラクションを提供することです。このガイドラインは、コードの一貫性と可読性を保つために、全てのファイルで従うべきです。私たちはまた、私たちのコードが他の Vala プログラムと一貫性を保つため、 GNOME の Vala ガイドラインの幾つかを継承しています。",
    "If the guidelines here proposed are followed, newcomers to elementary\ndevelopment will be more easily able to join the development and\nunderstand code. Besides, it'll make it easier for all developers to work on\napplications that they don't usually work on, because the code will be\nconsistent. Finally, as Guido Van Rossum said - \"Code is much more often read\nthan written\", so having nicely written code is crucial.": "",
    "Whitespace": "空白",
    "There is no trailing whitespace at the end of a line, whether it's empty or\nnot. There is also no empty line after declaring a function:": "行の終わりの余分な空白は、それが空かどうかに関わらず、ありません。関数宣言後の空行もありません。",
    "White space comes before opening parentheses:": "開き括弧の前に空白文字が入ります:",
    "Whitespace goes in all maths-related code, between numbers and operators.": "全ての数学関連のコードで、数と演算子の間に、空白文字が入ります。",
    "Indentation": "インデント",
    "Vala code is indented using 4 spaces for consistency and readability.": "Valaのコードは一貫性と可読性のために4つのスペースを使ってインデントされます。",
    "In classes, functions, loops and general flow control, the first parentheses\nis on the end of the first line (\"One True Brace Style\"), followed by the\nindented code, and a line closing the function with a curly bracket:": "",
    "On conditionals and loops, always use braces even if there's only one line of code:": "条件分岐やループでは、コードが一行だけの場合でも、常に中括弧を使用してください。",
    "Cuddled else and else if:": "くっついた else と else if:",
    "If you are checking the same variable more than twice, use switch\/case instead of multiple else\/if:": "二回以上同じ変数以上をチェックしている場合は、複数の else\/if の代わりに switch\/case を使ってください。",
    "Classes and files": "クラスとファイル",
    "Only having one class per file is recommended.": "1つのファイルには1つのクラスだけをもつことを推奨します。",
    "All files have the same name of the class in them.": "すべてのファイルはその中のクラスの名前と同じ名前を持ちます。",
    "Separate code into classes for easier extensibility.": "容易な拡張性のためにコードを複数のクラスに分けてください。",
    "Comments": "コメント",
    "Comments are either on the same line as the code or in a special line.": "コメントはコードと同じ行か特別な行のどちらでも良いです。",
    "Comments are indented alongside the code, and obvious comments do more harm\nthan good.": "コメントは、コードと一緒にインデントします。自明なコメントは有害無益です。",
    "Variable names, class names, function names": "変数名、クラス名、関数名",
    "Also worth referring that there should be no Hungarian notation, and no mix of\nany kinds of notations.": "ハンガリアン記法は存在するべきではないということ、複数の記法を混ぜるべきではないことも言及する価値があります。",
    "Casting": "キャスト",
    "Avoid using <code>as<\/code> keyword when casting as it might give <code>null<\/code> as result, which could be easily forgotten to check.": "結果として <code>null<\/code> を返すかもしれないキャストでは <code>as<\/code> を使うことを避けてください。これは、チェックすることを忘れがちです。",
    "Use of '=' in place of 'set'": "'set' の代わりに '=' を使う",
    "In places or operations where you would otherwise use <code>set<\/code> , you should make use of <code>=<\/code> instead.": "<code>set<\/code>を使う場所や操作では、代わりに <code>=<\/code> を使うようにするべきです。",
    "For example, instead of using": "例えば、以下のように使う代わりに",
    "you should use": "以下のように使うべきです",
    "Vala namespaces": "Vala ネームスペース",
    "Referring to GLib is not necessary. If you want to print something:": "GLib を参照する必要はありません。もし何かを print したい場合:",
    "Opt for the second one, it's much cleaner.": "2つ目の方を選んでください。よりクリーンです。",
    "Columns per line": "行あたりの幅",
    "Ideally, lines should have no more than 80 characters per line, because this\nis the default terminal size. However, as an exception, more characters could\nbe added, because most people have wide-enough monitors nowadays. The hard\nlimit is 120 characters.": "理想的には各行は1行あたり80文字以上を持つべきではありません。これは\nデフォルトのターミナルサイズのためです。しかし、例外として、より多くの文字\nを追加できます。今日ほとんどの人が十分幅のあるモニターを持っているためです。\nハードリミットは120文字です。",
    "GPL Header": "GPL ヘッダー",
    "Reporting Bugs": "バグレポート",
    "One of the big advantages of being an openly developed project is being able to take part in public bug tracking. However, if you're new to working with public bug tracking, it can be difficult to understand how to report bugs The Right Way™. So let's find out how:": "オープンに開発されたプロジェクトであることの大きな利点の1つは、パブリックなバグトラッキングに参加できることです。 しかし、パブリックなバグトラッキングに取り組むことがはじめての場合、The Right Way™ でバグを報告する方法を理解することは難しいかもしれません。 それでは、どのようするかをみてみましょう。",
    "In order to file reports, you must be signed up as a member of Launchpad. If you've been through our <a href=\"\/docs\/code\/getting-started#the-basic-setup\">development guide<\/a>, you already have this covered.": "レポートを提出するには、Launchpad のメンバーとしてサインアップする必要があります。<a href=\"\/docs\/code\/getting-started#the-basic-setup\">development guide<\/a>を終わらせていれば、既にこれをカバーしています。",
    "Find the \"Report a Bug\" page for the app in question. Often times you can right-click the app in the dock, select \"About\", and then select \"Report a Problem\". Otherwise, you can search for the app on Launchpad, select the \"Bugs\" tab, and then \"Report a Bug\" on the right side of the page.": "",
    "When filing a new report, launchpad will automatically check for duplicates. However, it's still a good idea to search the bug list to make sure your report hasn't been filed already. If your report has already been filed by someone else, you can mark the report as affecting you using the link on the top left of the report's page. Only comment on the report if you can provide additional useful information that may help track down the source of the issue. Do not comment things like, \"I have this problem too\" or \"This is a really important issue\".": "",
    "If your report has not already been filed by someone else and you've reached the \"Report a Bug\" page, type in a summary and description of the issue and select \"Submit\". Keep in mind the following information while filing your report:": "",
    "Be Specific In The Summary": "概要では具体的に",
    "This will be the title of the issue in the bug tracker. It's very important to be specific because it makes it much easier for a developer or bug manager to search the issue list and helps avoid duplicate reports. A summary such as \"App Crashes\" is not good and vague requests like \"Increase Performance\" are not helpful. A good summary is something like \"Notification is not sent when process finishes\".": "",
    "Avoid Subjective or Ambiguous Adjectives": "主観やあいまいな形容詞を避ける",
    "This may sound like a repeat of the first heading, but it's important when you want someone to confirm your report. Don't say that something is \"jarring\" or \"unintuitive\". Instead describe what happened and contrast it with what you expected to happen. \"The panel suddenly appeared instead of being animated in,\" describes the problem in a way that is actionable and objective.": "",
    "Be Concise, But Explain The Issue": "簡潔に、しかし、問題を説明する",
    "First of all, it's important to mention that bug reports should be written in English and you should, if possible, watch out for your language and grammar.": "まず第一に、バグレポートは英語で書かれていなければなりません。可能であれば、あなたの言語と文法に注意してください。",
    "The most important thing for a report is that the developer must be able to reproduce the issue. If necessary, include exact numbered steps to reproduce the issue. Include relevant information like your OS version, any modifications you've made to the system (like changing your window manager or kernel), or the version numbers of relevant libraries like Gtk or WebKit. If you're reporting a crash, make sure to <a href=\"https:\/\/wiki.debian.org\/HowToGetABacktrace\">include a backtrace<\/a>.": "レポートで最も重要なことは、開発者がその問題を再現可能でなければならないということです。必要に応じて、問題を再現するための正確な手順を含めてください。お使いの OS のバージョン、システムに加えた変更 (ウィンドウマネージャやカーネルの変更など) 、Gtk や WebKit といった関連ライブラリのバージョン番号などの関連情報を含めてください。 クラッシュを報告する場合は、<a href=\"https:\/\/wiki.debian.org\/HowToGetABacktrace\">include a backtrace<\/a>を確認してください。",
    "Be Prepared To Provide More Information": "詳細な情報を提供する用意をする",
    "If your report does not contain enough information for the developer to reproduce the issue, it may be marked as \"Incomplete\". Oftentimes, a developer will make a comment requesting additional specific information. If you do not provide that information, your report will eventually expire.": "",
    "If you've reported your issue against the wrong app, a developer may mark it as \"Invalid\". If the developer knows which app you meant to report against, they may re-assign the issue. However, if they do not you must find the correct app and re-assign the report yourself.": "",
    "If you're reporting a \"Wishlist\" issue, like a feature request, a developer may mark your bug as \"Opinion\" or \"Won't Fix\". Developers are often open to discussion about these kinds of issues, but please do not harass a developer for marking your report this way.": "",
    "You Can Get a Bit of Help": "ちょっとした手助けを得ることができる",
    "If you're not sure about anything above, you are always welcome to our development IRC channel: #elementary-dev on irc.freenode.net. We might be able to help you track down the actual project where you should report the issue, or perhaps even aid you with any English language issue you might come across. Most developers want to help you make good bug reports.": "上記のことがよくわからない場合は、あなたを開発者IRCチャンネルに歓迎します: #elementary-dev on irc.freenode.net。問題を報告すべき実際のプロジェクトを突き詰めることを手伝えるかもしれません。あるいは、あなたが出会う可能性のある英語の問題を援助することさえできます。ほとんどの開発者はあなたが良いバグレポートを作成するの手伝いたいと考えています。",
    "Don't Confirm Reports for Other People's Apps": "他の人のアプリケーションのレポートを確かめない",
    "If a report affects you, mark it using the link. Do not confrim your own reports. Even if you are 100% sure that you are right, just don't do it. It's not good bug tracker etiquette. A bug manager or developer for the app will confirm the report when they are able to review it.": "レポートがあなたにも影響している場合、リンクを使ってそれをマークしてください。あなた自身のレポートで確かめないでください。あなたが 100% 正しいと確信していても、しないでください。それは良いバグトラッカーのエチケットではありません。アプリのバグマネージャーまたは開発者は、レポートをレビューできるときにレポートを確認します。",
    "Don't Make \"Me Too\" Comments": "",
    "We mentioned this earlier, but it's worth mentioning again. Do not make comments that simply say \"This issue affects me as well\". This clutters up the tracker. Only comment if you are providing additional information that helps find the source of the issue. If you only want to let a developer know that you are affected, use the green link that says, \"Does this bug affect you?\" under the report's title.": "",
    "Proposing Design Changes": "デザイン変更の提案",
    "elementary has always been known for its strong focus on great design, but if you’re an up and coming designer you might not know how to get developers to pay attention to you. This reference guide is about how to effectively propose a design change in a way that makes it more likely for your design to become implemented.": "elementary はいつも素晴らしいデザインに力を入れていることで知られていますが、あなたがばりばりのデザイナーであれば、開発者にあなたに注意を払ってもらう方法を知らないかもしれません。このリファレンスガイドは、デザインが実装される可能性が高まるやり方で、効果的にデザイン変更を提案する方法について説明しています。",
    "Don't Make Demands": "要求をしない",
    "Let’s say you spent the last few hours re-designing the Search Engine Manager dialog in Midori and you want to bring this work to the attention of Midori’s developers. You could file a bug report something like “Search engine popup sucks” and paste your mockup and be done. But that approach isn’t going to win you any friends and your report will probably be marked “opinion” or “invalid”. Instead, we should consider the amount of work it will take to implement the new design and try to present it in a way that gets developers excited about the overall vision without demanding 1,000 lines of code in one shot.": "あなたはここ数時間を Midori の検索エンジン管理ダイアログを再設計することに費やし、この作業を Midori の開発者に注目させたいとします。あなたは \"検索エンジンポップアップがひどい\"のようなバグレポートを提出し、あなたのモックアップを貼り付けることができるでしょう。しかし、そのアプローチではあなたは一人の友人も得ることはなく、あなたのレポートはおそらく “opinion” または “invalid” とマークされるでしょう。その代わりに、新しいデザインを実装するための作業量を考慮する必要があります。そして、1回で1,000行のコードを要求することなく、開発者を全体的なビジョンに興奮させるやり方で、プレゼンテーションを試みてください。",
    "Use Blueprints": "Blueprints を使う",
    "Firstly, we want to present the overall vision of our grand new design. So we should file a new blueprint (in this example, we’d file it <a href=\"http:\/\/blueprints.launchpad.net\/midori\">here<\/a>). Name it something explicit and try to avoid titles that marginalize developer’s existing work. Something like “search-engine-manager-redesign” works just fine. In this blueprint we want to describe our motivations for the redesign. What are the problems with the current design and what does our new design aim to solve? Common reasons for a redesign can include minimizing window chrome, taking advantage of new toolkit elements, making the UI more consistent with other apps, etc. This is also a good place to link to that mockup we were talking about earlier. If your design is really involved, you can even link to an external specification (Google Docs work great for getting feedback) where you have a chance to really get into the nitty gritty of your idea.": "はじめに、私たちは新しいグランドデザインの全体的なビジョンを提示したいと考えています。したがって、新しい Blueprint を提出する必要があります(この例では、<a href=\"http:\/\/blueprints.launchpad.net\/midori\">ここ<\/a>)。それに何か明示的な名前を付けてください。開発者の既存の成果を軽んじるタイトルは避けてください。\"search-engine-manager-redesign\"のようなものが良いです。この Blueprint では、再デザインの動機を説明したいと思います。現在のデザインの問題は何ですか？また、新しいデザインは何を解決しようとしていますか？再デザインの一般的な理由には、ウィンドウクロムの最小化、新しいツールキット要素の活用、他のアプリとのUI一貫性の向上などがあります。ここは私たちが先に話していたモックアップにリンクするのにも良い場所です。デザインが本当に複雑な場合には、外部仕様にリンクすることもできます(Googleドキュメントはフィードバックを得るのに最適です)。実際にあなたのアイデアの核心に入るチャンスがあります。",
    "Create Concise Work Items": "簡潔な作業項目を作成する",
    "Now that you’ve laid out the motivations for your design and explained the overall vision, you should break it up into small, actionable work items (also called bug reports). To continue our example, I would have reports like “Change Search Engine Manager Dialog to Popover”, “Re-order Search Engines with Drag and Drop”, “Open Search Engine Manager by clicking Search icon in URL Bar”, “Show edit and remove buttons next to engine in Search Engine Manager”, etc etc. Each bug report should describe just one small change. We do this for several reasons:": "これで、デザインの動機付けと全体的なビジョンについて説明したので、小さくて実行可能な作業項目(バグレポートとも呼ばれます)に分割してください。例を続けると、\"検索エンジン管理ダイアログをポップオーバーに変更する\"、\"ドラッグアンドドロップで検索エンジンを並べ替える\"、\"URLバーの検索アイコンをクリックして検索エンジン管理を開く\"、「検索エンジン管理の中で検索エンジンの隣に編集と削除ボタンを表示する \"などなど、というようなレポートにします。それぞれのバグレポートには1つの小さな変更しか記述されていないはずです。いくつかの理由のためにこのようにします。",
    "It allows developers to deny one request without denying all of them. Face it: your design isn’t perfect and it’s very possible that a developer isn’t going to like part of it. By breaking up your design into little pieces, it allows a developer to incorporate the changes they like and ignore the ones they don’t.": "開発者が全ての要求を拒否することなく1つの要求を拒否することができます。 それに向かい合ってください。あなたのデザインは完璧ではありません。開発者がその一部を好きにならない可能性は非常に高いです。デザインを小さな部分に分割することで、開発者は好きな変更を組み込んで、好きではない変更を無視することができます。",
    "It makes your design less intimidating. A big redesign means lots of lines of code. If your changes look like too much of a hassle, you’re going to have a hard time getting a developer to work on them. But if you present small changes that can be incorporated a bit at a time, there’s a bigger chance that your whole design will eventually be implemented.": "あなたのデザインの威圧感を減らします。大きな再設計とは、たくさんのコード行数を意味します。あなたの変更があまりにも多くの面倒なように見える場合は、開発者にその作業に取り掛かってもらうことに苦労するでしょう。しかし、少しずつ組み込むことができる小さな変更を提示すれば、全てのデザインが最終的に実装される可能性が高くなります。",
    "It allows developers to track their progress. Once again, big designs take time to implement. Even if a developer wants to implement the whole thing right away, they might not be able to. Giving them a way to “check off” pieces as they go makes it more likely that a part of your design won’t be forgotten about when it’s translated into code.": "これにより、開発者は進行状況を追跡できます。もう一度言いますが、大きなデザインには実装に時間がかかります。たとえ開発者がすぐに全部を実装したいと思っても、それはできないかもしれません。開発者に\"チェックする\"方法を与えることは、コードに変換されたときにあなたのデザインの一部が忘れられないようになります。",
    "File Compelling Reports": "魅力的なレポートを提出する",
    "Don’t forget to make your reports compelling. It’s up to you to sell the merits of each change. Cite the HIG, prior-art, user complaints, articles by other designers, and present your changes in a logical, non-opinionated, and concise manner. It also doesn’t hurt to speak in developer terms. Brush up on the names of widgets in Gtk and Granite, get familiar with available libraries like Zeitgeist and Unity, and don’t forget about system components like PulseAudio or Contractor. Also, whatever you do, don’t be presumptuous and confirm your own bug reports. You wouldn’t ask a friend for a favor and then answer yourself for them, so don’t do it here either. See <a href=\"#reporting-bugs\">the above section<\/a> for a refresher on filing good bug reports.": "あなたのレポートを魅力的にすることを忘れないでください。変更のメリットを売るのはあなた次第です。HIG、先行技術、ユーザーの苦情、他のデザイナーによる記事を引用してください。そして、あなたの変更を論理的に、独善的ではなく、簡潔な方法で提示してください。また、開発者の言葉で話すことに越したことはありません。Gtk と Graniteのウィジェットの名前の勉強をやり直し、Zeitgeist や Unity のような利用可能なライブラリに精通し、PulseAudio や Contractor のようなシステムコンポーネントを忘れないでください。また、あなたが何をしても、自信過剰になったり自分のバグレポートを追認したりしないでください。あなたは友人に賛成を求めることも、自分自身に対して回答することもしないでしょう。だから、ここでもやってはいけません。良いバグレポートを提出することを思い出すために、<a href=\"#reporting-bugs\">上記セクション<\/a>を参照してください。",
    "Be Prepared to Iterate": "繰り返す準備をする",
    "Don’t be upset if a developer plainly states that they don’t want to implement your idea. Remember that they have plans too. You might have to go back to the drawing board a bit. Listen to their feedback. Your design might be a little over-engineered, it might conflict with other designs being worked on, or maybe it’s just in conflict with the goals and scope of the app. Remember that you’re in the position of requesting someone to devote their time to something. You’re asking for a favor. Don’t be afraid to argue a position within polite reason, but remember to stay humble.": "開発者があなたのアイデアを実装したくないということを明白に述べているならば、怒らないでください。彼らにも計画があることを忘れないでください。ドローボードに少し戻る必要があるかもしれません。彼らのフィードバックを聞いてください。あなたのデザインは少しオーバースペックかもしれませんし、作業中の他のデザインと衝突するかもしれません。または単に、アプリの目標と範囲と矛盾しているのかもしれません。 あなたは誰かに、その人の時間を何かに費やすよう要求する立場にいることを忘れないでください。あなたは頼みごとをしています。丁寧な理由の中でポジションを主張するのを恐れてはいけませんが、謙虚でいてください。"
}