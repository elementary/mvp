{
    "Getting Started": "Erste Schritte",
    "Welcome to the elementary Developer Guide! This book was created to teach you all about creating and distributing apps for elementary OS. The introduction will make sure that you have all the tools for the job and a solid understanding of what this book is about. Some of you may feel confident enough to jump straight into coding. If that's the case, you might want to skip ahead and start writing your first app.": "Wilkommen im elementary Entwickler-Guide! Dieser Guide wurde erstellt, um dir zu zeigen, wie du Apps für elementary OS entwickeln und veröffentlichen kannst. Die folgende Einleitung soll sicher stellen, dass du über alle notwendigen Werkzeuge verfügst und verstehst, worum es in diesem Guide geht. Wenn du dich sicher genug fühlst, kannst du die Einleitung auch überspringen und gleich loslegen.",
    "However, we strongly recommend to at least skim through this preparation step. Having the right setup is going to help you reach your goals faster, and having a solid foundation is going to help you throughout the rest of this book.": "Dennoch empfehlen wir dir, die vorbereitenden Schritte zumindest zu überfliegen. Mit der richtigen Vorbereitung wirst du den Schritten in diesem Guide leichter folgen können und schneller an dein Ziel gelangen. ",
    "What We Will And Won't Cover": "Was wir behandeln werden und was nicht",
    "We're going to assume that you have absolutely no experience in writing apps for elementary. But we will assume some basic programming knowledge, and hopefully a little experience in Vala or at least similarly syntaxed languages. If you're not familiar with Vala, we highly encourage you to brush up on it before coming here.": "Wir nehmen an, dass du überhaupt keine Erfahrung damit hast, Apps für elementary zu entwickeln. Was wir aber annehmen ist, dass du wenigstens Grundkenntnisse im Programmieren hast, und dich hoffentlich ein bisschen mit Vala oder zumindest Sprachen mit der gleichen Syntax auskennst. Wenn du dich noch nicht mit Vala befasst hast, empfehlen wir dir, dich nun damit zu befassen.",
    "We’re also not covering design too much in this guide; that’s what the <a href=\"\/docs\/human-interface-guidelines\">Human Interface Guidelines<\/a> (HIG) are for, and you’re highly encouraged to take a look there before beginning your app. We're going to assume you have a basic knowledge of (or at least a quick link to) the HIG and focus on coding. However, elementary is all about great design and stellar consistency. It’s important you grasp these concepts before moving on.": "Darüber hinaus werden wir in diesem Guide auch nicht ausführlich auf das Thema Design eingehen. Hierzu haben wir die  <a href=\"\/docs\/human-interface-guidelines\">Human Interface Guidelines<\/a> (HIG) erstellt und empfehlen dir, einen Blick hinein zu werfen, bevor du mit der Entwicklung deiner App beginnst. Wir gehen davon aus, dass du Grundkenntnisse (oder zumindest eine grundlegende Ahnung) der HIG hast und deinen Fokus auf das Programmieren richtest. Dennoch stehen bei elementary auch ein großartiges Design und glänzende Performance im Vordergrund. Daher ist es wichtig, dass du diese Konzepte verinnerlichst, bevor du beginnst.",
    "In this book, we're going to talk about building apps using GTK+, Granite, and other tech available in elementary, setting up a build system, hosting your code for collaborative development, working with translations, a few other bits and pieces, and finally packaging and distributing your new app.": "In diesem Guide lernst du, wie du mithilfe von GTK+, Granite und anderen verfügbaren Technologien Apps für elementary entwickeln, Build-Systeme aufbauen, deine Codes für gemeinschaftliche Entwicklungsprojekte zur Verfügung stellen und mit Übersetzungen arbeiten kannst. Außerdem zeigen wir dir, wie du deine App zu einem Softwarepaket machen und veröffentlichen kannst.",
    "The Basic Setup": "Das einfache Einrichten",
    "Before we even think about writing code, you'll need a certain basic setup. This chapter will walk you through the process of getting set up. We will cover the following topics:": "Bevor du mit dem Schreiben eines Codes beginnst, solltest du zunächst einige grundlegende Schritte vornehmen:",
    "Creating an account in launchpad.net and importing an SSH key in Launchpad": "Einen Account auf launchpad.net erstellen und einen SSH-Key in Launchpad importieren",
    "Setting up the Bazaar revision control system": "Das Versionskontrollprogramm Bazaar einrichten",
    "Getting and using the elementary developer \"SDK\"": "",
    "We’re going to assume that you’re working from a clean installation of elementary OS Freya or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "Wir gehen davon aus, dass du mit einer neuen Installation von elementary OS Freya oder einer späteren Version arbeitest. Das ist deshalb wichtig, weil die Anleitungen, die du bekommst, auf Anwendungen verweisen, die es in anderen linuxbasierten Betriebssystemen, wie Ubuntu, nicht gibt (oder die nicht einmal verfügbar) sind. Es ist möglich die Prinzipien dieses Guides auf Ubuntu-Entwicklung zu übertragen, aber es wahrscheinlich schwieriger zu folgen.",
    "Launchpad": "",
    "Launchpad is a free online service provided by Canonical, the same people who brought you Ubuntu. It is used as a platform for hosting code, tracking milestones, tracking bugs, proposing designs, making translations, and more. Launchpad is a powerful resource, especially if you are a developer working with others. We're going to be using it for its various features throughout this book, so it's a good idea for you to sign up for an account. If you already have an account, feel free to move on to the next section.": "Launchpad ist ein kostenloser Online-Service, der von Canonical zur Verfügung gestellt wird; denselben Leuten, die für Ubuntu verantwortlich sind. Auf der Launchpad-Plattform kannst du u.a. Codes hosten, Bugs melden und verfolgen, Softwaredesigns vorschlagen und vieles mehr. Launchpad ist eine leistungsstarke Ressource, die vor allem für Entwickler nützlich ist, die mit anderen zusammen arbeiten. Wegen der vielfachen Nutzungsmöglichkeiten werden wir Launchpad in diesem Guide immer wieder verwenden und empfehlen dir deshalb, einen Account anzulegen. Wenn du bereits einen Account hast, kannst du gleich zum nächsten Schritt übergehen.",
    "To set up a Launchpad account:": "Einen Launchpad-Account erstellen:",
    "Go to <a href=\"https:\/\/launchpad.net\">Launchpad.net<\/a>. Click on <strong>Log in\/Register<\/strong> in the top right corner of the page.": "Gehe zu <a href=\"https:\/\/launchpad.net\">Launchpad.net<\/a>. Klicke auf <strong>Log in\/Register<\/strong> in der oberen rechten Ecke.",
    "Select <strong>I am a new Ubuntu One user<\/strong> on the left side.": "Wähle <strong>I am a new Ubuntu One user<\/strong> auf der linken Seite aus.",
    "Enter your information and click <strong>Create account<\/strong>.": "Gebe deine Daten ein und klicke auf <strong>Create account<\/strong>.",
    "After you have verified your email your Launchpad account is ready, so let's move on to the next section. Remember, we're not going to go over all the little details in this book. We'll come back to Launchpad a few times later on to use specific features, but if you really want to learn everything there is to know about the website you should read their user guide. Onward!": "Nachdem du deine E-Mail-Adresse verifiziert hast, kannst du deinen Launchpad-Account verwenden. Lass uns daher zum nächsten Schritt übergehen. Vergiss nicht, dass wir in diesem Guide nicht alle Details besprechen werden. Wir kommen später noch einige Male auf Launchpad zurück, um bestimmte Features zu erklären, doch wenn du ausführliche Informationen über die Nutzung von Launchpad haben möchtest, solltest du ihren User Guide lesen.",
    "Bazaar": "",
    "elementary projects are hosted on Launchpad. To interact with the code on Launchpad, we use a distributed <a href=\"http:\/\/en.wikipedia.org\/wiki\/Revision_control\">revision control system<\/a> called Bazaar. This allows multiple developers to collaboratively develop and maintain the code while keeping track of each revision along the way.": "Projekte von elementary werden auf Launchpad gehostet. Um mit den Codes arbeiten zu können, verwenden wir ein verteiltes <a href=\"http:\/\/de.wikipedia.org\/wiki\/Versionsverwaltung\">System zur Versionsverwaltung<\/a>, das Bazaar heißt. Bazaar ermöglicht es, dass mehrere Entwickler gemeinsam einen Code entwickeln und überarbeiten und dabei stets jede vorgenommene Änderung nachverfolgen können.",
    "If you're ready, let's get you set up to use Bazaar:": "Wenn du bereit bist, zeigen wir dir nun, wie du Bazaar nutzen kannst:",
    "Open the Terminal. You'll be interacting with Bazaar through a simple terminal-based program called bzr.": "Öffne das Terminal. Du wirst Bazaar mithilfe eines Terminal-basierten Programms nutzen, das bzr heißt. ",
    "You'll need to install bzr. Simply type the following into the Terminal:": "Zunächst muss bzr installiert werden:",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http:\/\/en.wikipedia.org\/wiki\/Secure_Shell\">SSH<\/a> key pair (a kind of fingerprint for your computer) and import the public key in Launchpad. Type the following in terminal (note that <code>C<\/code> stands for comment and that you can alter its value as you wish, but it's a requirement for Launchpad):": "",
    "When prompted, press Enter to accept the default file name for your key.": "Wenn der Befehl ausgeführt wurde, drückst du Enter, um den generierten Dateinamen deines Schlüsselpaars zu bestätigen.",
    "Next, enter a password to protect your SSH key. You’ll be asked to enter it again, just to make sure you didn’t make any typos. You'll need to enter this password any time you try to push code to launchpad so don't forget it! Optionally, you can just press enter and use no password, but this is obviously less secure.": "Als Nächstes gibst du ein Passwort ein, um deinen SSH-Schlüssel zu schützen. Das Passwort musst du ein zweites Mal eingeben, um sicher zu stellen, dass du dich nicht vertippt hast. Das Passwort wirst du immer eingeben müssen, wenn du deinen Code zu Launchpad transferieren möchtest, vergiss es also nicht! Du kannst dich alternativ auch dafür entscheiden, deinen Schlüssel nicht mit einem Passwort zu schützen, aber das ist natürlich weniger sicher. ",
    "Now, we're going to tell Launchpad about your SSH key. Open your SSH key with the following command, then copy the text from the file that opens in Scratch:": "Nun werden wir Launchpad über deinen SSH-Schlüssel informieren. Öffne deinen Schlüssel mit dem folgenden Befehl und kopiere dann den Text, der in Scratch geöffnet wird:",
    "Visit <a href=\"https:\/\/launchpad.net\/people\/+me\/+editsshkeys\">your SSH keys page<\/a>. Paste the text in the textbox and click <strong>Import public key<\/strong>.": "Besuche die Seite <a href=\"https:\/\/launchpad.net\/people\/+me\/+editsshkeys\">deines SSH-Schlüssels<\/a>. Übertrage den kopierten Text in die Tetbox und klicke auf <strong>Import public key<\/strong>.",
    "Now you can connect bzr to your Launchpad account. You'll need your launchpad id, which you can look up at <a href=\"https:\/\/launchpad.net\/people\/+me\">your launchpad page<\/a>.": "Nun kannst du bzr mit deinem Launchpad-Account verbinden. Dafür brauchst du deine Launchpad-ID, die du auf <a href=\"https:\/\/launchpad.net\/people\/+me\">deiner Launchpad-Seite<\/a> einsehen kannst.",
    "Done! Now you can download source code hosted on Launchpad and upload your own code. We'll revisit using bzr in a minute, but for now you're logged in. For a more in-depth introduction to bzr, you can also check the complete <a href=\"http:\/\/doc.bazaar.canonical.com\/latest\/en\/user-guide\">Bazaar User Guide<\/a> provided by Canonical.": "Geschafft! Nun kannst du Quellcodes von Launchpad herunterladen und deine eigenen Codes hochladen. Wir beschäftigen uns gleich nochmal mit bzr, aber für's Erste bist du eingeloggt. Wenn du eine vertiefende Einleitung in bzr haben möchtest, empfehlen wir dir den <a href=\"http:\/\/doc.bazaar.canonical.com\/latest\/en\/user-guide\">Bazaar User Guide<\/a> von Canonical.",
    "Developer \"SDK\"": "",
    "At the time of this writing, elementary doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "Zu diesem Zeitpunkt verfügt elementary im Gegensatz zu bspw. Android und iOS über kein vollständiges SDK. Glücklicherweise benötigen wir aber nur einige Apps, um mit dem Schreiben eines Codes zu beginnen.",
    "Scratch": "",
    "The first piece of our simple \"SDK\" is the code editor Scratch. This comes by default with elementary OS. It comes with some helpful features like syntax highlighting, auto-save, and the Folder Manager extension. There are other extensions for Scratch as well, like the Outline, Terminal or Devhelp extensions. Play around with what works best for you.": "",
    "Terminal": "",
    "We’re going to use Terminal in order to compile our code, push revisions to Bazaar (bzr), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "Wir verwenden das Terminal, um Codes zu erstellen, Code-Modifizierungen zu Bazaar (bzr) zu übertragen und für andere tolle Dinge. Im Verlauf dieses Guides werden wir immer wieder Terminal-Befehle vorkommen. Sofern es nicht anders angegeben wird, solltest du im Hinterkopf behalten, dass die Befehle immer aus dem Verzeichnis „Projects“ ausgeführt werden, das sich in deinem Home-Verzeichnis befindet. Zunächst musst du dieses Verzeichnis jedoch erstellen.",
    "Open Terminal and issue the following command:": "Öffne das Terminal und gib folgende Zeile ein: ",
    "Development Libraries": "Entwicklungsbibliotheken",
    "In order to build apps you're going to need their development libraries. We can fetch a basic set of libraries and other development tools with the following terminal command:": "Um Anwendungen zu kompilieren benötigst du ihre Entwicklungsbibliotheken. Wir können einige grundlegene Bibliotheken und andere Entwicklungswerkzeuge mit dem folgenden Terminalbefehl abrufen:",
    "And with that, we're ready to dive into development! Let's move on!": "Nun können wir uns dem Thema Entwicklung widmen, auf geht's!",
    "Hello World": "",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a bzr branch. Let’s begin.": "Die erste App, die wir erstellen werden, ist ein einfaches „Hello World“. Wir zeigen dir jetzt Schritt für Schritt, wie du Ordner erstellst, in denen du den Quellcode der App speicherst und dein erstes Projekt zu Bazaar transferieren kannst.",
    "Setting Up": "Aufbau",
    "Apps on elementary OS are organized into standardized directories contained in your project's \"root\" folder. Let's create a couple of these to get started:": "",
    "Create your root folder called \"gtk-hello\"": "",
    "Create a folder inside that one called \"src\". This folder will contain all of our source code.": "",
    "Later on, We'll talk about adding other directories like \"po\" and \"data\". For now, this is all we need.": "",
    "Gtk.Window and Gtk.Button": "Gtk.Window und Gtk.Button",
    "Now what you've been waiting for! We're going to create a window that contains a button. When pressed, the button will display the text \"Hello World!\" To do this, we're going to use a widget toolkit called GTK+ and the programming language Vala. Before we begin, we highly recommend that you do not copy and paste. Typing each section manually will help you to practice and remember. Let's get started:": "",
    "Create a new file in Scratch and save it as \"gtk-hello.vala\" inside your \"src\" folder": "",
    "First we must create the main function of our new GTK app. Type the following in your \"gtk-hello.vala\".": "",
    "Now, that we've initialized Gtk, we'll create a new window and declare a few properties of this window. You'll notice that most of these property names are pretty straightforward. Try to guess what each one does and we'll explain in a second. Type the following after the <code>Gtk.init<\/code> line, but before the last bracket:": "Nachdem wir Gtk initialisiert haben, erstellen wir nun ein neues Fenster und legen einige Eigenschaften dieses Fensters fest. Du wirst feststellen, dass die Bezeichnungen für diese Eigenschaften in den meisten Fällen recht eindeutig sind. Wir erläutern die Bezeichnungen gleich im Einzelnen, aber vielleicht erahnst du ihre Bedeutung bereits. Schreibe folgende Zeilen im Anschluss an die <code>Gtk.init<\/code>-Zeile, aber noch vor die letzte Klammer:",
    "The first line creates a new <code>Gtk.Window<\/code> called \"window\". The second line sets the window title that you see at the top of the window. Next, we create a margin inside that window so that widgets don't bump up against the window's edge. Then we tell the window manager that we want to place this window in the center of the screen instead of in the default position (which is usually the top left). We also must give our window a default size so that is does not appear too small for the user to interact with it. Finally, we explain what to do with this process if the main window is closed; In our case, we want to quit.": "",
    "Now that we've defined a nice window, let's put a button inside of it. After our window stuff (but before <code>Gtk.main<\/code> line), leave a new line and then type the following:": "Nachdem das Fenster definiert ist, können wir uns nun dem Button widmen. Im Anschluss an die Zeilen, die das Fenster betreffen (aber noch vor der <code>Gtk\\.main<\/code>-Zeile) lassen wir eine Zeile frei und schreiben nun folgendes:",
    "Any ideas about what happened here? We've created a new <code>Gtk.Button<\/code> with the label \"Click me!\". Then we've said that if this button is clicked, we want to change the label to say \"Hello World!\" instead. We've also said that we want to make the button insensitive; We do this because clicking the button again has no visible effect. Finally, we add the button to our <code>Gtk.Window<\/code> and declare that we want to show all of the window's contents.": "",
    "Compiling and Running your code": "Deinen Code kompilieren und ausführen",
    "Ready to test it out? Fire up your terminal and make sure you're in \"~\/Projects\/gtk-hello\/src\". Then execute the following commands to compile and run your first Gtk app:": "",
    "Did it work? If so, congratulations! If not, read over your source code again and look for errors. Also check the output of your terminal. Usually there is helpful output that will help you track down your mistake.": "Hat es funktioniert? Falls ja, dann Gratulation! Falls nicht, solltest du dir den Quellcode noch einmal ansehen und nach Fehlern suchen. Sieh dir außerdem den Output des Terminals an. Normalerweise kann dir der Output dabei helfen, den Fehler zu finden.",
    "Pushing to Launchpad": "Zu Launchpad transferieren",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code. So let's take a minute to revisit our friend <code>bzr<\/code>:": "Sobald du signifikante Inhalte verfasst hast, solltest du immer daran denken, den Code zu Launchpad zu transferieren. Das ist vor allem dann wichtig, wenn du bei kollaborativen Entwicklungsprojekten mitarbeitest. Wenn du den Code nicht rechtzeitig genug überträgst, kann es zu unerwünschten Forks kommen, wenn du allerdings zu viel Code auf einmal überträgst, kann dies die Suche nach eventuellen Bugs in deinem Code erschweren. Aus diesem Grund wenden wir uns nochmal unserem Freund <code>bzr<\/code> zu:",
    "Open Terminal and make sure you're in your project's root directory \"~Projects\/gtk-hello\"": "",
    "With these commands, we've told <code>bzr<\/code> to track this folder as a branch, that we'd like to track revisions on the file \"gtk-hello.vala\", we've committed our first revision and explained what we did in the revision, and then we've told <code>bzr<\/code> to push your code to Launchpad in your <a href=\"https:\/\/code.launchpad.net\/people\/+me\/\">junk folder<\/a>.": "",
    "Victory!": "Sieg!",
    "Let's recap what we've learned to do in this first section:": "Lass uns nochmal zusammenfassen, was wir in diesem ersten Abschnitt gelernt haben:",
    "We created a new project containing a \"src\" folder": "",
    "We created our main vala file and inside it we created a new <code>Gtk.Window<\/code> and <code>Gtk.Button<\/code>": "Wir haben eine Haupt-Datei in Vala erstellt und in dieser Datei ein neues <code>Gtk.Window<\/code> und einen <code>Gtk.Button<\/code> generiert",
    "We built and ran our app to make sure that everything worked properly": "Wir haben unsere App erstellt und ausgeführt, um sicher zu gehen, dass sie einwandfrei funktioniert",
    "Finally, we commited our first revision and pushed code to Launchpad": "Endlich haben wir unsere erste Überarbeitung eingereicht und Code auf Launchpad gebracht.",
    "Feel free to play around with this example. Make the window a different size, set different margins, make the button say other things. When you're comfortable with what you've learned, go on to the next section.": "Du kannst gern mit diesem Beispiel herum experimentieren. Lege eine andere Fenstergröße fest, verändere die Seitenränder oder verpasse dem Button einen anderen Text. Wenn du mit deinem Lernfortschritt zufrieden bist, kannst du zum nächsten Abschnitt übergehen.",
    "A Note About Libraries": "Eine Anmerkung zu den Bibliotheken",
    "Remember how when we compiled our code, we used the <code>valac<\/code> command and the argument <code>--pkg gtk+-3.0<\/code>? What we did there was make use of a \"library\". If you're not familiar with the idea of libraries, a library is a collection of methods that your program can use. So this argument tells <code>valac<\/code> to include the GTK+ library (version 3.0) when compiling our app.": "",
    "In our code, we've used the <code>Gtk<\/code> \"Namespace\" to declare that we want to use methods from GTK+ (specifically, <code>Gtk.Window<\/code> and <code>Gtk.Button.with_label<\/code>). Notice that there is a hierarchy at play. If you want to explore that hierarchy in more detail, you can <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Button\">check out Valadoc<\/a>.": "",
    "Our First App": "Unsere erste App",
    "In the previous chapter, we created a simple \"Hello World!\" app to show off our vala and Gtk skills. But what if we wanted to share our new app with a friend? They'd have to know which packages to include with the <code>valac<\/code> command we used to build our app, and after they'd built it they'd have to run it from the build directory like we did. Clearly, we need to do some more stuff to make our app fit for people to use, to make it a <em>real<\/em> app.": "",
    "Hello (again) World!": "Hallo (Schonwieder)  Welt!",
    "To create our first real app, we're going to need all the old stuff that we used in the last example. But don't just copy and paste! Let's take this time to practice our skills and see if we can recreate the last example from memory. Additionally, now that you have the basics, we're going to get a little more complex and a little more organized:": "Um unsere erste richtige App zu erstellen, brauchen wir all die alten Dinge, die wir im letzten Beispiel verwendet haben. Aber nicht einfach kopieren und einfügen! Lass uns die Zeit nehmen, unsere Fähigkeiten zu üben und um zu schauen, ob wie das letzte Beispiel aus dem Kopf neu schreiben können. Zusätzlich, da wir nun die Grundlagen können, machen wir es diesmal etwas komplexer und organisierter:",
    "Create a new folder in \"~\/Projects\" called \"hello-world\" and put our last project in that folder. Now create a new folder inside \"~\/Projects\/hello-world\" called \"hello-again\". We're doing this because our first \"gtk-hello\" and \"hello-again\" are two branches of the same \"hello-world\" project. As you get more into collaborative development, you're going to have lots of branches. This method will help you stay organized.": "",
    "Now go into \"hello-again\" and create our directory structure including the \"src\" folder.": "",
    "Create \"hello-again.vala\" in the \"src\" folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now, just copy and paste this, changing out <code>YourName<\/code> for your actual name:": "",
    "Now, let's create our main function, a <code>Gtk.Window<\/code>, and set the window's default properties. Refer back to the last chapter if you need a refresher.": "Nun lassen sie uns die Hauptfunktion schreiben, ein <code>Gtk.Window<\/code>, und setzen sie die Standardwerte des Fensters. Schauen Sie im letzten Kapitel wenn sie wieder eine Auffrischung brauchen. ",
    "For the sake of time let's just put a <code>Gtk.Label<\/code> instead of a <code>Gtk.Button<\/code>. We don't need to try to make the label do anything when you click it.": "Um Zeit zu sparen lass uns nur ein <code>Gtk.Label<\/code> anstatt eines <code>Gtk.Button<\/code> einfügen. Wir brauchen nicht versuchen das Label irgendetwas tun zu lassen, wenn man es anklickt.",
    "Don't forget to add it to your window and show the window's contents:": "Vergiss nicht es zu deinem Fenster hinzuzufügen und den Inhalt des Fensters anzeigen zu lassen:",
    "Build \"hello-again.vala\" just to make sure it all works. If something goes wrong here, feel free to refer back to the last chapter and remember to check your terminal output for any hints.": "",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, push your first revision with <code>bzr<\/code>:": "Initialisiere den Zweig, füge Deine Dateien zum Projekt hinzu und schreibe eine commit Beschreibung von dem was Du im letzten Kapitel gelernt hast. Zuletzt push Deine erste Revision mit <code>bzr<\/code>:",
    "Everything working as expected? Good. Now, let's get our app ready for other people to use.": "Läuft alles? Gut. Dann machen wir die App mal für andere benutzbar.",
    "The .desktop File": "Die .desktop Datei",
    "Every app comes with a .desktop file. This file contains all the information needed to display your app in the Applications menu and in the Dock. Let's go ahead and make one:": "Jede App hat eine .desktop Datei. Diese Datei enthält alle nötigen Informationen um die App im App-Menü und im Dock anzuzeigen.\nDann fangen wir mal an und erstellen uns eine.",
    "In your project's root, create a new folder called \"data\".": "",
    "Create a new file in scratch and save it in the \"data\" folder as \"hello.desktop\".": "",
    "Type the following into \"hello.desktop\". Like before, try to guess what each line does.": "",
    "The first line declares that this file is a \"Desktop Entry\" file. The next three lines are descriptions of our app: The branded name of our app, a generic name for our app, and a comment that describes our app's function. Next, we categorize our app. Then, we say what command will execute it. Finally, we give our app an icon (a generic one included in elementary OS) and let the OS know that this isn't a command line app. For more info about crafting .desktop files, check out <a href=\"\/docs\/human-interface-guidelines\/app-launchers\">this HIG entry<\/a>.": "",
    "Finally, let's add this file to bzr and commit a revision:": "Am Ende fügen wir diese Datei zum bzr hinzu und commiten eine Revision.",
    "Legal Stuff": "Rechtliches",
    "Since we're going to be putting our app out into the wild, we should include some information about who wrote it and the legal usage of its source code. For this we need two new files in our project's root folder: AUTHORS and COPYING.": "Da wir unsere App in die Wildnis entlassen werden, sollten wir ein paar Informationen über den Autor und die legale Nutzung des Quellcodes einbeziehen. Dafür brauchen wir zwei neue Dateien in unserem Projekt-Stammverzeichnis: AUTHORS und COPYING.",
    "Authors": "Autoren",
    "The AUTHORS file is pretty straightforward. This file contains your name and email address along with the name and email address of anyone who helped you make your app. It typically looks like this:": "Die AUTHORS Datei ist recht einfach gehalten. Sie enthält Ihren Namen und Ihre Email-Adresse, sowie die Namen und Email-Adressen aller Personen, die bei der Entwicklung geholfen haben.  Sie sieht typischerweise so aus:",
    "Copying": "Kopieren",
    "The COPYING file contains a copy of the license that your code is released under. For elementary apps this is typically the <a href=\"http:\/\/www.gnu.org\/licenses\/quick-guide-gplv3.html\">GNU General Public License<\/a> (GPL). Remember the header we added to our source code? That header reminds people that your app is licensed and it belongs to you. You can choose other licenses like the MIT license as well, but for this example let's stick to the <a href=\"http:\/\/www.gnu.org\/licenses\/gpl-3.0.txt\">GPL<\/a>.": "",
    "Mark Your Progress": "Markiere deinen Fortschritt",
    "Did you remember to add these files to bzr and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to Launchpad. Keep in mind that this acts as a backup system as well; when we push our work to Launchpad, we know it's safe and we can always revert to a known good revision if we mess up later.": "Hast du daran gedacht, diese Dateien zu bzr hinzuzufügen und eine Revision zu machen? Jedes mal wenn wir eine neue Dateu hinzufügen oder eine signifikante Änderung machen, ist es eine gute Idee, eine neue Revision auf Launchpad hochzuladen. Denk daran, dass das auch als Backup dient; wenn wir unsere Arbeit bei Launchpad hochladen, wissen wir, dass es sicher ist und wir können jederzeit zu einer Revision zurückkehren, von der wir wissen, dass sie gut ist.",
    "Now that we've got all these swanky files laying around, we need a way to tell the computer what to do with them. Ready for the next chapter? Let's do this!": "Nun, da wir die ganzen eleganten Dateien herum liegen haben, brauchen wir eine Mögliichkeit, dem Computer zu sagen, was er damit machen soll. Bereit für das nächste Kapitel? Los geht's!",
    "The Build System": "Das Build-System",
    "The next thing we need is a build system. The build system that we're going to be using is called <a href=\"http:\/\/www.cmake.org\">CMake<\/a>. We already installed the <code>cmake<\/code> program at the beginning of this book when we got the build dependencies for Granite Demo. What we're going to do in this step is create the files that tell Cmake how to install your program. This includes all the rules for building your source code as well as correctly installing your .desktop file and the binary app that results from the build process.": "",
    "Create a new file in your project's root folder called \"CMakeLists.txt\". Since this file is a bit long, we've included some comments along the way to explain each section. You don't have to copy those, but type the rest into that file:": "",
    "And you're done! Your app now has a real build system. Don't forget to add these files to bzr and push to launchpad. This is a major milestone in your app's development!": "Und schon bist du fertig! Deine Applikation hat nun ein funktionierendes \"build system\". Vergiss nicht, die neuen Dateien zu bzr hinzuzufügen und es auf launchpad zu pushen. Dies ist ein großer Meilenstein in deiner Applikationsentwicklung!",
    "Building and Installing with CMake": "Kompilieren und Installieren mit CMake",
    "Now that we have a build system, let's try it out:": "Jetzt, da wir ein \"build system\" haben, lass es uns ausprobieren:",
    "Create a new folder in your project's root folder called \"build\"": "",
    "Change into this directory in terminal and execute the following command:": "Wechsle in das Verzeichnis und führe folgenden Befehl im Terminal aus:",
    "This command tells cmake to get ready to build our app using the prefix \"\/usr\". The <code>cmake<\/code> command defaults to installing our app locally, but we want to install our app for all users on the computer.": "",
    "Build your app with <code>make<\/code> and if successful install it with <code>sudo make install<\/code>:": "Erstelle dein Programm mit <code>make<\/code> und sollte dies erfolgreich sein, installiere es mit <code>sudo make install<\/code>",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the \"build\" folder to your bzr branch and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the \"build\" folder and it won't mess up our app's source code.": "",
    "We'll revisit CMake again later to add some more complicated behavior, but for now this is all you need to know to give your app a proper build system. If you want to explore CMake a little more on your own, you can always check out <a href=\"http:\/\/www.cmake.org\/cmake\/help\/documentation.html\">CMake's documentation<\/a>.": "Wir werden später detailliertet auf CMake eingehen, um komplexere Vorgänge damit dazustellen. Für's Erste reicht es, um deiner Applikation ein funktionierendes \"build system\" zu geben. Wenn du CMake ein wenig selber erkunden willst, kannst du dir immer die <a href=\"http:\/\/www.cmake.org\/cmake\/help\/documentation.html\">CMake Dokumentation<\/a> anschauen.",
    "Review": "Überprüfung",
    "Let's review all we've learned to do:": "",
    "Create a new Gtk app using <code>Gtk.Window<\/code>, <code>Gtk.Button<\/code>, and <code>Gtk.Label<\/code>": "Erstelle eine neue Gtk App mit <code>Gtk.Window<\/code>, <code>Gtk.Button<\/code> und <code>Gtk.Label<\/code>",
    "Keep our projects organized into branches": "Organisiere deine Projekte in Zweigen",
    "License our app under the GPL and declare our app's authors in a standardized manner": "Lizenziere unsere App unter der GPL und deklariere die Autoren in einer standardisierten Weise.",
    "Create a .desktop file that tells the computer how to display our app in the Applications menu and the Dock": "Erstelle eine .desktop Datei die deinem Computer erklärt wie unser Programm in dem Programm Menü und im Dock auszusehen hat",
    "Set up a CMake build system that contains all the rules for building our app and installing it cleanly": "Richte ein CMake Build-System ein, das alle Regeln für das Kompilieren und saubere installieren unserer App beinhaltet.",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to branch your project from launchpad and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "Das ist eine Menge! Du bist auf dem besten Weg ein wahrer elementary OS App Entwickler zu werden. Klopf dir selbst einmal auf die Schulter, dann nimm dir Zeit um mit diesem Beispiel etwas zuspielen. Ändere die Namen der Dateien und schau, ob du sie immer noch Kompilieren und Installieren kannst. Frage einen anderen Entwickler ob er dein Launchpad Projekt auf seinen Computer kopiert, um zu sehen ob es sauber Kompiliert und Installiert. Du hast soeben deine erste App bereitgestellt! Wenn du fertig bist, können wir zum nächsten Teil übergehen: Paketierung.",
    "Adding Translations": "Übersetzungen hinzufügen",
    "Now that you've learned about CMake, the next step is to make your app able to be translated to different languages. The first thing you need to know is how to convert strings in your code into translatable strings. Here's an example:": "Da Du jetzt etwas über CMake erlernt hast, ist der nächste Schritt, deiner App zu ermöglichen auf unterschiedliche Sprachen übersetzt werden zu können. Das erste was Du dazu wissen musst ist, wie man Strings in deinem Code in übersetzbare Strings konvertiert. Hier ist ein Beispiel:",
    "See the difference? We just added <code>_()<\/code> around the string! Well, that was easy!": "Siehst Du den Unterschied? Wir haben einfach <code>_()<\/code> um den String gefügt. Nun, das war einfach!",
    "Go back to your project and make all your strings translatable by adding <code>_()<\/code>": "Gehe zurück zu Deinem Projekt und mache alle Deine Strings übersetzbar in dem Du <code>_()<\/code> hinzufügst.",
    "Add the following lines in the \"CMakeLists.txt\" file you created a moment ago:": "",
    "Create a directory named \"po\" on the root folder of your project. Inside of your po directory you will need to create another CMakeLists.txt file. This time, it's contents will be:": "",
    "On your build directory execute the following commands:": "In deinem Build Verzeichnis führe folgenden Befehl aus:",
    "Don't forget to add this new directory and it's contents to bzr": "Vergesse nicht dieses neue Verzeichnis und seinen Inhalt zu bzr hinzuzufügen:",
    "That's it! CMake will automatically add all the string marked with <code>_()<\/code> into a .pot template file, and a file for each available language where you'll place the translatable strings.": "Das ist alles! CMake wird alle Strings, die mit <code>_()<\/code> markiert sind, automatisch in eine .pot Template Datei hinzufügen und jeweils eine weitere Datei für jede verfügbare Sprache erstellen, wo Du die übersetzbaren Strings einfügst.",
    "Packaging": "Paketierung",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, hosted in a Personal Package Archive (PPA) on Launchpad. This will allow normal people to install your app and even get updates for it in Update Manager.": "Es ist gut, ein \"build system\" zu haben, aber unsere Applikation ist trotzdem noch nicht bereit für normale Nutzer. Wir wollen sicherstellen, dass unsere Applikation installiert werden kann, ohne das Terminal zu benutzen. Wir müssen unsere App paketieren, also ein \"Package\" erstellen. Bei elementary OS nutzen wir das Debian Paketformat (.deb). Dieser Abschnitt lehrt dich, wie du deine Applikation als .deb Datei paketierst, in einem \"Personal Package Archive\" (PPA) auf Launchpad gehostet. Dies erlaubt normalen Benutzern die Applikation zu nutzen und sogar Updates über den Update Manager zu installieren.",
    "Practice Makes Perfect": "Übung macht den Meister",
    "If you want to get really good really fast, you're going to want to practice. Repetition is the best way to commit something to memory. So let's recreate our entire Hello World app again <em>from scratch<\/em>:": "Wenn du sehr schnell sehr gut in etwas werden möchtest, dann benötigst du Übung. Das Wiederholen von Gelerntem ist wichtig, um es im Gedächtnis zu behalten . Also lass uns unsere \"Hallo Welt!\"-App nocheinmal <em>von vorne<\/em> programmieren:",
    "Create a new branch folder \"hello-packaging\"": "",
    "Set up our directory structure including the \"src\" and \"data\" folders.": "",
    "Add your Authors, Copying, .desktop, and source code.": "Füge deinen Autor, Copyrights, .desktop und Quellcode hinzu.",
    "Now set up the CMake build system.": "Setzen sie nun das CMake Build System auf.",
    "Test everything!": "Teste alles!",
    "Did you commit and push to launchpad for each step? Keep up these good habits and let's get to packaging this app!": "Hast du für jeden Schritt einen Commit und einen Push zum Launchpad ausgeführt? Behalt dir diese guten Angewohnheiten. Zeit die App zu verpacken!",
    "Debian Control": "Debian Kontrolle",
    "Now it's time to create the rules that will allow your app to be built as a .deb package. Let's dive right in:": "Jetzt ist es Zeit die Regeln zu erstellen, die es erlaubt Ihre App als .deb-Paket zu bauen. Lass uns eintauchen:",
    "Like CMake, elementary maintains a simple version of the \"debian\" folder that contains all the files we need for packaging. Let's grab a copy of that with bzr:": "",
    "Copy the \"debian\" folder from that branch into your \"hello-packaging\" folder.": "",
    "Open the file called \"changelog\" and make it look like below:": "",
    "The first line contains your app's binary name, version, OS codename, and how urgently your package should be built. Remember that your app's binary name is lowercase and does not contain spaces. After the <code>*<\/code> is a list of your changes. Finally, you include your name, email address, and the date. For more information about the debian changelog, make sure to read the <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/ch-source.html#s-dpkgchangelog\">documentation<\/a>.": "",
    "Open the file called \"control\" and make it look like below:": "",
    "Open the file called \"copyright\". We only need to edit what's up top:": "",
    "That wasn't too bad right? We'll set up more complicated packaging in the future, but for now this is all you need. If you'd like you can always read <a href=\"http:\/\/www.debian.org\/doc\/debian-policy\/\">more about Debian packaging<\/a>.": "",
    "Launchpad Recipes": "Launchpad Rezepte",
    "Now that we have our \"debian\" folder in order, it's time to go to launchpad and create a recipe: instructions what code to build, how often to build it, and where to put the resulting packages.": "",
    "<a href=\"https:\/\/code.launchpad.net\/people\/+me\/+junk\/hello-packaging\/+new-recipe\">Click this link<\/a> or go to Launchpad, find your hello-packaging branch, then select <strong>Create packaging recipe<\/strong>.": "",
    "Read through the options available to you. You can go ahead and keep the defaults for Name, Description (it's blank), Owner, Daily builds, and PPA but you can also customize a bit if you'd like.": "",
    "When you get down to a set of checkboxes with the header \"Default distribution series\", make sure you select \"Trusty\". elementary OS Freya shares it's core with Ubuntu Trusty, so packages built on Trusty will also work on Freya.": "",
    "For recipe text, we're going to change it ever so slightly to conform better with the official Debian rules. Change out the first line for this one:": "",
    "Notice that this is ever so slightly different from the default line which includes <code>{debupstream}-0~{revno}<\/code> instead of <code>{debupstream}+r{revno}-0<\/code>.": "",
    "When you're happy with the options you've chosen, select <strong>Create Recipe<\/strong>.": "Wenn Sie zufrieden mit Ihren Einstellungen sind, wählen Sie <strong>Rezept erstellen<\/strong>.",
    "Now that you've created a recipe, you only have to wait until Launchpad finishes the build! If everything goes as planned, your new PPA will contain a packaged app which other people can install and run with ease. Additionally, anyone using your PPA will be able to get updates for your app if you upload a new version. We'll talk more about how to do that later.": "",
    "Creating Layouts": "Layouts erstellen",
    "Now that you know how to code, build, and distribute an app using Vala, Gtk, CMake, and Launchpad PPAs, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window<\/code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid<\/code>.": "",
    "Widgets as Subclasses of Other Widgets": "Widgets als Unterklassen anderer Widgets",
    "Before we get into <code>Gtk.Grid<\/code>, let’s stop for a second and take some time to understand Gtk a little better. At the lower level, Gtk has classes that define some pretty abstract traits of widgets such as <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Container\"><code>Gtk.Container<\/code><\/a> and <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Orientable\"><code>Gtk.Orientable<\/code><\/a>. These aren’t widgets that we’re going to use directly in our code, but they’re used as building blocks to create the widgets that we do use. It’s important that we understand this, because it means that when we understand how to add children to a <code>Gtk.Container<\/code> like <code>Gtk.Grid<\/code>, we also understand how to add children to a <code>Gtk.Container<\/code> like <code>Gtk.Toolbar<\/code>. Both Grid and Toolbar are widgets that are subclasses of the more abstract class <code>Gtk.Container<\/code>.": "",
    "If you want to understand more about these widgets and the parts of Gtk that they subclass, jump over to <a href=\"https:\/\/valadoc.org\/\">Valadoc<\/a> and search for a widget like <code>Gtk.Grid<\/code>. See that big tree at the top of the page? It shows you every component of Gtk that <code>Gtk.Grid<\/code> subclasses and even what those components subclass. Having a lower level knowledge of Gtk will help you to implement widgets you haven’t worked with before since you will understand how their parent classes work.": "",
    "Gtk.Grid": "",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid<\/code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to Launchpad, and build a PPA in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window<\/code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "",
    "Just like when we add a Button or Label, we need to create our <code>Gtk.Grid<\/code>. As always, don’t copy and paste! Practice makes perfect. We create a new Gtk.Grid like this:": "Genau wie beim Hinzufügen eines Buttons oder Labels, müssen wir unser <code>Gtk.Grid<\/code> erstellen. Wie sonst auch, kein Copy & Paste! Übung macht den Meister. So erstellen wir ein neues Gtk.Grid:",
    "Remember that Button and Label accepted an argument (a String) in the creation method (that’s the stuff in parentheses and quotes). As shown above, <code>Gtk.Grid<\/code> doesn’t accept any arguments in the creation method. However, you can still change the grid’s properties (like <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Orientation\">orientation<\/a>) as we did on the second line. Here, we’ve declared that when we add widgets to our grid, they should stack vertically.": "",
    "Let’s add some stuff to the Grid:": "Nun fügen wir etwas zum Grid hinzu:",
    "Super easy stuff, right? We can add the grid to our window using the same method that we just used to add widgets to our grid:": "Richtig einfach, oder? Jetzt können wir mit der gleichen Methode ein Gitter zu unserem Fenster hinzufügen, wie wir es auch schon mit den Widgets gemacht haben:",
    "Now build your app and see what it looks like. Since we’ve given our grid a <code>Gtk.Orientation<\/code> of <code>VERTICAL<\/code> the labels stack up on top of each other. Try creating a <code>Gtk.Grid<\/code> without giving it an orientation. By default, <code>Gtk.Grid<\/code>’s orientation is horizontal. You really only ever have to give it an orientation if you need it to be vertical.": "",
    "Functionality in Gtk.Grid": "Funktionalität in Gtk.Grid",
    "Okay, so you know all about using a <code>Gtk.Grid<\/code> to pack multiple children into a Window. What about using it to lay out some functionality in our app? Let’s try building an app that shows a message when we click a button. Remember in our first “Hello World” how we changed the label of the button with <code>button.clicked.connect<\/code>? Let’s use that method again, but instead of just changing the label of the button, we’re going to use it to change an empty label to a message.": "",
    "Let’s create a Window with a vertical Grid that contains a Button and a Label:": "Lassen Sie uns ein Fenster mit einem vertikalen Gitter erstellen, das einen Button und ein Label enthält:",
    "This time when we created our grid, we gave it another property: <code>row_spacing<\/code>. We can also add <code>column_spacing<\/code>, but since we’re stacking widgets vertically we’ll only see the effect of <code>row_spacing<\/code>. Notice how we can create new widgets outside the grid and then pack them into the grid by name. This is really helpful when you start using different methods to change the properties of your widgets.": "",
    "Now, let’s hook up the button to change that label. To keep our code logically separated, we’re going to add it below <code>window.add (grid);<\/code>. In this way, the first portion of our code defines the UI and the next portion defines the functions that we associated with the UI:": "",
    "Remember, we set the button as insensitive here because clicking it again has no effect. Now compile your app and marvel at your newfound skills. Play around with orientation and spacing until you feel comfortable.": "",
    "The Attach Method": "Die Attach Methode",
    "While we can use <code>Gtk.Grid<\/code> simply to create single row or single column layouts with the add method, we can also use it to create row-and-column-based layouts with the <code>attach<\/code> method. First we’re going to create a new <code>Gtk.Grid<\/code> and set both column and row spacing, then we’ll create all the widgets we want to attach to our grid, and finally we’ll attach them.": "",
    "Make sure to give the Grid, Buttons, and Labels unique names that you’ll remember. It’s best practice to use descriptive names so that people who are unfamiliar with your code can understand what a widget is for without having to know your app inside and out.": "",
    "Notice that the attach method takes 5 arguments:": "Beachten Sie, dass die attach Methode 5 Argumente erwartet:",
    "The widget that you want to attach to the grid.": "Das Widget, dass Sie der Tabelle anhängen möchten.",
    "The column number to attach to starting at 0.": "Die Spaltennummer zum hinzufügen, beginnend bei 0.",
    "The row number to attach to starting at 0.": "Die Zeilennummer zum hinzufügen, beginnend mit 0",
    "The number of columns the widget should span.": "Die Spaltenanzahl, die das Widget umfassen soll.",
    "The number of rows the widget should span.": "Die Zeilenanzahl, die das Widget umfassen soll.",
    "You can also use <code>attach_next_to<\/code> to place a widget next to another one on <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.PositionType\">all four sides<\/a>. Don’t forget to add the functionality associated with our buttons:": "",
    "You’ll notice in the example code above that we’ve created a 2 x 2 grid with buttons on the left and labels on the right. The top label goes from blank to “Hello World!” and the button label is rotated 90 degrees. Notice how we gave the buttons labels that directly call out what they do to the other labels.": "Sie werden feststellen, dass wir in dem obigen Beispielcode ein Gitter der Größe 2 x 2, mit Buttons auf der linken und Labels auf der rechten Seite, erstellt haben. Das obere Label verändert sich von leer zu \"Hallo Welt!\", und das Label des Buttons dreht sich um 90 Grad. Beachten Sie, wie wir den Buttons Labels gegeben haben, die direkt ausdrücken, was sie mit den anderen Labels tun.",
    "Let’s recap what we learned in this section:": "Lassen Sie uns zusammenfassen, was wir in dieser Lektion gelernt haben:",
    "We learned about the building blocks of Gtk and the importance of subclasses": "Wir haben etwas über die Bausteine von Gtk und die Wichtigkeit von Unterklassen gelernt.",
    "We packed multiple children into a Window using <code>Gtk.Grid<\/code>": "Wir haben per <code>Gtk.Grid<\/code> mehrere Kinder in ein Fenster gepackt.",
    "We set the properties of <code>Gtk.Grid<\/code> including its orientation and spacing": "Wir legen die Eigenschaften von <code>Gtk.Grid<\/code> fest, einschließlich seiner Ausrichtung und Abstand.",
    "We added multiple widgets into a single Gtk.Grid using the attach method to create complex layouts containing Buttons and Labels that did cool stuff.": "Wir haben mit der Methode attach mehrere Widgets zu einem einzigen Gtk.Grid hinzugefügt. So ist die Erstellung von komplexen Layouts mit Buttons und Labels möglich, die coole Dinge tun.",
    "Now that you understand more about Gtk, Grids, and using Buttons to alter the properties of other widgets, try packing other kinds of widgets into a window like a Toolbar and changing other properties of <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Label\">Labels<\/a> like <code>width_chars<\/code> and <code>ellipsize<\/code>. Don’t forget to play around with the attach method and widgets that span across multiple rows and columns. Remember that Valadoc is super helpful for learning more about the methods and properties associated with widgets.": "",
    "Notifications": "Benachrichtigungen",
    "By now you've probably already seen the white notification bubbles that appear on the top right of the screen. Notifications are a simple way to notify a user about the state of your app. For example, they can inform the user that a long process has been completed or a new message has arrived. In this section we are going to show you just how to get them to work in your app. Let's begin by making a new project!": "",
    "Making Preparations": "Vorbereitungen treffen",
    "Create a new folder inside of  \"~\/Projects\" called \"notifications-app\"": "",
    "Create a file inside called <code>notify-app.vala<\/code>": "Erstellen Sie darin eine Datei mit dem Namen <code>notify-app.vala<\/code>",
    "Re-create the <code>CMake<\/code> folder and <code>CMakeFiles.txt<\/code> file. If you don't remember how to set up CMake, go back to the <a href=\"#building-and-installing-with-cmake\">previous section<\/a> and review.": "",
    "Remember how to <a href=\"#the-desktop-file\">make a .desktop file<\/a>? Excellent! Make one for this project, but this time, name it <code>notify.app.desktop<\/code> as <code>notify.app<\/code> will be your app's ID. Since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true<\/code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.": "",
    "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed.": "",
    "Gtk.Application": "",
    "In order to display notifications, you're going to need your app to subclass <code>Gtk.Application<\/code>. <code>Gtk.Application<\/code> is a class that handles many important aspects of a Gtk app like app uniqueness and the application ID you need to identify your app to the notifications server. If you want some more details about <code>Gtk.Application<\/code>, <a href=\"https:\/\/valadoc.org\/gtk+-3.0\/Gtk.Application\">check out Valadoc<\/a>.": "",
    "Now that you know what a <code>Gtk.Application<\/code> is, let's create one:": "",
    "Initiating your app with Gtk.Application is a little different from what we did a few sections back. This time, in <code>main<\/code> you are starting your app with <code>app.run<\/code> and you have a new function called <code>activate<\/code> inside of your class; This <code>activate<\/code> function will be the one that executes when you invoke <code>app.run<\/code>. We are also creating a <code>Gtk.ApplicationWindow<\/code>, this is where you will place all the widgets your app needs. Now that we have a simple window, let's use what we learned in <a href=\"#gtk-grid\">creating layouts<\/a> and make a grid containing one button that will show a notification.": "",
    "In between <code>var app_window...<\/code> and <code>app_window.show ();<\/code>, write the folowing lines of code:": "Zwischen <code>var app_window...<\/code> und <code>app_window.show ();<\/code>, schreibe die folgenden Zeilen Code:",
    "Since we're adding translatable strings, don't forget to update your translation template by running <code>make pot<\/code>.": "Weil wir auch Übersetzungs-Zeichenfolgen haben, dürfen wir nicht vergessen, die Übersetzungsvorlagen mit <code>make pod<\/code> zu aktualisieren.",
    "Sending Notifications": "Benachrichtigungen senden",
    "Now that we have a Gtk.Application we can send notifications. Let's connect a function to the button we created and use it to send a notification:": "",
    "Okay, now compile your new app. if everythink works, you should see your new app. Click the \"Send\" button. Did you see the notification? Great! Don't forget to commit and push your project in order to save your branch for later.": "",
    "Additional Features": "Zusätzliche Funktionen",
    "Now that you know how to send basic notifications, lets talk about a couple ways to make your notifications better. Notifications are most useful when users can indentify where they came from and they contain relevant information. In order to make sure your notifications are useful, there are three important features you should know about: setting an icon, replacing a notification, and setting priority.": "",
    "Icons": "Symbole",
    "In order to make sure users can easily recognize a notification, we should set a relevant icon. Right after the <code>var notification = New Notification<\/code> line, add:": "",
    "That's it. Compile your app again, and press the \"Send\" button. As you can see, the notification now has an icon. Using this method, you can set the icon to anything you'd like. You can use <code>gtk3-icon-browser<\/code> to see what system icons are available.": "",
    "Replace": "Ersetzen",
    "We now know how to send a notification, but what if you need to update it with new information? Thanks to the notification ID, we can easily replace a notification. The notification ID should be the same as the app ID that we set in <code>Gtk.Application<\/code>.": "",
    "Let's make the replace button. This button will replace the current notification with one with different information. Let's create a new button for it, and add it to the grid:": "",
    "{\n        this.withdraw_notification (\"notify-test\");\n    });\n-->": "{\nthis.withdraw_notification (\"notify-test\");\n});\n-->",
    "Very easy right? Let's compile and run your app again. Click on the buttons, first on \"Show\", then \"Replace\". See how the text on your notification changes without making a new one appear?": "",
    "Priority": "Priorität",
    "Notifications also have priority. When a notification is set as <code>URGENT<\/code> it will stay on the screen until either the user interacts with it, or you withdraw it. To make an urgent notification, add the following line before the <code>this.send_notification ()<\/code> function": "",
    "<code>URGENT<\/code> notifications should really only be used on the most extreme cases. There are also <a href=\"https:\/\/valadoc.org\/gio-2.0\/GLib.NotificationPriority\">other notification priorities<\/a>.": "",
    "Let's review what all we've learned:": "Lass uns überprüfen was wir alles gelernt haben.",
    "We learned what <code>Gtk.Application<\/code> is and how to make a subclass of it.": "Wir lernten was <code>Gtk.Application<\/code> ist und wie man eine Subklasse davon macht.",
    "We built an app that sends and updates notifications.": "Wir haben eine App gebaut, die Nachrichten und Updatemeldungen sendet.",
    "We also learned about other notification features like setting an icon and a notification's priority.": "Wir haben auch etwas über andere Benachrichtigungsfunktionen gelernt, wie zum Beispiel ein Icon festzulegen oder die Priorität einer Benachrichtigung.",
    "As you could see, sending notifications is very easy thanks to <code>Gtk.Application<\/code>. If you need some further reading on notifications, Check out the page about <code>Glib.Notification<\/code> in <a href=\"https:\/\/valadoc.org\/gio-2.0\/GLib.Notification\">Valadoc<\/a>.": "",
    "Next Page:": "Nächste Seite:",
    "Reference": "Verweise",
    "Creating an account on GitHub and importing an SSH key": "",
    "Setting up the Git revision control system": "",
    "We’re going to assume that you’re working from a clean installation of elementary OS Loki or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "",
    "GitHub": "",
    "GitHub is an online platform for hosting code, reporting issues, tracking milestones, making releases, and more. If you're planning to publish your app through AppCenter, you'll need a GitHub account. If you already have an account, feel free to move on to the next section. Otherwise, <a href=\"https:\/\/github.com\/join\">sign up for a GitHub account<\/a> and return when you're finished.": "",
    "Git": "",
    "To download and upload to GitHub, you'll need the Terminal program <code>git<\/code>. Git is a type of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Revision_control\">revision control system<\/a> that allows multiple developers to collaboratively develop and maintain code while keeping track of each revision along the way.": "",
    "If you're ready, let's get you set up to use Git:": "",
    "Open the Terminal and install Git": "",
    "We need to inform Git who we are so that when we upload code it is attributed correctly. Inform Git of your identity with the following commands": "",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http:\/\/en.wikipedia.org\/wiki\/Secure_Shell\">SSH<\/a> key pair (a kind of fingerprint for your computer) and import your public key to GitHub. Type the following in Terminal:": "",
    "When prompted, press <kbd>Enter<\/kbd> to accept the default file name for your key. You can choose to protect your key with a password or press <kbd>Enter<\/kbd> again to use no password when pushing code.": "",
    "Now we're going to import your public key to GitHub. View your public SSH key with the following command, then copy the text that appears": "",
    "Visit <a href=\"https:\/\/github.com\/settings\/keys\">your SSH keys page<\/a> and click the green button in the upper right-hand corner that says &quot;New SSH key&quot;. Paste your key in the &quot;Key&quot; box and give it a title.": "",
    "We're all done! Now you can download source code hosted on GitHub and upload your own code. We'll revisit using <code>git<\/code> in a bit, but for now you're set up. For a more in-depth intro to Git, we recommend <a href=\"https:\/\/www.codecademy.com\/learn\/learn-git\">Codecademy's course on Git<\/a>.": "",
    "At the time of this writing, elementary OS doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "",
    "We’re going to use Terminal in order to compile our code, push revisions to GitHub (using <code>git<\/code>), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a Git branch. Let’s begin.": "",
    "Pushing to GitHub": "",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code.": "",
    "First we need to create a new repository on GitHub. Visit <a href=\"https:\/\/github.com\/new\">the new repository page<\/a> and create a new repository for your code.": "",
    "Open Terminal and make sure you're in your project's root directory &quot;~Projects\/gtk-hello&quot;, then issue the following commands": "",
    "Remember to replace <code>yourusername<\/code> with your GitHub username and <code>yourrepositoryname<\/code> with the name of the new repository you created.": "",
    "With these commands, we've told <code>git<\/code> to track revisions in this folder, that we'd like to track revisions on the file &quot;gtk-hello.vala&quot; specifically, we've committed our first revision and explained what we did in the revision, and then we've told <code>git<\/code> to push your code to GitHub.": "",
    "Finally, we commited our first revision and pushed code to GitHub": "",
    "Create &quot;hello-again.vala&quot; in the &quot;src&quot; folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now you can copy <a href=\"https:\/\/elementary.io\/docs\/code\/reference#gpl-header\">the GPL header from our reference documentation<\/a>. Be sure to assign the copyright to yourself at the top of the header and change the author to you at the bottom of the header.": "",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, make sure you've created a new repository for your project on GitHub push your first revision with <code>git<\/code>:": "",
    "Create a new file in scratch and save it in the &quot;data&quot; folder as &quot;com.github.yourusername.yourrepositoryname.desktop&quot;. This naming scheme is called <a href=\"https:\/\/en.wikipedia.org\/wiki\/Reverse_domain_name_notation\">Reverse Domain Name Notation<\/a> and will ensure that your .desktop file has a unique file name.": "",
    "Type the following into your .desktop file. Like before, try to guess what each line does.": "",
    "Finally, let's add this file to <code>git<\/code> and commit a revision:": "",
    "AppData.xml": "",
    "Every app also comes with an .appdata.xml file. This file contains all the information needed to list your app in AppCenter.": "",
    "In your data folder, create a new file called &quot;com.github.yourusername.yourrepositoryname.appdata.xml&quot;. Just like with the .desktop file, we use RDNN to avoid file naming collisions.": "",
    "Type the following into your .appdata.xml file": "",
    "These are all the mandatory fields for displaying your app in AppCenter. There are plenty of other optional fields that you can read about <a href=\"https:\/\/www.freedesktop.org\/software\/appstream\/docs\/chap-Metadata.html\">here<\/a>.": "",
    "There are also some special custom fields for AppCenter to further brand your listing. Specifically, you can set a background color and a text color for your app's header and banner. You can do so by adding the following keys inside the <code>component<\/code> tag:": "",
    "You can specificy colors here in either Hexidecimal or RGB. The background color will automatically be given a slight gradient in your app's banner.": "",
    "You can also specify a suggested price in whole USD. Remember though that AppCenter is a pay-what-you-want store. This is not a price floor. Users will still be able to choose any price they like, including 0.": "",
    "Did you remember to add these files to <code>git<\/code> and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to GitHub. Keep in mind that this acts as a backup system as well; when we push our work to GitHub, we know it's safe and we can always revert to a known good revision if we mess up later.": "",
    "And you're done! Your app now has a real build system. Don't forget to add these files to <code>git<\/code> and push to GitHub. This is a major milestone in your app's development!": "",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the &quot;build&quot; folder to your <code>git<\/code> repository and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the &quot;build&quot; folder and it won't mess up our app's source code.": "",
    "Create a .desktop file using RDNN that tells the computer how to display our app in the Applications menu and the Dock": "",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to clone your repo from GitHub and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "",
    "Don't forget to add this new directory and it's contents to git": "",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, which is required to publish apps in AppCenter. This will allow normal people to install your app and even get updates for it when you publish them.": "",
    "Did you commit and push to GitHub for each step? Keep up these good habits and let's get to packaging this app!": "",
    "Like CMake, elementary maintains a simple version of the &quot;debian&quot; folder that contains all the files we need for packaging. Let's grab a copy of that with <code>git<\/code>:": "",
    "Now that you know how to code, build, and package an app using Vala, Gtk, CMake, and Debian packaging, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window<\/code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid<\/code>.": "",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid<\/code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to GitHub, and set up Debian Packaging in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window<\/code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "",
    "Remember how to <a href=\"#the-desktop-file\">make a .desktop file<\/a>? Excellent! Make one for this project, but this time, since your app will be displaying notifications, add <code>X-GNOME-UsesNotifications=true<\/code> to the end of the file. This is needed so that users will be able to set notification preferences for your app in the system's notification settings.": "",
    "When using notifications, it's important that your desktop file has the same name as your application's ID. This is because elementary uses desktop files to find extra information about the app who sends the notification such as a default icon, or the name of the app. If you don't have a desktop file whose name matches the application id, your notification might not be displayed. To keep things simple, we'll be using the same RDNN everywhere.": ""
}